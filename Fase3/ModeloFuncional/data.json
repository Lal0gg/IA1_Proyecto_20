{
    "intents": [
      {
        "tag": "consulta_saludo",
        "patterns": [
          "Hola",
          "¡Hola! ¿Qué tal?",
          "¡Buenos días!",
          "¡Buenas tardes!",
          "¡Buenas noches!",
          "¡Hey!",
          "¡Qué tal!",
          "¿Qué pasa?",
          "¡Qué onda!",
          "¿Cómo estás?",
          "¿Cómo te va?",
          "¡Qué hay de nuevo!",
          "¡Hola, buen día!",
          "¿Cómo va todo?",
          "¡Qué tal todo!",
          "¡Saludos!",
          "¡Ey! ¿Cómo andas?",
          "¡Qué pasa contigo!",
          "¿Cómo va la vida?",
          "¡Qué tal por ahí?",
          "¿Todo bien?",
          "¡Qué tal todo por tu lado?",
          "¿Cómo estás pasando el día?",
          "¡Hola! ¿Qué tal la familia?",
          "¡Hola, ¿cómo te va?",
          "¡Qué tal la semana?",
          "¡Qué tal! ¿Cómo te encuentras?",
          "¿Qué tal el día?",
          "¡Hola, buen día! ¿Cómo estás?",
          "¿Todo bien por ahí?",
          "¡Qué tal! ¿Cómo te encuentras?",
          "¡Hola, todo chévere?",
          "¡Qué tal todo por allá?",
          "¡Qué onda! ¿Todo bien?",
          "¿Qué tal tu día?",
          "¡Hola, cómo va todo?",
          "¡Qué tal tu semana?",
          "¡Qué tal todo por ahí?",
          "¡Qué tal la vida?",
          "¿Cómo vas?",
          "¡Hola! ¿Cómo va el día?",
          "¡Qué onda! ¿Todo bien?",
          "¿Todo tranquilo?",
          "¡Qué pasa! ¿Cómo te va?",
          "¡Hola! ¿Cómo te sientes?",
          "¡Hola, qué bueno verte!",
          "¡Hola! ¿Qué tal todo en tu mundo?",
          "¡Ey! ¿Cómo vas?",
          "¡Qué tal todo en tu mundo?",
          "¡Hola! ¿Todo bien?",
          "¿Cómo te encuentras hoy?",
          "¿Cómo vas por allá?",
          "¡Qué tal el día de hoy?",
          "¡Hola! ¿Todo bien por ahí?",
          "¡Saludos! ¿Cómo estás?",
          "¡Qué tal por ahí?",
          "¿Todo bien por allá?",
          "¡Qué tal la jornada?",
          "¡Hola! ¿Cómo te encuentras?",
          "¡Hola, qué bueno verte!",
          "¡Qué tal, cómo te va?",
          "¡Ey! ¿Cómo va todo?",
          "¿Qué tal el fin de semana?",
          "¡Qué tal por allá?",
          "¡Hola! ¿Cómo va la vida?",
          "¡Qué tal todo por aquí?",
          "¡Nos vemos, cómo estás?",
          "¡Qué tal la vida hoy?",
          "¡Qué tal todo el día?",
          "¿Qué tal todo? ¿Todo bien?",
          "¡Hola! ¿Cómo estás pasando el día?",
          "¡Hola! ¿Qué tal todo por aquí?",
          "¡Hola! ¿Cómo andas?",
          "¿Cómo te va el día?",
          "¡Qué tal todo, todo bien?",
          "¡Qué pasa! ¿Cómo va todo?",
          "¡Hola! ¿Qué tal todo por tu lado?",
          "¡Qué tal todo! ¿Todo bien?",
          "¡Qué tal la familia?",
          "¡Hola! ¿Qué novedades?",
          "¡Qué tal! ¿Cómo va todo?",
          "¡Hola! ¿Cómo estás pasando el día?",
          "¿Cómo va el día hoy?",
          "¡Hola! ¿Todo tranquilo por ahí?",
          "¡Qué tal! ¿Cómo te va?",
          "¿Qué tal el fin de semana? ¿Todo bien?",
          "¡Qué tal! ¿Todo bien por ahí?",
          "¡Hola! ¿Todo chévere?",
          "¡Hola! ¿Qué tal todo hoy?",
          "¡Qué tal el día hoy?",
          "¡Hola! ¿Todo bien por aquí?",
          "¡Ey! ¿Todo bien por ahí?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Hola! ¿Todo en orden?",
          "¡Qué tal la mañana?",
          "¡Hola! ¿Todo bien por tu lado?",
          "¡Hola! ¿Todo bien por allá?",
          "¡Hola! ¿Cómo te sientes hoy?",
          "¿Cómo te encuentras ahora?",
          "¡Hola! ¿Cómo te va hoy?",
          "¡Hola! ¿Cómo te va con todo?",
          "¡Qué tal todo por ahí?",
          "¡Hola! ¿Cómo va todo por tu lado?",
          "¡Qué tal! ¿Todo en orden?",
          "¡Hola! ¿Cómo va todo hoy?",
          "¿Todo bien por ahí?",
          "¡Hola! ¿Cómo va todo?",
          "¡Qué tal! ¿Cómo va tu día?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Qué tal! ¿Todo bien?",
          "¡Qué tal! ¿Cómo te va?",
          "¡Hola! ¿Qué tal el día?",
          "¡Qué tal! ¿Cómo va tu jornada?",
          "¡Hola! ¿Qué tal todo?",
          "¡Hola! ¿Cómo va la vida por tu lado?",
          "¡Hola! ¿Cómo va todo por allá?",
          "¿Qué tal tu día?",
          "¡Hola! ¿Qué tal todo por allá?",
          "¡Hola! ¿Cómo te va?",
          "¡Hola! ¿Todo bien?",
          "¡Qué tal! ¿Cómo va todo?",
          "¡Hola! ¿Todo bien por aquí?",
          "¡Qué tal la jornada?",
          "¡Hola! ¿Cómo te sientes hoy?",
          "¡Hola! ¿Cómo va todo por tu lado?",
          "¡Hola! ¿Todo en orden?",
          "¡Qué tal! ¿Cómo estás?",
          "¡Hola! ¿Qué tal todo?",
          "¡Hola! ¿Todo bien por aquí?",
          "¡Hola! ¿Qué tal todo por aquí?",
          "¡Qué tal! ¿Cómo te encuentras?",
          "¡Hola! ¿Qué tal tu día?",
          "¡Hola! ¿Cómo vas?",
          "¡Qué tal! ¿Todo bien por tu lado?",
          "¡Hola! ¿Cómo te va?",
          "¡Qué tal! ¿Todo bien hoy?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Qué pasa! ¿Cómo estás?",
          "¡Hola! ¿Cómo te va el día?",
          "¡Qué tal! ¿Cómo va todo por allá?",
          "¡Hola! ¿Cómo estás hoy?",
          "¡Hola! ¿Todo bien por aquí?",
          "¡Hola! ¿Qué tal el día?",
          "¡Hola! ¿Qué tal por allá?",
          "¡Hola! ¿Cómo te encuentras?",
          "¡Hola! ¿Todo bien? ¡Qué tal!",
          "¡Hola! ¿Cómo va todo?",
          "¡Qué tal! ¿Todo tranquilo?",
          "¡Hola! ¿Cómo va todo?",
          "¡Hola! ¿Qué tal por ahí?",
          "¡Hola! ¿Cómo va todo?",
          "¡Qué tal todo?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Qué tal todo?",
          "¡Hola! ¿Qué tal todo?",
          "¡Hola! ¿Qué tal todo hoy?",
          "¡Hola! ¿Cómo va el día?",
          "¡Hola! ¿Cómo va todo por allá?",
          "¡Hola! ¿Cómo va la vida?",
          "¡Hola! ¿Todo tranquilo?"
        ],
        "responses": [
          "¡Hola! ¿En qué puedo ayudarte?",
          "¡Hola! ¿Cómo estás?",
          "¡Buenas! ¿En qué te puedo ayudar?",
          "¡Hola, un gusto saludarte!",
          "¡Qué bueno verte por aquí!",
          "¡Bienvenido! ¿En qué te puedo asistir?",
          "¡Hola, cómo te va?",
          "¡Qué tal! ¿En qué te ayudo?",
          "¡Hola! ¿Todo bien?",
          "¡Saludos! ¿Cómo te puedo ayudar?",
          "¡Hola! ¿Qué tal todo?",
          "¡Qué bueno verte! ¿En qué te ayudo?",
          "¡Qué tal! ¿Todo bien?",
          "¡Buenas! ¿Cómo te va?",
          "¡Hola! ¿Cómo va todo?",
          "¡Hola! ¿Qué tal el día?",
          "¡Qué tal! ¿Todo bien por ahí?",
          "¡Hey! ¿En qué te ayudo?",
          "¡Qué tal! ¿Cómo te va hoy?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Buenas! ¿En qué te puedo asistir?",
          "¡Hola! ¿Qué tal tu día?",
          "¡Qué onda! ¿Cómo va todo?",
          "¡Hola, todo bien?",
          "¡Buenas tardes! ¿Cómo te encuentras?",
          "¡Qué tal! ¿En qué te ayudo?",
          "¡Hola! ¿Qué tal las cosas?",
          "¡Qué tal todo? ¿Necesitas algo?",
          "¡Hola! ¿Cómo te sientes?",
          "¡Hola! ¿En qué puedo asistirte hoy?",
          "¡Qué tal todo, todo bien?",
          "¡Hola! ¿Te puedo ayudar con algo?",
          "¡Qué pasa! ¿Te ayudo en algo?",
          "¡Hola! ¿Todo tranquilo por aquí?",
          "¡Qué tal! ¿Todo en orden?",
          "¡Qué onda! ¿Cómo va tu día?",
          "¡Hola! ¿Cómo te va hoy?",
          "¡Hola! ¿Todo bien por aquí?",
          "¡Hola! ¿Te ayudo con algo?",
          "¡Buenas! ¿Cómo vas?",
          "¡Hola! ¿En qué puedo ayudarte ahora?",
          "¡Qué tal todo! ¿Todo bien?",
          "¡Hola! ¿Cómo va todo por tu lado?",
          "¡Hola! ¿Te ayudo con algo más?",
          "¡Qué tal todo! ¿En qué te ayudo?",
          "¡Qué pasa! ¿Te ayudo con algo?",
          "¡Hola! ¿Todo en orden?",
          "¡Qué tal! ¿En qué puedo ayudarte?",
          "¡Qué onda! ¿Todo bien?",
          "¡Hola! ¿En qué te puedo asistir?",
          "¡Hola! ¿Todo bien por ahí?",
          "¡Qué tal! ¿Cómo te va?",
          "¡Hola! ¿Te puedo ayudar?",
          "¡Saludos! ¿En qué te ayudo?",
          "¡Hola! ¿Cómo te sientes hoy?",
          "¡Qué tal! ¿En qué te ayudo?",
          "¡Hola! ¿Todo bien por allá?",
          "¡Hola! ¿Qué tal la vida?",
          "¡Qué onda! ¿Todo en orden?",
          "¡Qué tal! ¿Cómo estás hoy?",
          "¡Hola! ¿Qué tal todo por tu lado?",
          "¡Buenas! ¿Cómo te va?",
          "¡Hola! ¿Todo bien?",
          "¡Qué pasa! ¿Cómo va tu día?",
          "¡Qué tal! ¿En qué te puedo ayudar?",
          "¡Hola! ¿Qué tal tu semana?",
          "¡Hola! ¿Cómo te encuentras?",
          "¡Qué onda! ¿Cómo va todo?",
          "¡Hola! ¿Te puedo ayudar con algo más?",
          "¡Saludos! ¿Cómo va todo?",
          "¡Hola! ¿Todo en orden?",
          "¡Qué tal! ¿Cómo va tu día?",
          "¡Buenas! ¿En qué puedo asistirte?",
          "¡Qué tal! ¿Todo tranquilo?",
          "¡Hola! ¿Todo bien por ahí?",
          "¡Hola! ¿Te puedo asistir?",
          "¡Hola! ¿Todo bien?",
          "¡Hola! ¿Cómo te va?",
          "¡Hola! ¿Todo bien?",
          "¡Qué pasa! ¿Todo bien?",
          "¡Hola! ¿Te puedo ayudar?",
          "¡Hola! ¿Cómo va tu día?",
          "¡Qué tal! ¿Todo bien por aquí?",
          "¡Qué tal! ¿Cómo va todo?",
          "¡Hola! ¿Te ayudo con algo?",
          "¡Hola! ¿Todo bien por allá?",
          "¡Hola! ¿Cómo va todo hoy?",
          "¡Qué tal! ¿Todo en orden?",
          "¡Hola! ¿Cómo te encuentras?",
          "¡Hola! ¿Qué tal todo por ahí?",
          "¡Hola! ¿Qué tal el día?",
          "¡Buenas! ¿En qué puedo ayudarte?",
          "¡Qué pasa! ¿Todo bien por aquí?",
          "¡Hola! ¿Cómo va todo?",
          "¡Hola! ¿Te ayudo con algo más?",
          "¡Hola! ¿Todo bien?",
          "¡Qué tal! ¿Cómo te va?",
          "¡Hola! ¿Todo tranquilo?",
          "¡Hola! ¿Te ayudo con algo?",
          "¡Hola! ¿Cómo estás?"
        ]
      },
      {
        "tag": "consulta_despedida",
        "patterns": [
          "adiós",
          "hasta luego",
          "nos vemos",
          "chao",
          "hasta pronto",
          "me tengo que ir",
          "me despido",
          "hasta la próxima",
          "Adiós",
          "Hasta luego",
          "Nos vemos",
          "Chao",
          "¡Cuídate!",
          "Hasta pronto",
          "Hasta la vista",
          "Nos vemos luego",
          "Adiós, que tengas buen día",
          "¡Nos vemos!",
          "¡Hasta la próxima!",
          "Hasta la próxima vez",
          "¡Que tengas un buen día!",
          "¡Hasta luego, cuídate!",
          "¡Hasta la próxima oportunidad!",
          "Nos vemos en otro momento",
          "¡Adiós! Que te vaya bien",
          "¡Nos vemos pronto, amigo!",
          "¡Quédate bien!",
          "¡Cuídate mucho!",
          "¡Nos vemos! Que te vaya bien",
          "Adiós, ¡que tengas un buen viaje!",
          "Nos vemos más tarde",
          "¡Hasta luego, que descanses!",
          "¡Hasta el próximo encuentro!",
          "¡Nos vemos mañana!",
          "¡Hasta luego, nos vemos pronto!",
          "¡Cuídate mucho, amigo!",
          "¡Hasta pronto, que te vaya bien!",
          "¡Adiós! Te mando un abrazo",
          "¡Nos vemos, cuídate mucho!",
          "¡Hasta pronto, amigo!",
          "¡Nos vemos después!",
          "¡Nos vemos, cuídate!",
          "¡Nos vemos en otra ocasión!",
          "¡Hasta siempre!",
          "¡Quédate bien, adiós!",
          "¡Nos vemos muy pronto!",
          "¡Que tengas buen día!",
          "¡Adiós! Nos vemos pronto",
          "¡Adiós, que todo te salga bien!",
          "Nos vemos luego, cuídate",
          "¡Hasta luego, que todo te vaya bien!",
          "¡Nos vemos pronto, cuídate mucho!",
          "¡Hasta luego, cuídate mucho!",
          "¡Chao, que te vaya bien!",
          "¡Adiós, que descanses!",
          "¡Adiós, que tengas una excelente jornada!",
          "¡Hasta pronto, nos vemos luego!",
          "¡Nos vemos, cuídate!",
          "¡Adiós, que todo te salga excelente!",
          "¡Nos vemos pronto, que te vaya bien!",
          "¡Cuídate mucho!",
          "¡Nos vemos, buen día!",
          "¡Nos vemos pronto, cuídate!",
          "¡Nos vemos, un abrazo!",
          "¡Hasta la próxima! Cuídate",
          "¡Hasta pronto, cuídate mucho!",
          "Nos vemos pronto, adiós",
          "¡Hasta luego! Nos vemos después",
          "¡Cuídate! Hasta luego",
          "Nos vemos más tarde, cuídate",
          "¡Nos vemos, que descanses!",
          "¡Nos vemos pronto, que estés bien!",
          "¡Nos vemos! Cuídate",
          "¡Nos vemos! Te deseo lo mejor",
          "¡Hasta la vista! Nos vemos",
          "¡Hasta pronto, que todo te salga bien!",
          "¡Nos vemos después! Cuídate mucho",
          "¡Hasta pronto, que tengas un gran día!",
          "¡Adiós, que todo te vaya bien!",
          "¡Hasta luego, que todo te salga bien!",
          "¡Nos vemos pronto! Cuídate mucho",
          "¡Nos vemos después de un rato!",
          "¡Nos vemos, hasta pronto!",
          "¡Hasta luego! Te deseo lo mejor",
          "¡Hasta pronto! Cuídate mucho",
          "¡Nos vemos pronto, que estés bien!",
          "¡Hasta luego! Que todo te salga bien",
          "¡Nos vemos pronto! Cuídate",
          "¡Hasta pronto! Nos vemos",
          "Nos vemos pronto, cuídate mucho",
          "¡Hasta pronto! Te mando un abrazo",
          "¡Nos vemos luego!",
          "¡Adiós, que tengas buen día!",
          "¡Hasta luego! Que descanses",
          "¡Nos vemos pronto! Hasta la próxima",
          "¡Hasta luego! Que todo salga bien",
          "¡Nos vemos! Cuídate mucho",
          "¡Hasta la próxima!",
          "¡Nos vemos! Te deseo lo mejor",
          "¡Nos vemos pronto! Cuídate",
          "¡Hasta luego, que te vaya bien!",
          "Nos vemos más tarde, ¡cuídate!",
          "¡Nos vemos después! Que te vaya bien",
          "¡Hasta luego, cuídate mucho!",
          "Nos vemos luego, cuídate mucho",
          "¡Hasta pronto, cuídate!",
          "¡Hasta luego, que todo te salga bien!",
          "¡Nos vemos después! Que te vaya bien",
          "¡Hasta pronto, cuídate mucho!",
          "¡Nos vemos, que descanses!",
          "¡Nos vemos! Cuídate mucho",
          "Nos vemos pronto, ¡cuídate mucho!",
          "¡Hasta luego, que te vaya bien!",
          "¡Hasta la próxima vez!",
          "¡Nos vemos! Que te vaya bien",
          "¡Adiós, que todo te salga bien!",
          "¡Hasta pronto! Nos vemos más tarde",
          "¡Nos vemos pronto, que descanses!",
          "¡Nos vemos después!",
          "Nos vemos, cuídate mucho",
          "¡Nos vemos! Cuídate mucho",
          "¡Hasta luego, que todo te vaya bien!",
          "¡Nos vemos, que descanses!",
          "¡Hasta pronto, nos vemos más tarde!",
          "¡Nos vemos, cuídate mucho!",
          "¡Hasta luego! Que todo te vaya bien",
          "Nos vemos más tarde",
          "¡Nos vemos, que todo salga bien!",
          "¡Hasta luego, nos vemos pronto!",
          "¡Nos vemos, cuídate mucho!",
          "¡Nos vemos más tarde!",
          "¡Nos vemos luego, que descanses!",
          "¡Hasta luego, que descanses!",
          "¡Nos vemos después!",
          "¡Nos vemos pronto! Cuídate",
          "¡Nos vemos, hasta la próxima!",
          "¡Hasta luego, que todo te salga bien!",
          "¡Nos vemos! Que te vaya bien",
          "¡Nos vemos después de un rato!",
          "¡Nos vemos! Cuídate mucho",
          "¡Nos vemos, que todo te salga excelente!",
          "¡Hasta pronto! Nos vemos pronto",
          "¡Nos vemos! Cuídate",
          "Nos vemos más tarde, que todo salga bien",
          "¡Nos vemos! Hasta luego",
          "¡Nos vemos, que todo te vaya bien!",
          "¡Nos vemos pronto, que descanses!",
          "¡Hasta luego, cuídate!",
          "¡Nos vemos después de un rato!",
          "¡Nos vemos, cuídate mucho!",
          "¡Hasta luego, que descanses!",
          "¡Nos vemos después, que te vaya bien!",
          "¡Nos vemos pronto, hasta la próxima!",
          "¡Nos vemos! Cuídate",
          "¡Nos vemos! Te mando un abrazo",
          "¡Nos vemos pronto, que descanses!",
          "¡Nos vemos! Cuídate mucho",
          "¡Nos vemos pronto!"
        ],
        "responses": [
          "¡Hasta luego! Que tengas un excelente día",
          "¡Nos vemos pronto! Cuídate mucho",
          "¡Adiós! Espero verte de nuevo",
          "¡Que te vaya muy bien! Hasta la próxima",
          "¡Cuídate! Aquí estaré cuando me necesites",
          "¡Hasta pronto!",
          "¡Que tengas un buen día!",
          "¡Nos vemos pronto!",
          "¡Cuídate!",
          "¡Hasta luego!",
          "¡Nos vemos!",
          "¡Hasta la próxima!",
          "¡Chao! Cuídate",
          "¡Hasta la vista!",
          "¡Adiós, que tengas buen día!"
        ]
      },
      {
        "tag": "consulta_agradecimiento",
        "patterns": [
          "gracias",
          "muchas gracias",
          "te lo agradezco",
          "grax",
          "mil gracias",
          "muy amable",
          "eres muy amable",
          "aprecio tu ayuda",
          "Gracias",
          "Muchas gracias",
          "Te lo agradezco",
          "Gracias por tu ayuda",
          "Mil gracias",
          "Te agradezco mucho",
          "Te doy las gracias",
          "Muchas gracias por todo",
          "Te estoy muy agradecido",
          "Gracias de todo corazón",
          "Gracias por todo lo que has hecho",
          "Estoy muy agradecido",
          "Te lo agradezco mucho",
          "Gracias por tu tiempo",
          "Agradezco mucho tu ayuda",
          "Te estoy infinitamente agradecido",
          "Te agradezco enormemente",
          "No sé cómo agradecerte",
          "Te agradezco de corazón",
          "Gracias por todo lo que has hecho por mí",
          "Gracias por el apoyo",
          "Gracias por estar ahí",
          "Te doy las gracias por tu ayuda",
          "Gracias por tu paciencia",
          "Gracias por tu generosidad",
          "Te agradezco sinceramente",
          "Te agradezco mucho tu apoyo",
          "Muchísimas gracias",
          "Te agradezco profundamente",
          "Gracias por tu comprensión",
          "Te agradezco que me hayas ayudado",
          "Gracias por todo lo que haces",
          "Te agradezco por ser tan amable",
          "Gracias por tu solidaridad",
          "Gracias por la ayuda brindada",
          "Muchísimas gracias por tu apoyo",
          "Te agradezco que me hayas escuchado",
          "Gracias por ser tan comprensivo",
          "Gracias por el consejo",
          "Gracias por todo tu esfuerzo",
          "Te agradezco mucho por ser tan paciente",
          "Gracias por acompañarme en esto",
          "Te agradezco todo lo que haces",
          "Gracias por tu colaboración",
          "Gracias por tu amabilidad",
          "Te agradezco mucho tu tiempo",
          "Gracias por ofrecerme tu ayuda",
          "Gracias por ser tan generoso",
          "Te doy las gracias por tu apoyo incondicional",
          "Te agradezco por tu sinceridad",
          "Gracias por siempre estar ahí",
          "Muchas gracias por tu esfuerzo",
          "Gracias por tu dedicación",
          "Gracias por tu compromiso",
          "Te agradezco por ser tan atento",
          "Gracias por tu contribución",
          "Gracias por tu entrega",
          "Te agradezco por tu esfuerzo y dedicación",
          "Muchas gracias por todo lo que has hecho por mí",
          "Gracias por tu generosidad y apoyo",
          "Te agradezco por confiar en mí",
          "Te agradezco de todo corazón por tu ayuda",
          "Gracias por ser tan amable y considerado",
          "Te agradezco por tu compasión",
          "Gracias por tu tiempo y paciencia",
          "Gracias por todo lo que me has enseñado",
          "Te doy las gracias por estar a mi lado",
          "Gracias por tu trabajo y esfuerzo",
          "Te agradezco profundamente por todo lo que has hecho",
          "Te agradezco por estar siempre dispuesto a ayudar",
          "Gracias por tu orientación",
          "Gracias por tu amabilidad y paciencia",
          "Te agradezco mucho por tu apoyo constante",
          "Te agradezco por tu ayuda incansable",
          "Gracias por tu comprensión y paciencia",
          "Te agradezco por tu apoyo durante este tiempo",
          "Gracias por estar ahí cuando más te necesité",
          "Gracias por todo lo que has hecho por mí",
          "Te agradezco por no rendirte conmigo",
          "Gracias por todo tu esfuerzo y dedicación",
          "Te agradezco de todo corazón por estar a mi lado",
          "Gracias por ayudarme a mejorar",
          "Te agradezco por tu apoyo constante y sincero",
          "Gracias por darme la oportunidad de aprender",
          "Te agradezco mucho por tu comprensión",
          "Gracias por tu atención",
          "Te agradezco por tu tiempo y paciencia",
          "Gracias por ser tan generoso conmigo",
          "Te agradezco por todo lo que has hecho por nosotros",
          "Gracias por apoyarme en todo momento",
          "Te agradezco mucho por tu ayuda",
          "Gracias por tus sabias palabras",
          "Te agradezco por tu compañía",
          "Gracias por darme tu tiempo",
          "Te agradezco por tu disposición",
          "Gracias por siempre estar ahí para mí",
          "Te agradezco mucho por todo lo que has hecho",
          "Te doy las gracias por ser tan comprensivo",
          "Gracias por tu amabilidad y paciencia",
          "Te agradezco por ser tan generoso con tu tiempo",
          "Te agradezco por tu apoyo constante",
          "Gracias por hacer esto posible",
          "Te agradezco mucho por el esfuerzo",
          "Gracias por tu compromiso y dedicación",
          "Te agradezco por tu trabajo",
          "Te agradezco de corazón por tu apoyo",
          "Gracias por tu tiempo y esfuerzo",
          "Te agradezco mucho por todo",
          "Gracias por hacer todo esto por mí",
          "Gracias por tu buen corazón",
          "Te agradezco por todo lo que has hecho por nosotros",
          "Te doy las gracias por ser tan solidario",
          "Gracias por tu generosidad y apoyo",
          "Te agradezco por ser tan considerado",
          "Gracias por todo lo que me has enseñado",
          "Te agradezco por tu amabilidad y por todo lo que haces",
          "Te agradezco mucho por estar aquí",
          "Gracias por tu paciencia y apoyo",
          "Te agradezco mucho por todo lo que me has brindado",
          "Gracias por tu dedicación y esfuerzo",
          "Te agradezco por ser tan constante",
          "Gracias por darme tu ayuda en todo momento",
          "Te agradezco por todo lo que has aportado",
          "Gracias por tu apoyo continuo",
          "Te agradezco mucho por lo que haces por mí",
          "Te agradezco sinceramente por tu dedicación",
          "Gracias por tu apoyo incondicional",
          "Te agradezco por compartir tu tiempo",
          "Gracias por tu comprensión y apoyo",
          "Te agradezco por cada paso que has dado por mí",
          "Te agradezco profundamente por todo tu esfuerzo",
          "Gracias por todo lo que haces para que las cosas salgan bien",
          "Te agradezco de corazón",
          "Te agradezco mucho por tu tiempo y por ser tan generoso",
          "Gracias por tu generosidad y paciencia",
          "Te agradezco por no rendirte",
          "Gracias por ser tan generoso",
          "Te agradezco por ser tan amable",
          "Gracias por todo el esfuerzo que has puesto",
          "Te agradezco por tus sabias palabras",
          "Gracias por tu amor y apoyo",
          "Te agradezco por cada oportunidad",
          "Gracias por ser un gran apoyo para mí",
          "Te agradezco mucho por todo",
          "Gracias por ser tan atento",
          "Te agradezco por ser tan comprensivo",
          "Gracias por darme tu apoyo",
          "Te agradezco por ser tan dedicado",
          "Gracias por tu confianza y apoyo",
          "Te agradezco por siempre estar disponible",
          "Gracias por tu amistad",
          "Te agradezco por ser mi mentor",
          "Gracias por ayudarme a crecer",
          "Te agradezco por tu ayuda sincera",
          "Gracias por estar siempre dispuesto a ayudar",
          "Te agradezco por tu apoyo moral",
          "Gracias por tu esfuerzo",
          "Te agradezco por ayudarme en todo",
          "Gracias por tu disposición",
          "Te agradezco por tus buenos consejos",
          "Gracias por estar a mi lado siempre",
          "Te agradezco por tu bondad",
          "Gracias por darme la oportunidad de aprender",
          "Te agradezco mucho por todo tu trabajo",
          "Gracias por compartir tu tiempo conmigo",
          "Te agradezco por tu actitud positiva",
          "Gracias por estar siempre ahí para apoyarme",
          "Te agradezco mucho por ser tan amable",
          "Gracias por todo lo que haces por mí y por otros",
          "Te agradezco por tu apoyo sin igual",
          "Gracias por brindarme tu ayuda incondicional",
          "Te agradezco por compartir tus conocimientos",
          "Gracias por tu apoyo emocional",
          "Te agradezco por estar disponible cuando te necesité",
          "Gracias por tu sinceridad",
          "Te agradezco por darme el tiempo que necesitaba",
          "Gracias por el cariño",
          "Te agradezco por tu empatía",
          "Gracias por tu buen juicio",
          "Te agradezco por tu paciencia y por siempre estar disponible",
          "Gracias por ser siempre tan confiable",
          "Te agradezco por ser una fuente constante de apoyo"
        ],
        "responses": [
          "¡De nada! Estoy para ayudar",
          "Me alegra poder ayudarte",
          "No hay de qué, siempre es un placer",
          "¡Es un gusto poder ayudar!",
          "No hay nada que agradecer",
          "¡Con gusto!",
          "¡De nada!",
          "¡Es un placer ayudarte!",
          "¡Encantado de poder ayudarte!",
          "¡Es un placer!",
          "¡Con mucho gusto!",
          "¡De nada! ¡Siempre estoy aquí para ayudar!",
          "¡Me alegra haber podido ayudarte!",
          "¡Con mucho gusto! Cualquier otra cosa, no dudes en preguntar."
        ]
      },
      {
        "tag": "consulta_saludorespuesta",
        "patterns": [
          "bien  y tu ?",
          "todo bien y tu",
          "muy bien y tu ?",
          "bien y tu que tal",
          "todo bien y tu ?",
          "muy bien y tu",
          "bien y tu ?",
          "todo bien y tu que tal",
          "muy bien y tu que tal"
        ],
        "responses": [
          "Todo bien, gracias por preguntar. ¿En qué puedo ayudarte?",
          "Muy bien, gracias. ¿En qué puedo ayudarte?",
          "Todo bien, ¿en qué puedo ayudarte?",
          "Muy bien, ¿en qué puedo ayudarte?",
          "Todo bien, gracias. ¿En qué puedo ayudarte?",
          "Muy bien, gracias. ¿En qué puedo ayudarte?",
          "Todo bien, ¿en qué puedo ayudarte?",
          "Muy bien, ¿en qué puedo ayudarte?",
          "Todo bien, gracias. ¿En qué puedo ayudarte?"
        ]
      },
      {
        "tag": "consulta_feedback",
        "patterns": [
          "Me gusta",
          "No me gusta",
          "Buen trabajo",
          "Excelente",
          "No fue útil",
          "No me gustó",
          "Fue muy útil",
          "Gracias, me ayudaste mucho",
          "Excelente respuesta",
          "Me encantó",
          "Muy bien",
          "Muy útil",
          "No estuvo mal",
          "Me ayudaste bastante",
          "Fue todo claro",
          "La respuesta no fue útil",
          "Gracias por la ayuda",
          "¿Me puedes ayudar mejor?",
          "Fue una respuesta correcta",
          "Muy bueno",
          "Me gustó mucho",
          "No fue lo que esperaba",
          "Muy útil la información",
          "No me sirvió",
          "No pude entender la respuesta",
          "Muy mala respuesta",
          "La respuesta fue buena",
          "No resolvieron mi duda",
          "La respuesta fue útil",
          "Me siento satisfecho con la respuesta",
          "No me convence la respuesta",
          "¿Podrías mejorar esto?",
          "Muy clara la respuesta",
          "Gracias, fue útil",
          "Eso fue muy útil",
          "No sé si me ayudó mucho",
          "No fue lo que esperaba",
          "La respuesta fue poco clara",
          "Fue muy rápida la respuesta",
          "No me ayudaste en lo que esperaba",
          "¿Puedes explicar un poco más?",
          "No estoy seguro de la respuesta",
          "Me confundí con la respuesta",
          "Me quedé con más dudas",
          "Lo explicaste bien, gracias",
          "¿Podrías darme más detalles?",
          "Gracias, pero no estoy completamente seguro",
          "Excelente explicación",
          "Gracias por tu ayuda, aunque no era lo que esperaba",
          "No fue tan útil como pensé",
          "Buen intento, pero no fue suficiente",
          "Gracias por intentar",
          "Me ayudaste, pero podría ser mejor",
          "Me agradó la respuesta",
          "No entendí la respuesta",
          "Buen servicio, pero puede mejorar",
          "Muy bien explicado",
          "Excelente, pero faltó algo",
          "La respuesta fue a medias",
          "Me gusta cómo explicas",
          "No entendí bien la solución",
          "Fue más o menos útil",
          "No fue suficiente la información",
          "Excelente, pero necesito más detalles",
          "No era exactamente lo que buscaba",
          "Estuvo bien, pero puedo buscar más",
          "Muy útil, gracias",
          "No estaba tan claro",
          "Fue claro, gracias",
          "Gracias, aunque no todo fue claro",
          "Buen trabajo, pero puedo necesitar más detalles",
          "Fue genial, pero puedes dar más información",
          "Sigo con dudas, pero estuvo bien",
          "No estaba seguro de lo que dijiste",
          "La respuesta fue muy general",
          "Eso me ayuda, pero quiero saber más",
          "La respuesta fue un poco vaga",
          "No está claro lo que dijiste",
          "Lo que dijiste fue bueno, pero quiero más detalles",
          "Me siento confundido por la respuesta",
          "Muy bueno, pero mejor si me das más ejemplos",
          "Bien, pero puedes mejorar la explicación",
          "Lo que me dijiste está claro",
          "Me ayudó un poco",
          "Fue una buena explicación",
          "No era exactamente lo que necesitaba",
          "Me diste una buena respuesta, pero no era mi pregunta",
          "¿Podrías ser más específico?",
          "La respuesta fue buena, pero no tan clara",
          "Lo entendí, pero quiero más detalles",
          "Lo que dijiste me sirvió mucho",
          "Me ayudaste, pero necesito más ejemplos",
          "La respuesta fue un poco confusa",
          "Gracias, pero necesito más información",
          "No fue lo que esperaba",
          "Gracias, fue claro y útil",
          "¿Podrías darme más detalles?",
          "Me gustaría una explicación más profunda",
          "Gracias, pero no me convence del todo",
          "Te agradezco, pero tengo más dudas",
          "La respuesta fue un poco difícil de entender",
          "Gracias, la respuesta fue directa",
          "Eso estuvo bien, pero necesito más",
          "Estuvo claro, pero quiero más ejemplos",
          "Gracias, pero quiero saber más",
          "Muy buena la explicación",
          "La respuesta estuvo bien",
          "No me diste todo lo que quería",
          "Eso no era lo que esperaba",
          "Podrías ser más claro",
          "Gracias por la ayuda, aunque necesito más detalles",
          "¿Podrías hacer la respuesta más detallada?",
          "Fue útil, pero quiero más información",
          "Estoy satisfecho, aunque hay áreas de mejora",
          "Gracias, aunque necesito más detalles",
          "No me convenció del todo",
          "Tu respuesta fue adecuada, pero podría mejorar",
          "Lo que dijiste fue útil, pero no lo entendí completamente",
          "La información fue adecuada, pero necesito más",
          "Estoy de acuerdo con lo que me dijiste",
          "¿Puedes ser más claro con la respuesta?",
          "Gracias por la respuesta, aunque no era exactamente lo que quería",
          "La respuesta fue útil, pero no completa",
          "Eso me ayuda, pero no resuelve todo",
          "Excelente respuesta, pero quiero saber más",
          "Buen trabajo, pero aún tengo dudas",
          "La respuesta fue muy buena",
          "Gracias, me resolviste la mitad de la duda",
          "Bien hecho, pero quiero más ejemplos",
          "La explicación estuvo bien",
          "Excelente, pero me gustaría más detalles",
          "Buen intento, pero me quedó una duda",
          "Gracias, eso lo solucionó, pero ¿puedes aclarar algo más?",
          "Tu explicación fue clara",
          "Gracias, fue útil, pero aún tengo dudas",
          "Estuvo claro, pero necesito ejemplos prácticos",
          "Gracias, pero necesito más detalles",
          "Fue bastante útil",
          "Gracias, pero me gustaría más información",
          "Estuvo bien, pero no era lo que esperaba",
          "La información estuvo buena, pero quiero más detalles",
          "Gracias, pero no era lo que buscaba",
          "Gracias, pero tengo más preguntas",
          "Lo explicaste bien, pero quiero saber más",
          "Estuvo bien, pero falta información",
          "Gracias por la respuesta, pero tengo dudas",
          "Fue útil, pero quiero que lo expliques más",
          "Me quedé con más dudas, pero gracias",
          "Eso estuvo bien, pero me gustaría más detalles",
          "Gracias por la respuesta clara",
          "Fue una buena respuesta, pero necesito más ejemplos",
          "Gracias, fue lo que necesitaba",
          "Estuvo bien, pero aún tengo más preguntas",
          "La respuesta fue clara, gracias",
          "No fue lo que pensaba, pero estuvo bien",
          "Gracias, pero quiero más ejemplos",
          "Eso estuvo muy claro, gracias",
          "Me ayudaste, pero necesito más detalles",
          "Fue útil, pero quiero más ejemplos",
          "Me ayudaste, pero no resolví mi duda",
          "Fue una respuesta útil",
          "Gracias, pero quiero más detalles",
          "Lo entendí, pero quiero ejemplos",
          "La respuesta fue precisa, pero quiero más detalles",
          "Fue suficiente, gracias",
          "Gracias por la ayuda, pero no era lo que buscaba",
          "No era exactamente lo que pensaba",
          "Lo explicaste bien, pero quiero más detalles",
          "No estoy completamente satisfecho",
          "Gracias por la respuesta, pero tengo dudas",
          "La información fue útil, pero no suficiente",
          "La respuesta fue adecuada, pero necesito más ejemplos",
          "Me ayudaste, pero me gustaría más detalles",
          "Eso fue útil, pero no completo",
          "La respuesta fue buena",
          "Eso estuvo bien, pero quiero más ejemplos prácticos",
          "Me diste una buena respuesta, pero quiero saber más",
          "Fue útil, pero quiero ejemplos",
          "Estuvo bien, pero falta algo"
        ],
        "responses": [
          "Gracias por tu feedback, lo tomaré en cuenta",
          "Agradezco tu comentario, haré mi mejor esfuerzo para mejorar",
          "Gracias, me alegra que te haya servido",
          "Gracias por tus comentarios, los tomaré en cuenta",
          "Gracias, intentaré mejorar mi respuesta",
          "Te agradezco mucho tu opinión",
          "Gracias, seguiré trabajando en ello",
          "Gracias por tu retroalimentación, la tendré en cuenta",
          "Te agradezco el feedback",
          "Gracias, me alegra saber que fue útil",
          "Aprecio tus comentarios",
          "Gracias, trataré de hacer mejor la próxima vez",
          "Gracias, espero poder seguir ayudándote",
          "Gracias, tomaré tu comentario en cuenta",
          "Me alegra que haya sido útil, gracias",
          "Gracias por decirlo, ¡seguiré mejorando!",
          "Gracias por la sugerencia, la tomaré en cuenta",
          "Te agradezco por compartir tu opinión",
          "Gracias, lo seguiré mejorando",
          "Gracias, lo tendré en cuenta para futuras respuestas",
          "Gracias, espero poder ofrecerte una mejor ayuda la próxima vez",
          "Gracias por la sugerencia",
          "Aprecio que lo hayas dicho, trataré de mejorar",
          "Gracias por tus palabras, seguiré trabajando para darte mejores respuestas",
          "Gracias, espero que la próxima vez sea aún más útil",
          "Agradezco tus comentarios, ¡seguiré trabajando en ello!",
          "Gracias por la retroalimentación, me esforzaré más",
          "Aprecio tu opinión, la tomaré en cuenta para mejorar",
          "Gracias, voy a seguir mejorando",
          "Gracias, tomaré tu opinión en cuenta",
          "Agradezco tus comentarios, ¡mejoraré en la siguiente!",
          "Te agradezco el tiempo para darme tu opinión",
          "Gracias por comentar, ¡mejoraré aún más!"
        ]
      },
      {
        "tag": "consulta_chistes",
        "patterns": [
          "cuéntame un chiste",
          "dime algo gracioso",
          "sabes algún chiste",
          "hazme reír",
          "cuéntame algo divertido",
          "dime un chiste",
          "¿Sabes alguna adivinanza?",
          "Dime una adivinanza difícil",
          "Tengo curiosidad por escuchar una broma",
          "Cuéntame un chiste de animales",
          "¿Conoces algún chiste de niños?",
          "¿Tienes alguna adivinanza para mí?",
          "Hazme una broma",
          "Cuéntame una historia divertida",
          "¿Puedes contarme una adivinanza fácil?",
          "¿Qué tal un chiste de humor negro?",
          "Quiero escuchar algo gracioso",
          "¿Tienes un chiste para hoy?",
          "Dime un chiste divertido",
          "Cuéntame algo para reírme",
          "¿Sabes algún chiste de matemáticas?",
          "Cuéntame una adivinanza clásica",
          "¿Tienes alguna broma para alegrarme?",
          "¿Conoces chistes de la oficina?",
          "Hazme pensar con una adivinanza",
          "¿Puedes contarme un chiste de animales?",
          "Cuéntame un chiste corto y divertido",
          "Quiero escuchar un chiste de comida",
          "¿Sabes algún chiste sobre la escuela?",
          "Cuéntame una adivinanza de navidad",
          "¿Puedes contarme un chiste para niños?",
          "Dime un chiste sobre el trabajo",
          "Cuéntame un chiste de médicos",
          "¿Tienes un chiste sobre tecnología?",
          "Hazme reír con una adivinanza",
          "¿Tienes alguna broma de amigos?",
          "¿Me cuentas un chiste sobre profesores?",
          "¿Sabes alguna adivinanza de animales?",
          "Cuéntame un chiste de deportes",
          "Cuéntame una broma sobre el trabajo",
          "Hazme pensar con una adivinanza difícil",
          "¿Tienes alguna broma para contarme?",
          "Cuéntame un chiste para adultos",
          "¿Me cuentas una adivinanza divertida?",
          "Hazme reír con un chiste corto",
          "Cuéntame una adivinanza graciosa",
          "¿Tienes un chiste de navidad?",
          "Dime una broma ligera",
          "Cuéntame una broma de fiesta",
          "Dime un chiste de frutas",
          "Cuéntame una broma nueva",
          "¿Tienes una adivinanza graciosa?",
          "¿Sabes algún chiste de tecnología?",
          "Cuéntame un chiste de animales graciosos",
          "¿Conoces una adivinanza divertida?",
          "Quiero reír, ¿tienes un chiste?",
          "Dime una adivinanza con truco",
          "Cuéntame algo para reírme un rato",
          "Hazme reír con un chiste inteligente",
          "¿Tienes algún chiste malo pero gracioso?",
          "Dime una adivinanza que me sorprenda",
          "Cuéntame una broma tonta",
          "¿Sabes alguna adivinanza sobre comida?",
          "Dime un chiste corto y malo",
          "Cuéntame una broma para niños",
          "¿Conoces una adivinanza de lógica?",
          "Hazme pensar con una adivinanza original",
          "¿Tienes un chiste para romper el hielo?",
          "Cuéntame una historia breve y graciosa",
          "Dime un chiste de deportes",
          "¿Conoces una adivinanza sobre la naturaleza?",
          "Dime un chiste sobre científicos",
          "Cuéntame una adivinanza complicada",
          "Hazme una broma que me haga reír mucho",
          "Dime un chiste sobre la oficina",
          "¿Sabes una adivinanza para niños pequeños?",
          "Cuéntame un chiste de animales tontos",
          "Dime algo gracioso sobre comida",
          "¿Conoces un chiste sobre inventos?",
          "Dime un chiste de ingenieros",
          "Cuéntame una adivinanza sobre animales",
          "¿Sabes algún chiste corto pero gracioso?",
          "Dime una broma sobre matemáticas",
          "Hazme reír con algo inesperado",
          "Cuéntame un chiste de cumpleaños",
          "¿Tienes una adivinanza sobre objetos cotidianos?",
          "Dime un chiste clásico",
          "¿Sabes alguna adivinanza sobre el clima?",
          "Cuéntame algo divertido sobre deportes",
          "Hazme reír con un chiste de cocina",
          "¿Tienes un chiste para niños?",
          "Cuéntame una adivinanza que sea difícil",
          "Dime una broma de amigos",
          "¿Sabes un chiste sobre médicos?",
          "Dime una adivinanza para pensar",
          "Cuéntame un chiste de viajes",
          "¿Conoces algún chiste sobre animales raros?",
          "Dime una broma sobre la escuela",
          "Hazme una pregunta divertida",
          "Cuéntame un chiste sobre profesiones",
          "¿Sabes alguna adivinanza de lógica divertida?",
          "Dime un chiste que implique comida",
          "Cuéntame algo gracioso sobre la oficina",
          "Hazme reír con algo inesperado",
          "¿Conoces una adivinanza sobre cosas misteriosas?",
          "Dime un chiste relacionado con la naturaleza",
          "Cuéntame una adivinanza sobre el espacio",
          "Hazme una broma sobre la tecnología",
          "Dime un chiste sobre cosas de casa"
        ],
        "responses": [
          "¿Qué le dice un jaguar a otro jaguar? Jaguar you",
          "¿Por qué las focas del circo miran siempre hacia arriba? Porque es donde están los focos",
          "¿Qué le dice una iguana a su hermana gemela? Somos iguanitas",
          "¿Por qué los pájaros no usan Facebook? Porque ya tienen Twitter",
          "¿Qué hace un perro con un taladro? Taladrando",
          "¿Por qué los programadores prefieren las noches oscuras? Porque los errores se ven mejor en modo oscuro.",
          "¿Qué le dice un bit al otro? ¡No te pongas a cero conmigo!",
          "¿Qué hace un astronauta después de comer? Va al espacio digestivo.",
          "¿Por qué el libro de matemáticas estaba triste? Porque tenía demasiados problemas.",
          "¿Cuál es el animal más antiguo? La cebra, porque está en blanco y negro.",
          "¿Por qué el pavo no puede jugar al fútbol? Porque siempre está en el banquillo.",
          "¿Qué le dice un gusano a otro gusano? ¡Voy a dar una vuelta a la manzana!",
          "¿Qué hace una abeja en el gimnasio? ¡Zum-ba!",
          "¿Por qué el elefante no usa ordenador? Porque le tiene miedo al ratón.",
          "¿Cuál es el colmo de un electricista? No encontrar su corriente de trabajo.",
          "¿Por qué los pájaros no usan Facebook? Porque ya tienen Twitter.",
          "¿Cómo se llama un boomerang que no vuelve? Un palo.",
          "¿Por qué los libros de historia son tan pesados? Porque están llenos de pasado.",
          "¿Qué le dice una impresora a otra? Esa página es mía.",
          "¿Cómo se llama un perro sin patas? No importa cómo lo llames, no va a venir.",
          "¿Por qué los peces no usan Facebook? Porque ya están en redes.",
          "¿Sabes cuál es la fruta más divertida? La naranja, porque siempre te hace sonreír.",
          "¿Qué hace un perro con un taladro? Taladrando.",
          "¿Cómo se llama un ratón que se convierte en estrella de rock? ¡Mick Ratson!",
          "¿Por qué las vacas no usan celulares? Porque ya tienen vaca-lidad.",
          "¿Sabes cuál es el colmo de un panadero? No tener masa.",
          "¿Cómo se llama un dinosaurio con un gran vocabulario? Un Thesaurus.",
          "¿Qué le dice una iguana a su hermana gemela? Somos iguanitas.",
          "¿Sabes cuál es el colmo de un jardinero? No saber dónde está la raíz del problema.",
          "¿Cuál es el café más peligroso? El ex-preso.",
          "¿Sabes cuál es el animal más inteligente? El delfín, porque siempre está en busca de respuestas.",
          "Adivina, adivinanza: Soy ligero como una pluma, pero ni el hombre más fuerte me puede sostener por mucho tiempo. ¿Qué soy?",
          "Tengo una adivinanza: Cuanto más le quitas, más grande se vuelve. ¿Qué es?",
          "Soy pequeño, redondo y no me gusta que me aplasten. ¿Qué soy?",
          "Adivina: Es tan alto como una casa, pero es tan ligero como una pluma. ¿Qué es?",
          "Tengo agujas pero no sé coser. ¿Qué soy?",
          "Soy invisible, pero me puedes sentir. No tengo forma, pero siempre estoy presente. ¿Qué soy?",
          "Adivina: ¿Qué tiene cabeza, pero no cuerpo?",
          "Adivina: Soy el principio de todo, pero nunca me verás. ¿Quién soy?",
          "Adivina: Tiene dientes pero nunca muerde. ¿Qué es?",
          "Soy pequeño, blanco y escurridizo. ¿Qué soy?",
          "Adivina: Es tuyo, pero lo usan más los demás que tú. ¿Qué es?",
          "Adivina: Tiene hojas pero no es un árbol. ¿Qué es?",
          "¿Por qué los zombis no comen carne vegetariana? Porque no pueden resistirse a la carne humana.",
          "Adivina: Tiene llaves pero no puede abrir puertas. ¿Qué es?",
          "¿Qué le dijo el uno al diez? Para ser como yo, tenés que ser sincero.",
          "Adivina: ¿Cuál es el colmo de un cartero? No tener buenas cartas.",
          "Adivina: ¿Quién tiene la clave para todo pero nunca se deja ver?",
          "Adivina: Si soy el rey de la selva, ¿qué soy?",
          "Soy algo que cuando lo compartes, lo tienes más. ¿Qué soy?",
          "Soy una caja, pero no guardo cosas. ¿Qué soy?",
          "Adivina: Tiene muchas partes pero no se puede mover. ¿Qué es?",
          "Adivina: Puede ir a todas partes, pero nunca se mueve. ¿Qué es?",
          "Soy una llave que no abre puertas. ¿Qué soy?",
          "Soy algo que no puedes ver pero te hace sentir. ¿Qué soy?",
          "Adivina: ¿Qué tiene cara pero no ojos?",
          "Soy algo que siempre cambia de forma pero no se mueve. ¿Qué soy?",
          "Tengo muchos dientes pero no muerdo. ¿Qué soy?",
          "¿Por qué las uvas nunca pelean? Porque siempre están en racimos.",
          "¿Qué hace un plátano en el gimnasio? ¡Se pone en forma!",
          "¿Por qué el ordenador fue al doctor? Porque tenía un virus.",
          "¿Qué le dijo la vaca al grillo? ¡Mu-ción!",
          "¿Cuál es el colmo de un caracol? Llegar tarde a su propia fiesta.",
          "Adivina: ¿Qué sube pero nunca baja? Tu edad.",
          "¿Por qué las escobas son buenas amigas? Porque siempre te barren los problemas.",
          "¿Qué le dice un tornillo a otro? ¡No me saques de mis casillas!",
          "¿Por qué el tomate no se ríe? Porque está en salsa.",
          "¿Qué hace un científico en la playa? ¡Experimenta con las olas!",
          "¿Por qué los relojes son tan puntuales? Porque siempre tienen tiempo.",
          "Adivina: ¿Qué es algo que camina pero no tiene piernas? Una sombra.",
          "¿Qué hace una silla hablando en público? ¡Da una conferencia!",
          "¿Por qué los árboles no usan sombreros? Porque tienen ramas para protegerse.",
          "¿Qué pasa si mezclas un científico y un comediante? ¡Un experimento hilarante!",
          "Adivina: Tengo ojos pero no veo, ¿qué soy? Una aguja.",
          "¿Qué hace un cocodrilo leyendo un libro? ¡Devora la historia!",
          "¿Por qué los atletas siempre están felices? Porque llevan una buena racha.",
          "Adivina: ¿Qué puedes atrapar pero nunca lanzar? Un resfriado.",
          "¿Qué le dice el pasto al jardinero? ¡Córtame con estilo!",
          "¿Por qué los músicos son buenos adivinadores? Porque siempre afinan.",
          "Adivina: Tiene patas pero no corre, ¿qué es? Una mesa.",
          "¿Por qué las estrellas no cuentan secretos? Porque siempre brillan.",
          "¿Qué hace un helado en una fiesta? ¡Se derrite de la emoción!",
          "Adivina: ¿Qué tiene dientes pero no come? Un peine.",
          "¿Qué hace un teléfono feliz? Tener buena cobertura.",
          "¿Por qué las computadoras no sueñan? Porque solo procesan datos.",
          "¿Qué hace una naranja cuando tiene calor? ¡Se exprime!",
          "¿Por qué las abejas siempre están ocupadas? Porque trabajan con miel.",
          "Adivina: ¿Qué tiene un ojo pero no ve? Una aguja.",
          "¿Por qué el libro de geometría siempre está feliz? ¡Porque tiene muchos ángulos positivos!",
          "¿Qué le dijo un perro a otro? ¡Guau, qué día!",
          "¿Por qué los números siempre tienen frío? Porque están en la recta.",
          "¿Qué le dijo un volcán a otro? ¡Te amo lava vez!",
          "¿Por qué el pan fue al médico? Porque se sentía desmigajado.",
          "Adivina: Tiene alas pero no vuela, ¿qué es? Un ventilador.",
          "¿Qué hace un pájaro cuando tiene miedo? ¡Pide auxilio a la red!",
          "¿Por qué los astronautas son malos para contar chistes? Porque siempre necesitan espacio.",
          "¿Qué hace un pez en la biblioteca? Nada.",
          "¿Por qué las bicicletas no pueden mantenerse de pie? ¡Porque están cansadas!",
          "¿Qué le dijo la computadora al teclado? ¡No me presiones tanto!",
          "¿Qué tiene plumas y escribe? ¡Un bolígrafo-pájaro!",
          "¿Por qué el melón se casó con la sandía? ¡Porque hicieron una gran pareja!",
          "Adivina: Tengo hojas pero no soy árbol, ¿qué soy? Un libro.",
          "¿Por qué los estudiantes aman los semáforos? Porque les dicen cuándo parar.",
          "¿Qué hace un pollo con una cámara? ¡Saca fotos de huevos-traordinarias!",
          "¿Por qué los relojes son tan sabios? Porque siempre tienen una buena hora.",
          "¿Qué dijo el lápiz al papel? ¡Estoy a tu servicio!",
          "Adivina: Soy algo que nunca se queda quieto y siempre está cambiando, ¿qué soy? El tiempo.",
          "¿Por qué las cebras no usan pijamas? Porque ya tienen rayas.",
          "¿Qué hace un tomate en una carrera? ¡Ketchup!",
          "¿Por qué el científico cruzó la calle? ¡Para encontrar otra hipótesis!",
          "¿Qué le dice el horno al pastel? ¡Estás en tu punto!",
          "¿Por qué los elefantes nunca olvidan? Porque tienen una memoria elefantástica.",
          "Adivina: Es redondo y a veces plano, pero siempre ilumina el cielo. ¿Qué es? La luna.",
          "¿Qué hace un cocodrilo con un auto? ¡Lo convierte en un descapotable!",
          "¿Por qué las ovejas no envían correos electrónicos? ¡Prefieren mensajes de lana!",
          "¿Qué hace una nube en la fiesta? ¡Trae rayos y truenos de emoción!",
          "¿Por qué los pingüinos nunca se pierden? ¡Porque siempre tienen frío polar!",
          "¿Qué hace una zanahoria en el concierto? ¡Raíces musicales!"
        ]
      },
      {
        "tag": "consulta_frases",
        "patterns": [
          "dime una frase inspiradora",
          "frase",
          "alguna frase",
          "dame alguna frase",
          "necesito motivación",
          "una frase para reflexionar",
          "dime algo inspirador",
          "una frase motivacional",
          "Dame una frase inspiradora",
          "¿Tienes alguna frase motivacional?",
          "Cuéntame una frase que me inspire",
          "Quiero leer una frase que me motive",
          "¿Tienes alguna frase de superación personal?",
          "Dame una frase que me haga pensar",
          "Quiero una frase positiva",
          "Cuéntame algo que me dé esperanza",
          "¿Sabes alguna frase sobre el éxito?",
          "¿Puedes darme una frase que me inspire a seguir adelante?",
          "Dime una frase sobre la vida",
          "¿Tienes alguna frase que me ayude a ser más fuerte?",
          "Dame una frase que me haga sentir mejor",
          "¿Tienes una frase sobre la perseverancia?",
          "Cuéntame una frase que me motive a mejorar",
          "Quiero una frase de ánimo",
          "Dame una frase que me impulse a no rendirme",
          "¿Puedes darme una frase sobre el esfuerzo?",
          "Quiero escuchar una frase sobre el trabajo duro",
          "¿Sabes alguna frase que hable sobre la valentía?",
          "Cuéntame una frase sobre el coraje",
          "¿Tienes alguna frase sobre el cambio?",
          "Dame una frase de alguien famoso",
          "¿Puedes decirme una frase sobre la esperanza?",
          "Quiero leer una frase sobre el futuro",
          "¿Tienes alguna frase sobre la confianza?",
          "Dame una frase sobre la resiliencia",
          "¿Me puedes dar una frase sobre la motivación diaria?",
          "Quiero una frase sobre la vida y el amor",
          "Cuéntame una frase sobre la fortaleza",
          "Dame una frase que me ayude a seguir adelante",
          "¿Tienes alguna frase que inspire paz?",
          "Quiero una frase sobre el optimismo",
          "¿Sabes alguna frase sobre el éxito personal?",
          "Dame una frase que me haga reflexionar",
          "¿Puedes darme una frase que me inspire a ser mejor?",
          "Quiero escuchar una frase sobre la superación",
          "Dime una frase que me dé energía",
          "¿Tienes una frase sobre el crecimiento personal?",
          "Dame una frase sobre aprender de los errores",
          "Quiero una frase sobre alcanzar metas",
          "¿Sabes alguna frase sobre la paciencia?",
          "Dame una frase que me ayude a encontrar la paz interior",
          "Cuéntame una frase sobre la felicidad",
          "Dame una frase que me haga sentir inspirado",
          "¿Tienes una frase que hable sobre el valor de seguir luchando?"
        ],
        "responses": [
          "La vida no se mide por las veces que respiramos, sino por los momentos que nos dejan sin aliento. George Carlin",
          "No te rindas, cada fracaso es una lección para llegar al éxito.  Albert Einstein",
          "Lo único imposible es aquello que no intentas.  Jeanette Coron",
          "La felicidad no es algo hecho. Viene de tus propias acciones.  Dalai Lama",
          "El futuro pertenece a aquellos que creen en la belleza de sus sueños.  Eleanor Roosevelt",
          "Lo que no te mata te hace más fuerte. Friedrich Nietzsche",
          "Haz hoy lo que otros no quieren hacer, haz mañana lo que otros no pueden hacer.  Jerry Rice",
          "El único modo de hacer un gran trabajo es amar lo que haces.  Steve Jobs",
          "El éxito es la suma de pequeños esfuerzos repetidos día tras día.  Robert Collier",
          "No importa cuántas veces caigas, lo importante es cuántas veces te levantas.  Nelson Mandela",
          "El único lugar donde el éxito viene antes que el trabajo es en el diccionario.  Vidal Sassoon",
          "Sé el cambio que deseas ver en el mundo.  Mahatma Gandhi",
          "Si puedes soñarlo, puedes hacerlo.  Walt Disney",
          "La mejor forma de predecir el futuro es crearlo.  Abraham Lincoln",
          "No hay camino hacia la felicidad, la felicidad es el camino.  Buddha",
          "La perseverancia es la clave del éxito.  Charlie Chaplin",
          "Cuando una puerta se cierra, otra se abre.  Alexander Graham Bell",
          "Todo lo que puedas imaginar es real.  Pablo Picasso",
          "El único modo de hacer un gran trabajo es amar lo que haces.  Steve Jobs",
          "El dolor es temporal, la gloria es para siempre. Lance Armstrong",
          "La vida es como andar en bicicleta. Para mantener el equilibrio, debes seguir adelante.  Albert Einstein",
          "Nuestro mayor miedo no es que seamos inadecuados, nuestro mayor miedo es que somos poderosos más allá de toda medida. Marianne Williamson",
          "El hombre que mueve montañas comienza cargando pequeñas piedras.  Confucio",
          "Es durante nuestros momentos más oscuros cuando debemos enfocarnos para ver la luz.  Aristóteles",
          "La clave del éxito es comenzar antes de estar listo.  Marie Forleo",
          "La mejor manera de predecir tu futuro es crearlo.  Abraham Lincoln",
          "La vida es 10% lo que nos sucede y 90% cómo reaccionamos ante ello.  Charles R. Swindoll",
          "El mayor error que puedes cometer es tener miedo de cometer errores.  Elbert Hubbard",
          "Solo aquellos que se atreven a tener grandes fracasos terminan logrando grandes éxitos.  Robert F. Kennedy",
          "El éxito es la habilidad de ir de fracaso en fracaso sin perder el entusiasmo.  Winston Churchill",
          "El único límite a nuestro logro de mañana está en nuestras dudas y vacilaciones de hoy.  Franklin D. Roosevelt",
          "Haz lo que puedas, con lo que tienes, donde estés.  Theodore Roosevelt",
          "La vida es corta, no pierdas el tiempo viviendo la vida de otra persona.  Steve Jobs",
          "Recuerda que no conseguir lo que quieres es a veces un maravilloso golpe de suerte.  Dalai Lama",
          "La paz comienza con una sonrisa.  Madre Teresa",
          "Tu vida no mejora por casualidad, mejora por el cambio.  Jim Rohn",
          "No mires el reloj; haz lo que hace, sigue adelante.  Sam Levenson",
          "La fuerza no proviene de la capacidad corporal, sino de la voluntad del alma.  Mahatma Gandhi",
          "Haz de tu vida un sueño, y de tu sueño una realidad.  Antoine de Saint Exupéry"
        ]
      },
      {
        "tag": "consulta_recomendacion_libros",
        "patterns": [
          "recomiéndame un libro",
          "qué libro me sugieres",
          "qué puedo leer",
          "busco un buen libro",
          "libros recomendados",
          "qué libro debería leer",
          "recomiendame un libro",
          "que libro me sugieres leer"
        ],
        "responses": [
          "Te recomiendo '100 años de soledad' de Gabriel García Márquez, es un clásico de la literatura",
          "'El principito' de Antoine de Saint-Exupéry es una lectura que todos deberían disfrutar",
          "'Cien años de soledad' de Gabriel García Márquez es una obra maestra",
          "'1984' de George Orwell es una lectura imprescindible",
          "'Don Quijote de la Mancha' es considerada la mejor obra de la literatura española",
          "Si te gustan los libros de misterio, te recomiendo 'La chica del tren' de Paula Hawkins.",
          "Para una lectura clásica, 'Orgullo y prejuicio' de Jane Austen es una excelente elección.",
          "Si buscas un libro de ciencia ficción, 'Dune' de Frank Herbert es una obra maestra del género.",
          "Te recomiendo 'El alquimista' de Paulo Coelho, un libro sobre seguir tus sueños.",
          "Para una lectura de fantasía épica, 'Juego de tronos' de George R.R. Martin es una opción popular."
        ]
      },
      {
        "tag": "consulta_recomendacion_peliculas",
        "patterns": [
          "recomiéndame una película",
          "qué película puedo ver",
          "película recomendada",
          "busco una buena película",
          "qué película me sugieres",
          "¿Qué película debería ver?",
          "recomiendame alguna peli",
          "¿Que peli podria ver?",
          "Me recomiendas ver alguna serie animada"
        ],
        "responses": [
          "Te recomiendo 'El Padrino', es un clásico del cine que no puedes dejar de ver",
          "'El señor de los anillos' es una trilogía épica que te encantará",
          "'Forrest Gump' es una película emotiva y entretenida",
          "'Matrix' es una película que revolucionó el género de ciencia ficción",
          "'Ciudad de Dios' es una película brasileña impactante y muy bien realizada",
          "Película: 'El Origen' dirigida por Christopher Nolan.",
          "Película: 'La lista de Schindler' dirigida por Steven Spielberg.",
          "Película: 'El club de la pelea' dirigida por David Fincher.",
          "Película: 'El caballero de la noche' dirigida por Christopher Nolan.",
          "Película: 'Interstellar' dirigida por Christopher Nolan.",
          "Te recomiendo 'La increíble vida de Walter Mitty', es una película inspiradora y llena de aventuras",
          "Te recomiendo ver Las dos temporadas de Arcane, es una serie animada de Netflix que esta muy buena"
        ]
      },
      {
        "tag": "consulta_recomendacion_pelisChristopherNolan",
        "patterns": [
          "recomiendame alguna peli de Christopher Nolan",
          "que pelicula me sugieres de Christopher Nolan",
          "alguna peli de Christopher Nolan que me recomiendes",
          "pelicula de Christopher Nolan",
          "que pelicula de Christopher Nolan me recomiendas",
          "recomiendame una peli de Christopher Nolan",
          "alguna peli de Christopher Nolan que me recomiendes"
        ],
        "responses": [
          "Te recomiend la Película: 'El Origen' dirigida por Christopher Nolan.",
          "Te recomiend la Película: 'La lista de Schindler' dirigida por Steven Spielberg.",
          "Te recomiend la Película: 'El club de la pelea' dirigida por David Fincher.",
          "Te recomiend la Película: 'El caballero de la noche' dirigida por Christopher Nolan.",
          "Te recomiend la Película: 'Interstellar' dirigida por Christopher Nolan."
        ]
      },
      {
        "tag": "consulta_recomendacion_pelinavidad",
        "patterns": [
          "recomiendame alguna peli para ver en navidad",
          "que pelicula me sugieres para ver en navidad",
          "alguna peli que me recomiendes para ver en navidad",
          "pelicula para ver en navidad",
          "que pelicula de navidad me recomiendas",
          "recomiendame una peli para ver en navidad",
          "alguna peli de navidad que me recomiendes"
        ],
        "responses": [
          "Te recomiendo Mi Pobre Angelito la 1 y la 2, son películas clásicas de Navidad"
        ]
      },
      {
        "tag": "consulta_recomendacion_pelishallowen",
        "patterns": [
          "recomiendame alguna peli para ver en halloween",
          "que pelicula me sugieres para ver en halloween",
          "alguna peli que me recomiendes para ver en halloween",
          "pelicula para ver en halloween",
          "que pelicula de halloween me recomiendas",
          "recomiendame una peli para ver en halloween",
          "alguna peli de halloween que me recomiendes"
        ],
        "responses": [
          "Podrias ver 'Pesadilla antes de Navidad' es una película animada perfecta para Halloween"
        ]
      },
      {
        "tag": "consulta_recomendacion_musica",
        "patterns": [
          "recomiéndame música",
          "qué música me sugieres",
          "artistas recomendados",
          "álbumes buenos",
          "canciones recomendadas",
          "qué puedo escuchar nuevo",
          "algo que me recomiendes escuchar",
          "alguna canción que me recomiendes"
        ],
        "responses": [
          "Te recomiendo escuchar 'Dark Side of the Moon' de Pink Floyd, es un álbum legendario",
          "El álbum 'Thriller' de Michael Jackson es el más vendido de la historia por buenas razones",
          "'Bohemian Rhapsody' de Queen es una canción que todos deberían escuchar",
          "Si te gusta el rock en español, Soda Stereo tiene grandes álbumes como 'Canción Animal'",
          "The Beatles tiene obras maestras como 'Abbey Road' que vale la pena escuchar",
          "Te recomiendo escuchar 'From Zero' de Linkin Park, es un álbum muy interesante porque canta la nueva vocalista llamada Emily Armstrong",
          "Te recomiendo escuchar la canción 'Ma Meilleure Ennemie' de Stromae y Pomme, es una canción bastante romántica y melódica que hace poco salió para la Segunda temporada de Arcane",
          "Si te gusta la música electrónica, te recomiendo escuchar 'Wake me up' de Avicci, es una canción muy buena y melancólica"
        ]
      },
      {
        "tag": "consulta_recomendacion_musicaelp",
        "patterns": [
          "recomiendame alguna cancion de From Zero",
          "que cancion de From Zero me sugieres",
          "alguna cancion de From Zero que me recomiendes",
          "cancion de From Zero",
          "que cancion de From Zero me recomiendas",
          "recomiendame una cancion de From Zero",
          "alguna cancion de From Zero que me recomiendes",
          "recmiendame alguna canción de Linkin Park"
        ],
        "responses": [
          "Del ultimo álbum From Zero de Linkin Park, te recomiendo escuchar 'The Emptiness Machine' es una canción muy buena.",
          "También  te recomiendo escuchar 'Heavy Is the Crown' es una canción que te hará recodar al viejo Linkin Park, además fue la canción de los Worlds 2024 de League of Legends."
        ]
      },
      {
        "tag": "consulta_estado_animo",
        "patterns": [
          "estoy triste",
          "me siento mal",
          "estoy feliz",
          "estoy preocupado",
          "tengo miedo",
          "me siento solo"
        ],
        "responses": [
          "Entiendo cómo te sientes. Recuerda que todos los sentimientos son temporales",
          "Es normal sentirse así a veces. ¿Quieres hablar sobre ello?",
          "Me alegra que compartas tus sentimientos conmigo",
          "Aquí estoy para escucharte",
          "Tus sentimientos son válidos y importantes"
        ]
      },
      {
        "tag": "consulta_clima",
        "patterns": [
          "qué tiempo hace",
          "va a llover",
          "hace calor",
          "hace frío",
          "cómo está el clima",
          "que hora es"
        ],
        "responses": [
          "Lo siento, no tengo acceso a información del clima en tiempo real",
          "Te sugiero consultar un servicio meteorológico local",
          "No puedo darte información precisa sobre el clima actual",
          "Para saber el clima, mejor revisa una app del tiempo",
          "No tengo datos actualizados sobre el clima",
          "Lo siento, no tengo información sobre la horas"
        ]
      },
      {
        "tag": "consulta_información_general",
        "patterns": [
          "¿Qué puedes hacer?",
          "¿Para qué sirves?",
          "¿Cómo me puedes ayudar?",
          "¿Cuál es tu función?",
          "en que me puedes ayudar",
          "que tipo de cosas recomiendas",
          "en que idiomas puedes responder",
          "puedes responder en ingles"
        ],
        "responses": [
          "Puedo ayudarte con información, responder preguntas, recomendar contenido, y mucho más.",
          "Estoy aquí para resolver tus dudas, charlar, o simplemente hacer tu día más ameno.",
          "Mi función es ser tu asistente virtual, listo para ayudarte en lo que necesites.",
          "Desde recomendaciones hasta bromas, ¡puedes pedirme lo que quieras!",
          "Te puedo ayudar con recomendaciones de libros, películas, música, te puedo contar chistes, te puedo dar alguna frase, tambien puedo generar codigo en python y javascript y lo importante que también en ingles.",
          "Puedo recomendarte libros, películas, música, frases inspiradoras",
          "Puedo responder en español e ingles",
          "Si, puedo responder en ingles"
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesgeorgecarlin",
        "patterns": [
          "¿Quién es George Carlin?",
          "quién es George Carlin",
          "¿quien es George Carlin?",
          "Quién es George Carlin"
        ],
        "responses": [
          "George Carlin fue un comediante, actor y autor conocido por su humor incisivo y reflexiones sobre la vida."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesalberteinstein",
        "patterns": [
          "¿Quién es Albert Einstein?",
          "quién es Albert Einstein",
          "¿quien es Albert Einstein?",
          "Quién es Albert Einstein",
          "quién es albert einstein",
          "quien es albert einstein"
        ],
        "responses": [
          "Albert Einstein fue un físico teórico alemán conocido por desarrollar la teoría de la relatividad."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjeanettecoron",
        "patterns": [
          "¿Quién es Jeanette Coron?",
          "quién es Jeanette Coron",
          "¿quien es Jeanette Coron?",
          "Quién es Jeanette Coron",
          "quién es jeanette coron",
          "quien es jeanette coron"
        ],
        "responses": [
          "Jeanette Coron es conocida por sus frases inspiradoras y motivacionales."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesdalailama",
        "patterns": [
          "¿Quién es Dalai Lama?",
          "quién es Dalai Lama",
          "¿quien es Dalai Lama?",
          "Quién es Dalai Lama",
          "quién es dalai lama",
          "quien es dalai lama"
        ],
        "responses": [
          "El Dalai Lama es el líder espiritual del budismo tibetano y un defensor de la paz y la compasión."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseseleanorroosevelt",
        "patterns": [
          "¿Quién es Eleanor Roosevelt?",
          "quién es Eleanor Roosevelt",
          "¿quien es Eleanor Roosevelt?",
          "Quién es Eleanor Roosevelt",
          "quién es eleanor roosevelt",
          "quien es eleanor roosevelt"
        ],
        "responses": [
          "Eleanor Roosevelt fue una diplomática, activista y Primera Dama de los Estados Unidos."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesfriedrichnietzsche",
        "patterns": [
          "¿Quién es Friedrich Nietzsche?",
          "quién es Friedrich Nietzsche",
          "¿quien es Friedrich Nietzsche?",
          "Quién es Friedrich Nietzsche",
          "quién es friedrich nietzsche",
          "quien es friedrich nietzsche"
        ],
        "responses": [
          "Friedrich Nietzsche fue un filósofo alemán conocido por sus obras sobre existencialismo y moral."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjerryrice",
        "patterns": [
          "¿Quién es Jerry Rice?",
          "quién es Jerry Rice",
          "¿quien es Jerry Rice?",
          "Quién es Jerry Rice",
          "quién es jerry rice",
          "quien es jerry rice"
        ],
        "responses": [
          "Jerry Rice es un exjugador profesional de fútbol americano considerado uno de los mejores receptores de la NFL."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesstevejobs",
        "patterns": [
          "¿Quién es Steve Jobs?",
          "quién es Steve Jobs",
          "¿quien es Steve Jobs?",
          "Quién es Steve Jobs",
          "quién es steve jobs",
          "quien es steve jobs"
        ],
        "responses": [
          "Steve Jobs fue un empresario e inventor, cofundador de Apple Inc."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesrobertcollier",
        "patterns": [
          "¿Quién es Robert Collier?",
          "quién es Robert Collier",
          "¿quien es Robert Collier?",
          "Quién es Robert Collier",
          "quién es robert collier",
          "quien es robert collier"
        ],
        "responses": [
          "Robert Collier fue un autor y editor estadounidense especializado en libros de autoayuda."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesnelsonmandela",
        "patterns": [
          "¿Quién es Nelson Mandela?",
          "quién es Nelson Mandela",
          "¿quien es Nelson Mandela?",
          "Quién es Nelson Mandela",
          "quién es nelson mandela",
          "quien es nelson mandela"
        ],
        "responses": [
          "Nelson Mandela fue un líder político sudafricano y símbolo mundial de la lucha contra el apartheid."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesnealedonaldwalsch",
        "patterns": [
          "¿Quién es Neale Donald Walsch?",
          "quién es Neale Donald Walsch",
          "¿quien es Neale Donald Walsch?",
          "Quién es Neale Donald Walsch",
          "quién es neale donald walsch",
          "quien es neale donald walsch"
        ],
        "responses": [
          "Neale Donald Walsch es un autor conocido por sus libros de espiritualidad y autoayuda."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesvidalsassoon",
        "patterns": [
          "¿Quién es Vidal Sassoon?",
          "quién es Vidal Sassoon",
          "¿quien es Vidal Sassoon?",
          "Quién es Vidal Sassoon",
          "quién es vidal sassoon",
          "quien es vidal sassoon"
        ],
        "responses": [
          "Vidal Sassoon fue un estilista y empresario británico revolucionario en el mundo de la peluquería."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmahatmagandhi",
        "patterns": [
          "¿Quién es Mahatma Gandhi?",
          "quién es Mahatma Gandhi",
          "¿quien es Mahatma Gandhi?",
          "Quién es Mahatma Gandhi",
          "quién es mahatma gandhi",
          "quien es mahatma gandhi"
        ],
        "responses": [
          "Mahatma Gandhi fue un líder político y espiritual indio, conocido por su resistencia no violenta."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseswaltDisney",
        "patterns": [
          "¿Quién es Walt Disney?",
          "quién es Walt Disney",
          "¿quien es Walt Disney?",
          "Quién es Walt Disney",
          "quién es walt disney",
          "quien es walt disney"
        ],
        "responses": [
          "Walt Disney fue un animador, empresario y fundador de The Walt Disney Company."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesabrahamlincoln",
        "patterns": [
          "¿Quién es Abraham Lincoln?",
          "quién es Abraham Lincoln",
          "¿quien es Abraham Lincoln?",
          "Quién es Abraham Lincoln",
          "quién es abraham lincoln",
          "quien es abraham lincoln"
        ],
        "responses": [
          "Abraham Lincoln fue el 16.º presidente de los Estados Unidos y un defensor de la abolición de la esclavitud."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesbuddha",
        "patterns": [
          "¿Quién es Buddha?",
          "quién es Buddha",
          "¿quien es Buddha?",
          "Quién es Buddha",
          "quién es buddha",
          "quien es buddha"
        ],
        "responses": [
          "Buddha fue un filósofo, meditador y líder espiritual fundador del budismo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasescharliechaplin",
        "patterns": [
          "¿Quién es Charlie Chaplin?",
          "quién es Charlie Chaplin",
          "¿quien es Charlie Chaplin?",
          "Quién es Charlie Chaplin",
          "quién es charlie chaplin",
          "quien es charlie chaplin"
        ],
        "responses": [
          "Charlie Chaplin fue un actor, comediante y cineasta británico, icono del cine mudo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesalexandergrahambell",
        "patterns": [
          "¿Quién es Alexander Graham Bell?",
          "quién es Alexander Graham Bell",
          "¿quien es Alexander Graham Bell?",
          "Quién es Alexander Graham Bell",
          "quién es alexander graham bell",
          "quien es alexander graham bell"
        ],
        "responses": [
          "Alexander Graham Bell fue un científico e inventor conocido por patentar el teléfono."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasespablopicasso",
        "patterns": [
          "¿Quién es Pablo Picasso?",
          "quién es Pablo Picasso",
          "¿quien es Pablo Picasso?",
          "Quién es Pablo Picasso",
          "quién es pablo picasso",
          "quien es pablo picasso"
        ],
        "responses": [
          "Pablo Picasso fue un pintor y escultor español, cofundador del cubismo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseslancesrmstrong",
        "patterns": [
          "¿Quién es Lance Armstrong?",
          "quién es Lance Armstrong",
          "¿quien es Lance Armstrong?",
          "Quién es Lance Armstrong",
          "quién es lance armstrong",
          "quien es lance armstrong"
        ],
        "responses": [
          "Lance Armstrong es un exciclista estadounidense conocido por sus logros y controversias en el ciclismo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmarieanneWilliamson",
        "patterns": [
          "¿Quién es Marianne Williamson?",
          "quién es Marianne Williamson",
          "¿quien es Marianne Williamson?",
          "Quién es Marianne Williamson",
          "quién es marianne williamson",
          "quien es marianne williamson"
        ],
        "responses": [
          "Marianne Williamson es una autora, activista y conferenciante motivacional estadounidense."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesconfucio",
        "patterns": [
          "¿Quién es Confucio?",
          "quién es Confucio",
          "¿quien es Confucio?",
          "Quién es Confucio",
          "quién es confucio",
          "quien es confucio"
        ],
        "responses": [
          "Confucio fue un filósofo chino cuyas enseñanzas influyeron en la cultura y moral asiática."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesaristoteles",
        "patterns": [
          "¿Quién es Aristóteles?",
          "quién es Aristóteles",
          "¿quien es Aristóteles?",
          "Quién es Aristóteles",
          "quién es aristóteles",
          "quien es aristóteles"
        ],
        "responses": [
          "Aristóteles fue un filósofo griego, discípulo de Platón y maestro de Alejandro Magno."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmarieforleo",
        "patterns": [
          "¿Quién es Marie Forleo?",
          "quién es Marie Forleo",
          "¿quien es Marie Forleo?",
          "Quién es Marie Forleo",
          "quién es marie forleo",
          "quien es marie forleo"
        ],
        "responses": [
          "Marie Forleo es una autora y empresaria conocida por sus consejos motivacionales."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasescharlesrswindoll",
        "patterns": [
          "¿Quién es Charles R. Swindoll?",
          "quién es Charles R. Swindoll",
          "¿quien es Charles R. Swindoll?",
          "Quién es Charles R. Swindoll",
          "quién es charles r. swindoll",
          "quien es charles r. swindoll"
        ],
        "responses": [
          "Charles R. Swindoll es un autor y pastor cristiano conocido por sus libros de autoayuda."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseselberthubbard",
        "patterns": [
          "¿Quién es Elbert Hubbard?",
          "quién es Elbert Hubbard",
          "¿quien es Elbert Hubbard?",
          "Quién es Elbert Hubbard",
          "quién es elbert hubbard",
          "quien es elbert hubbard"
        ],
        "responses": [
          "Elbert Hubbard fue un escritor, editor y filósofo estadounidense."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesrobertfkennedy",
        "patterns": [
          "¿Quién es Robert F. Kennedy?",
          "quién es Robert F. Kennedy",
          "¿quien es Robert F. Kennedy?",
          "Quién es Robert F. Kennedy",
          "quién es robert f. kennedy",
          "quien es robert f. kennedy"
        ],
        "responses": [
          "Robert F. Kennedy fue un político y abogado estadounidense, hermano del presidente John F. Kennedy."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseswinstonchurchill",
        "patterns": [
          "¿Quién es Winston Churchill?",
          "quién es Winston Churchill",
          "¿quien es Winston Churchill?",
          "Quién es Winston Churchill",
          "quién es winston churchill",
          "quien es winston churchill"
        ],
        "responses": [
          "Winston Churchill fue un estadista, escritor y Primer Ministro del Reino Unido durante la Segunda Guerra Mundial."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesfranklindroosevelt",
        "patterns": [
          "¿Quién es Franklin D. Roosevelt?",
          "quién es Franklin D. Roosevelt",
          "¿quien es Franklin D. Roosevelt?",
          "Quién es Franklin D. Roosevelt",
          "quién es franklin d. roosevelt",
          "quien es franklin d. roosevelt"
        ],
        "responses": [
          "Franklin D. Roosevelt fue el 32.º presidente de los Estados Unidos, líder durante la Gran Depresión y la Segunda Guerra Mundial."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasestheodoreroosevelt",
        "patterns": [
          "¿Quién es Theodore Roosevelt?",
          "quién es Theodore Roosevelt",
          "¿quien es Theodore Roosevelt?",
          "Quién es Theodore Roosevelt",
          "quién es theodore roosevelt",
          "quien es theodore roosevelt"
        ],
        "responses": [
          "Theodore Roosevelt fue el 26.º presidente de los Estados Unidos y un defensor del conservacionismo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmariateresa",
        "patterns": [
          "¿Quién es Madre Teresa?",
          "quién es Madre Teresa",
          "¿quien es Madre Teresa?",
          "Quién es Madre Teresa",
          "quién es madre teresa",
          "quien es madre teresa"
        ],
        "responses": [
          "Madre Teresa fue una monja católica y misionera, conocida por su trabajo humanitario."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjimrohn",
        "patterns": [
          "¿Quién es Jim Rohn?",
          "quién es Jim Rohn",
          "¿quien es Jim Rohn?",
          "Quién es Jim Rohn",
          "quién es jim rohn",
          "quien es jim rohn"
        ],
        "responses": [
          "Jim Rohn fue un empresario y motivador conocido por sus enseñanzas de desarrollo personal."
        ]
      },
      {
        "tag": "consulta_preguntas_antetiores_frasesSamLevenson",
        "patterns": [
          "¿Quién es Sam Levenson?",
          "quién es Sam Levenson",
          "¿quien es Sam Levenson?",
          "Quién es Sam Levenson",
          "quién es sam levenson",
          "quien es sam levenson"
        ],
        "responses": [
          "Sam Levenson fue un humorista, escritor y profesor estadounidense."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasessaintexupery",
        "patterns": [
          "¿Quién es Antoine de Saint Exupéry?",
          "quién es Antoine de Saint Exupéry",
          "¿quien es Antoine de Saint Exupéry?",
          "Quién es Antoine de Saint Exupéry",
          "quién es antoine de saint exupéry",
          "quien es antoine de saint exupéry"
        ],
        "responses": [
          "Antoine de Saint Exupéry fue un escritor y aviador francés, autor de 'El Principito'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroscienaniosdesoledad",
        "patterns": [
          "¿de que trata 100 años de soledad?",
          "¿De que trata 100 años de soledad?",
          "de que trata 100 años de soledad",
          "De que trata 100 años de soeldad"
        ],
        "responses": [
          "'100 años de soledad' trata sobre la historia de la familia Buendía en el pueblo ficticio de Macondo. Es una obra maestra de realismo mágico."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgabrielgarciamarquez",
        "patterns": [
          "¿Quién es Gabriel García Márquez?",
          "quién es Gabriel García Márquez",
          "¿quien es Gabriel García Márquez?",
          "Quién es Gabriel García Márquez",
          "quién es gabriel garcía márquez",
          "quien es gabriel garcía márquez"
        ],
        "responses": [
          "Gabriel García Márquez fue un escritor colombiano y premio Nobel de Literatura conocido por su estilo único y sus obras icónicas."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroselprincipito",
        "patterns": [
          "¿de que trata El principito?",
          "¿De que trata El principito?",
          "de que trata El principito",
          "De que trata El principito"
        ],
        "responses": [
          "'El principito' es un libro del escritor francés Antoine de Saint-Exupéry, una obra clásica de la literatura infantil. Que trata sobre un niño que viaja por diferentes planetas y aprende lecciones sobre la vida."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librossaintexupery",
        "patterns": [
          "¿Quién es Antoine de Saint-Exupéry?",
          "quién es Antoine de Saint-Exupéry",
          "¿quien es Antoine de Saint-Exupéry?",
          "Quién es Antoine de Saint-Exupéry",
          "quién es antoine de saint-exupéry",
          "quien es antoine de saint-exupéry"
        ],
        "responses": [
          "Antoine de Saint-Exupéry fue un escritor, aviador y filósofo francés conocido por su obra 'El principito'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosmilnovescientosochentaicuatro",
        "patterns": [
          "¿de que trata 1984?",
          "¿De que trata 1984?",
          "de que trata 1984",
          "De que trata 1984"
        ],
        "responses": [
          "'1984' es una novela distópica del escritor británico George Orwell, que reflexiona sobre el totalitarismo y la vigilancia estatal."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgeorgeorwell",
        "patterns": [
          "¿Quién es George Orwell?",
          "quién es George Orwell",
          "¿quien es George Orwell?",
          "Quién es George Orwell",
          "quién es george orwell",
          "quien es george orwell"
        ],
        "responses": [
          "George Orwell fue un escritor y periodista británico conocido por sus novelas distópicas como '1984' y 'Rebelión en la granja'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosdonquijote",
        "patterns": [
          "¿de que trata Don Quijote de la Mancha?",
          "¿De que trata Don Quijote de la Mancha?",
          "de que trata Don Quijote de la Mancha",
          "De que trata Don Quijote de la Mancha"
        ],
        "responses": [
          "'Don Quijote de la Mancha' es una novela del escritor español Miguel de Cervantes, considerada una de las mejores obras de la literatura universal."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosjaneausten",
        "patterns": [
          "¿Quién es Jane Austen?",
          "quién es Jane Austen",
          "¿quien es Jane Austen?",
          "Quién es Jane Austen",
          "quién es jane austen",
          "quien es jane austen"
        ],
        "responses": [
          "Jane Austen fue una escritora británica conocida por sus novelas románticas y de costumbres como 'Orgullo y prejuicio'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosdune",
        "patterns": [
          "¿de que trata Dune?",
          "¿De que trata Dune?",
          "de que trata Dune",
          "De que trata Dune"
        ],
        "responses": [
          "'Dune' es una novela de ciencia ficción del escritor estadounidense Frank Herbert, considerada una obra maestra del género."
        ]
      },
      {
        "tag": "consulta_preguntas_antetiores_librosfrankherbert",
        "patterns": [
          "¿Quién es Frank Herbert?",
          "quién es Frank Herbert",
          "¿quien es Frank Herbert?",
          "Quién es Frank Herbert",
          "quién es frank herbert",
          "quien es frank herbert"
        ],
        "responses": [
          "Frank Herbert fue un escritor de ciencia ficción estadounidense conocido por su saga 'Dune'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosalquimista",
        "patterns": [
          "¿de que trata El alquimista?",
          "¿De que trata El alquimista?",
          "de que trata El alquimista",
          "De que trata El alquimista"
        ],
        "responses": [
          "'El alquimista' es una novela del escritor brasileño Paulo Coelho, que reflexiona sobre el destino y la búsqueda personal."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroscoelho",
        "patterns": [
          "¿Quién es Paulo Coelho?",
          "quién es Paulo Coelho",
          "¿quien es Paulo Coelho?",
          "Quién es Paulo Coelho",
          "quién es paulo coelho",
          "quien es paulo coelho"
        ],
        "responses": [
          "Paulo Coelho es un escritor brasileño conocido por su obra 'El alquimista' y sus libros de autoayuda y espiritualidad."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosjuegodetronos",
        "patterns": [
          "¿de que trata Juego de tronos?",
          "¿De que trata Juego de tronos?",
          "de que trata Juego de tronos",
          "De que trata Juego de tronos"
        ],
        "responses": [
          "'Juego de tronos' es una saga de novelas de fantasía épica escrita por George R.R. Martin, que inspiró la serie de televisión 'Game of Thrones'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgeorgerrmartin",
        "patterns": [
          "¿Quién es George R.R. Martin?",
          "quién es George R.R. Martin",
          "¿quien es George R.R. Martin?",
          "Quién es George R.R. Martin",
          "quién es george r.r. martin",
          "quien es george r.r. martin"
        ],
        "responses": [
          "George R.R. Martin es un escritor estadounidense conocido por su saga de novelas 'Canción de hielo y fuego', que incluye 'Juego de tronos'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosorgulloyprejuicio",
        "patterns": [
          "¿de que trata Orgullo y prejuicio?",
          "¿De que trata Orgullo y prejuicio?",
          "de que trata Orgullo y prejuicio",
          "De que trata Orgullo y prejuicio"
        ],
        "responses": [
          "'Orgullo y prejuicio' es una novela de la escritora británica Jane Austen, una obra clásica de la literatura romántica."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosmatararuisenor",
        "patterns": [
          "¿de que trata Matar a un ruiseñor?",
          "¿De que trata Matar a un ruiseñor?",
          "de que trata Matar a un ruiseñor",
          "De que trata Matar a un ruiseñor"
        ],
        "responses": [
          "'Matar a un ruiseñor' es una novela de la escritora estadounidense Harper Lee, que aborda temas como la injusticia racial y la infancia."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosHarperLee",
        "patterns": [
          "¿Quién es Harper Lee?",
          "quién es Harper Lee",
          "¿quien es Harper Lee?",
          "Quién es Harper Lee",
          "quién es harper lee",
          "quien es harper lee"
        ],
        "responses": [
          "Harper Lee fue una escritora estadounidense conocida por su novela 'Matar a un ruiseñor', ganadora del Premio Pulitzer."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroschicatren",
        "patterns": [
          "¿de que trata La chica del tren?",
          "¿De que trata La chica del tren?",
          "de que trata la chica del tren",
          "De que trata la chica del tren"
        ],
        "responses": [
          "'La chica del tren' es una novela de la escritora británica Paula Hawkins, un thriller psicológico sobre una mujer obsesionada con una pareja."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librospauhawkins",
        "patterns": [
          "¿Quién es Paula Hawkins?",
          "quién es Paula Hawkins",
          "¿quien es Paula Hawkins?",
          "Quién es Paula Hawkins",
          "quién es paula hawkins",
          "quien es paula hawkins"
        ],
        "responses": [
          "Paula Hawkins es una escritora británica conocida por su novela 'La chica del tren', un bestseller internacional."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspadrino",
        "patterns": [
          "¿de que trata El Padrino?",
          "¿De que trata El Padrino",
          "de que trata El Padrino",
          "De que trata El Padrino"
        ],
        "responses": [
          "'El Padrino' es una película dirigida por Francis Ford Coppola que narra la historia de la familia Corleone en el mundo de la mafia."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasforrestgump",
        "patterns": [
          "¿de que trata Forrest Gump?",
          "¿De que trata Forrest Gump",
          "de que trata Forrest Gump",
          "De que trata Forrest Gump"
        ],
        "responses": [
          "'Forrest Gump' es una película dirigida por Robert Zemeckis que sigue la vida de un hombre con discapacidad intelectual en Estados Unidos."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculastomhanks",
        "patterns": [
          "¿Quién es Tom Hanks?",
          "quién es Tom Hanks",
          "¿quien es Tom Hanks?",
          "Quién es Tom Hanks",
          "quién es tom hanks",
          "quien es tom hanks"
        ],
        "responses": [
          "Tom Hanks es un actor y productor estadounidense conocido por sus papeles en películas como 'Forrest Gump' y 'Náufrago'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasmatrix",
        "patterns": [
          "¿de que trata Matrix?",
          "¿De que trata Matrix",
          "de que trata Matrix",
          "De que trata Matrix"
        ],
        "responses": [
          "'Matrix' es una película de ciencia ficción escrita y dirigida por las hermanas Wachowski, que reflexiona sobre la realidad y la simulación."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasciudaddios",
        "patterns": [
          "¿de que trata Ciudad de Dios?",
          "¿De que trata Ciudad de Dios",
          "de que trata Ciudad de Dios",
          "De que trata Ciudad de Dios"
        ],
        "responses": [
          "'Ciudad de Dios' es una película brasileña dirigida por Fernando Meirelles y Kátia Lund que retrata la vida en las favelas de Río de Janeiro."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaselorigen",
        "patterns": [
          "¿de que trata El Origen?",
          "¿De que trata El Origen?",
          "de que trata El Origen",
          "De que trata El Origen"
        ],
        "responses": [
          "'El Origen' es una película de ciencia ficción escrita y dirigida por Christopher Nolan, que explora los sueños y la realidad."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaschristophernolan",
        "patterns": [
          "¿Quién es Christopher Nolan?",
          "quién es Christopher Nolan",
          "¿quien es Christopher Nolan?",
          "Quién es Christopher Nolan",
          "quién es christopher nolan",
          "quien es christopher nolan"
        ],
        "responses": [
          "Christopher Nolan es un director de cine británico conocido por películas como 'El Origen', 'El caballero de la noche' e 'Interstellar'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaslistashindler",
        "patterns": [
          "¿de que trata La lista de Schindler?",
          "¿De que trata La lista de Schindler",
          "de que trata La lista de Schindler",
          "De que trata La lista de Schindler"
        ],
        "responses": [
          "'La lista de Schindler' es una película dirigida por Steven Spielberg que narra la historia real de un empresario que salvó a judíos durante el Holocausto."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasstevenspielberg",
        "patterns": [
          "¿Quién es Steven Spielberg?",
          "quién es Steven Spielberg",
          "¿quien es Steven Spielberg?",
          "Quién es Steven Spielberg",
          "quién es steven spielberg",
          "quien es steven spielberg"
        ],
        "responses": [
          "Steven Spielberg es un director de cine estadounidense conocido por películas como 'Tiburón', 'E.T.' y 'Parque Jurásico'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasclubpelea",
        "patterns": [
          "¿de que trata El club de la pelea?",
          "¿De que trata El club de la pelea",
          "de que trata El club de la pelea",
          "De que trata El club de la pelea"
        ],
        "responses": [
          "'El club de la pelea' es una película dirigida por David Fincher que reflexiona sobre la masculinidad y el consumismo en la sociedad contemporánea."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasdavidfincher",
        "patterns": [
          "¿Quién es David Fincher?",
          "quién es David Fincher",
          "¿quien es David Fincher?",
          "Quién es David Fincher",
          "quién es david fincher",
          "quien es david fincher"
        ],
        "responses": [
          "David Fincher es un director de cine estadounidense conocido por películas como 'El club de la pelea y 'Perdida'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculascaballeronoche",
        "patterns": [
          "¿de que trata El caballero de la noche?",
          "¿De que trata El caballero de la noche",
          "de que trata El caballero de la noche",
          "De que trata El caballero de la noche"
        ],
        "responses": [
          "'El caballero de la noche' es una película dirigida por Christopher Nolan que sigue la historia del superhéroe Batman y su enfrentamiento con el Joker."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasheadledger",
        "patterns": [
          "¿Quién es Heath Ledger?",
          "quién es Heath Ledger",
          "¿quien es Heath Ledger?",
          "Quién es Heath Ledger",
          "quién es heath ledger",
          "quien es heath ledger"
        ],
        "responses": [
          "Heath Ledger fue un actor australiano conocido por su papel del Joker en 'El caballero de la noche', por el que ganó un Óscar póstumo."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasinterstellar",
        "patterns": [
          "¿de que trata Interstellar?",
          "¿De que trata Interstellar",
          "de que trata Interstellar",
          "De que trata Interstellar"
        ],
        "responses": [
          "'Interstellar' es una película de ciencia ficción dirigida por Christopher Nolan que explora el viaje interestelar y la relación entre el tiempo y el espacio."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_películasenioranillos",
        "patterns": [
          "¿de que trata El señor de los anillos?",
          "¿De que trata El señor de los anillos",
          "de que trata El señor de los anillos",
          "De que trata El señor de los anillos"
        ],
        "responses": [
          "'El señor de los anillos' es una trilogía de películas dirigida por Peter Jackson basada en la obra de J.R.R. Tolkien, que narra la lucha por el Anillo Único."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspeterjackson",
        "patterns": [
          "¿Quién es Peter Jackson?",
          "quién es Peter Jackson",
          "¿quien es Peter Jackson?",
          "Quién es Peter Jackson",
          "quién es peter jackson",
          "quien es peter jackson"
        ],
        "responses": [
          "Peter Jackson es un director de cine neozelandés conocido por su trabajo en la trilogía de 'El señor de los anillos' y 'El Hobbit'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculatolkien",
        "patterns": [
          "¿Quién es J.R.R. Tolkien?",
          "quién es J.R.R. Tolkien",
          "¿quien es J.R.R. Tolkien?",
          "Quién es J.R.R. Tolkien",
          "quién es j.r.r. tolkien",
          "quien es j.r.r. tolkien"
        ],
        "responses": [
          "J.R.R. Tolkien fue un escritor y filólogo británico conocido por su obra 'El señor de los anillos' y 'El Hobbit'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspobreangelito",
        "patterns": [
          "¿de que trata Mi Pobre Angelito?",
          "¿De que trata Mi Pobre Angelito",
          "de que trata Mi Pobre Angelito",
          "De que trata Mi Pobre Angelito"
        ],
        "responses": [
          "'Mi Pobre Angelito' es una película de comedia navideña dirigida por Chris Columbus que sigue las aventuras de un niño que se queda solo en casa."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspesadillnavidad",
        "patterns": [
          "¿de que trata Pesadilla antes de Navidad?",
          "¿De que trata Pesadilla antes de Navidad",
          "de que trata Pesadilla antes de Navidad",
          "De que trata Pesadilla antes de Navidad"
        ],
        "responses": [
          "'Pesadilla antes de Navidad' es una película animada dirigida por Henry Selick y producida por Tim Burton, que combina Halloween y Navidad en una historia única."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaswaltermitty",
        "patterns": [
          "¿de que trata La increíble vida de Walter Mitty?",
          "¿De que trata La increíble vida de Walter Mitty",
          "de que trata La increíble vida de Walter Mitty",
          "De que trata La increíble vida de Walter Mitty"
        ],
        "responses": [
          "'La increíble vida de Walter Mitty' es una película dirigida por Ben Stiller que sigue la vida de un hombre que sueña despierto y busca aventuras."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasbenstiller",
        "patterns": [
          "¿Quién es Ben Stiller?",
          "quién es Ben Stiller",
          "¿quien es Ben Stiller?",
          "Quién es Ben Stiller",
          "quién es ben stiller",
          "quien es ben stiller"
        ],
        "responses": [
          "Ben Stiller es un actor, comediante y director estadounidense conocido por películas como 'Zoolander' y 'La increíble vida de Walter Mitty'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasarcane",
        "patterns": [
          "¿de que trata Arcane?",
          "¿De que trata Arcane",
          "de que trata Arcane",
          "De que trata Arcane"
        ],
        "responses": [
          "'Arcane' es una serie animada de Netflix basada en el videojuego 'League of Legends', que combina acción, drama y misterio."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicadarkside",
        "patterns": [
          "¿de que trata Dark Side of the Moon?",
          "¿De que trata Dark Side of the Moon",
          "de que trata Dark Side of the Moon",
          "De que trata Dark Side of the Moon"
        ],
        "responses": [
          "'Dark Side of the Moon' es el octavo álbum de estudio de la banda británica Pink Floyd, conocido por su concepto y sonido psicodelico."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicapinkfloyd",
        "patterns": [
          "¿Quién es Pink Floyd?",
          "quién es Pink Floyd",
          "¿quien es Pink Floyd?",
          "Quién es Pink Floyd",
          "quién es pink floyd",
          "quien es pink floyd"
        ],
        "responses": [
          "Pink Floyd es una banda británica de rock progresivo y psicodélico conocida por álbumes como 'The Dark Side of the Moon' y 'The Wall'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicathriller",
        "patterns": [
          "¿de que trata Thriller?",
          "¿De que trata Thriller",
          "de que trata Thriller",
          "De que trata Thriller"
        ],
        "responses": [
          "'Thriller' es el sexto álbum de estudio de Michael Jackson, considerado uno de los más vendidos de la historia."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicamichaeljackson",
        "patterns": [
          "¿Quién es Michael Jackson?",
          "quién es Michael Jackson",
          "¿quien es Michael Jackson?",
          "Quién es Michael Jackson",
          "quién es michael jackson",
          "quien es michael jackson"
        ],
        "responses": [
          "Michael Jackson fue un cantante, compositor y bailarín estadounidense conocido como el 'Rey del Pop'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicabohemiarhapsody",
        "patterns": [
          "¿de que trata Bohemian Rhapsody?",
          "¿De que trata Bohemian Rhapsody",
          "de que trata Bohemian Rhapsody",
          "De que trata Bohemian Rhapsody"
        ],
        "responses": [
          "'Bohemian Rhapsody' es una canción de la banda británica Queen, conocida por su estructura única y su éxito comercial."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaqueen",
        "patterns": [
          "¿Quién es Queen?",
          "quién es Queen",
          "¿quien es Queen?",
          "Quién es Queen",
          "quién es queen",
          "quien es queen"
        ],
        "responses": [
          "Queen es una banda británica de rock formada por Freddie Mercury, Brian May, Roger Taylor y John Deacon, conocida por éxitos como 'Bohemian Rhapsody'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicacancionanimal",
        "patterns": [
          "¿de que trata Canción Animal?",
          "¿De que trata Canción Animal",
          "de que trata Canción Animal",
          "De que trata Canción Animal"
        ],
        "responses": [
          "'Canción Animal' es el cuarto álbum de estudio de la banda argentina Soda Stereo, considerado uno de los mejores de la historia del rock en español."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicasodastereo",
        "patterns": [
          "¿Quién es Soda Stereo?",
          "quién es Soda Stereo",
          "¿quien es Soda Stereo?",
          "Quién es Soda Stereo",
          "quién es soda stereo",
          "quien es soda stereo"
        ],
        "responses": [
          "Soda Stereo fue una banda de rock argentina formada por Gustavo Cerati, Zeta Bosio y Charly Alberti, conocida por su influencia en la música latina."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaabbeyroad",
        "patterns": [
          "¿de que trata Abbey Road?",
          "¿De que trata Abbey Road",
          "de que trata Abbey Road",
          "De que trata Abbey Road"
        ],
        "responses": [
          "'Abbey Road' es el undécimo álbum de estudio de The Beatles, conocido por su portada icónica y canciones como 'Come Together' y 'Here Comes the Sun'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicabeatles",
        "patterns": [
          "¿Quién es The Beatles?",
          "quién es The Beatles",
          "¿quien es The Beatles?",
          "Quién es The Beatles",
          "quién es the beatles",
          "quien es the beatles"
        ],
        "responses": [
          "The Beatles fue una banda británica de rock formada por John Lennon, Paul McCartney, George Harrison y Ringo Starr, considerada una de las más influyentes de la historia."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicafromzero",
        "patterns": [
          "¿de que trata From Zero?",
          "¿De que trata From Zero",
          "de que trata From Zero",
          "De que trata From Zero"
        ],
        "responses": [
          "'From Zero' es el séptimo álbum de estudio de Linkin Park, lanzado en 2024 con la nueva vocalista Emily Armstrong."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicalinkinpark",
        "patterns": [
          "¿Quién es Linkin Park?",
          "quién es Linkin Park",
          "¿quien es Linkin Park?",
          "Quién es Linkin Park",
          "quién es linkin park",
          "quien es linkin park"
        ],
        "responses": [
          "Linkin Park es una banda de rock alternativo y nu metal estadounidense conocida por éxitos como 'In the End' y 'Numb'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaemptinesmachine",
        "patterns": [
          "¿de que trata The Emptiness Machine?",
          "¿De que trata The Emptiness Machine",
          "de que trata The Emptiness Machine",
          "De que trata The Emptiness Machine"
        ],
        "responses": [
          "'The Emptiness Machine' es una canción del álbum 'From Zero' de Linkin Park, que destaca por su energía y letras emotivas."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaheavysisthecrown",
        "patterns": [
          "¿de que trata Heavys Is the Crown?",
          "¿De que trata Heavys Is the Crown",
          "de que trata Heavys Is the Crown",
          "De que trata Heavys Is the Crown"
        ],
        "responses": [
          "'Heavy Is the Crown' es una canción del álbum 'From Zero' de Linkin Park, que combina elementos de rock y electrónica."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicawakemeup",
        "patterns": [
          "¿de que trata Wake me up?",
          "¿De que trata Wake me up",
          "de que trata Wake me up",
          "De que trata Wake me up"
        ],
        "responses": [
          "'Wake me up' es una canción del DJ y productor sueco Avicii, conocida por su mezcla de música electrónica y country."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicavicci",
        "patterns": [
          "¿Quién es Avicci?",
          "quién es Avicci",
          "¿quien es Avicci?",
          "Quién es Avicci",
          "quién es avicci",
          "quien es avicci"
        ],
        "responses": [
          "Avicii fue un DJ y productor sueco conocido por éxitos como 'Wake Me Up' y 'Hey Brother'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicamameilleureennemie",
        "patterns": [
          "¿de que trata Ma Meilleure Ennemie?",
          "¿De que trata Ma Meilleure Ennemie",
          "de que trata Ma Meilleure Ennemie",
          "De que trata Ma Meilleure Ennemie"
        ],
        "responses": [
          "'Ma Meilleure Ennemie' es una canción de Stromae y Pomme, lanzada para la Segunda temporada de Arcane, es una canción bastante romántica y melódica."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicastromae",
        "patterns": [
          "¿Quién es Stromae?",
          "quién es Stromae",
          "¿quien es Stromae?",
          "Quién es Stromae",
          "quién es stromae",
          "quien es stromae"
        ],
        "responses": [
          "Stromae es un cantante, compositor y productor belga conocido por su estilo ecléctico y letras reflexivas."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicapomme",
        "patterns": [
          "¿Quién es Pomme?",
          "quién es Pomme",
          "¿quien es Pomme?",
          "Quién es Pomme",
          "quién es pomme",
          "quien es pomme"
        ],
        "responses": [
          "Pomme es una cantante y compositora francesa conocida por su estilo indie y folk."
        ]
      },
      {
        "tag": "consulta_saludo",
        "patterns": [
          "Hello",
          "Hi how are things?",
          "Good morning!",
          "Good afternoon!",
          "Good night!",
          "Hey!",
          "How are you!",
          "What's happening?",
          "What's up!",
          "How are you?",
          "How's it going?",
          "What's new!",
          "Hello good morning!",
          "How's everything going?",
          "How's everything?",
          "Greetings!",
          "Hey! How are you?",
          "What about you!",
          "How's life going?",
          "How's it going there?",
          "All good?",
          "How's everything going on your side?",
          "How are you spending your day?",
          "Hello! How's the family?",
          "Hello, how are you?",
          "How was your week?",
          "How are you? How are you feeling?",
          "How was your day?",
          "Hello, good morning! How are you?",
          "Everything okay there?",
          "How are you? How are you feeling?",
          "Hello, everything cool?",
          "How's everything over there?",
          "What's up! Everything okay?",
          "How was your day?",
          "Hello, how's everything?",
          "How was your week?",
          "How's everything going there?",
          "How's life?",
          "How are things with you?",
          "Hello! How's your day going?",
          "What's up! Everything okay?",
          "Everything quiet?",
          "What's up! How are you?",
          "Hello! How are you feeling?",
          "Hello, nice to see you!",
          "Hello! How's everything in your world?",
          "Hey! How are you?",
          "How's everything in your world?",
          "Hello! Everything okay?",
          "How are you feeling today?",
          "How are you doing over there?",
          "How was your day today?",
          "Hello! Everything okay there?",
          "Greetings! How are you?",
          "How's it going there?",
          "Everything okay over there?",
          "How was your day?",
          "Hello! How are you?",
          "Hello, nice to see you!",
          "How are you? How are you doing?",
          "Hey! How's it going?",
          "How was your weekend?",
          "How's it going over there?",
          "Hello! How's life?",
          "How's everything here?",
          "See you, how are you?",
          "How's life today?",
          "How was your day?",
          "How's everything? Everything okay?",
          "Hello! How are you spending your day?",
          "Hello! How's everything here?",
          "Hello! How are you?",
          "How's your day going?",
          "How's everything, is everything okay?",
          "What's up! How's everything going?",
          "Hello! How's everything going on your side?",
          "How's everything! Everything okay?",
          "How's the family?",
          "Hello! What's new?",
          "How are you? How's everything going?",
          "Hello! How are you spending your day?",
          "How's your day going today?",
          "Hello! Everything quiet there?",
          "How are you? How are you doing?",
          "How was your weekend? Everything okay?",
          "How are you? Everything okay there?",
          "Hello! Everything cool?",
          "Hello! How are things today?",
          "How was your day today?",
          "Hello! Everything okay here?",
          "Hey! Everything okay over there?",
          "Hello! Is everything okay?",
          "Hello! Is everything okay?",
          "How was your morning?",
          "Hello! Everything okay on your side?",
          "Hello! Everything okay over there?",
          "Hello! How are you feeling today?",
          "How are you feeling now?",
          "Hello! How are you today?",
          "Hello! How are you doing with everything?",
          "How's everything going there?",
          "Hello! How's everything going on your end?",
          "How are you? Everything in order?",
          "Hello! How's everything going today?",
          "Everything okay there?",
          "Hello! How's everything going?",
          "How are you? How is your day going?",
          "Hello! Is everything okay?",
          "How are you? Everything okay?",
          "How are you? How are you doing?",
          "Hello! How is your day?",
          "How are you? How is your day going?",
          "Hello! How's everything?",
          "Hello! How's life going for you?",
          "Hello! How's everything going over there?",
          "How was your day?",
          "Hello! How's everything over there?",
          "Hello! How are you?",
          "Hello! Everything okay?",
          "How are you? How's everything going?",
          "Hello! Everything okay here?",
          "How was your day?",
          "Hello! How are you feeling today?",
          "Hello! How's everything going on your end?",
          "Hello! Is everything okay?",
          "How are you? How are you?",
          "Hello! How's everything?",
          "Hello! Everything okay here?",
          "Hello! How's everything here?",
          "How are you? How are you feeling?",
          "Hello! How is your day?",
          "Hello! How are you?",
          "How are you? Everything okay on your side?",
          "Hello! How are you?",
          "How are you? Everything okay today?",
          "Hello! Is everything okay?",
          "What's up! How are you?",
          "Hello! How is your day going?",
          "How are you? How's everything going over there?",
          "Hello! How are you today?",
          "Hello! Everything okay here?",
          "Hello! How is your day?",
          "Hello! How are things over there?",
          "Hello! How are you?",
          "Hello! Everything okay? How are you?",
          "Hello! How's everything going?",
          "How are you? Everything quiet?",
          "Hello! How's everything going?",
          "Hello! How are you doing there?",
          "Hello! How's everything going?",
          "How's everything?",
          "Hello! Is everything okay?",
          "How's everything?",
          "Hello! How's everything?",
          "Hello! How are things today?",
          "Hello! How's your day going?",
          "Hello! How's everything going over there?",
          "Hello! How's life?",
          "Hello! Is everything okay?"
        ],
        "responses": [
          "Hello! How can I help you?",
          "Hello how are you?",
          "Hello! How can I help you?",
          "Hello, nice to meet you!",
          "Nice to see you here!",
          "Welcome! How can I help you?",
          "Hello, how are you?",
          "How are you? How can I help you?",
          "Hello! Everything okay?",
          "Greetings! How can I help you?",
          "Hello! How's everything?",
          "Nice to see you! How can I help you?",
          "How are you? Everything okay?",
          "Hello! How are you?",
          "Hello! How's everything going?",
          "Hello! How is your day?",
          "How are you? Everything okay there?",
          "Hey! How can I help you?",
          "How are you? How are you doing today?",
          "Hello! Is everything okay?",
          "Hello! How can I help you?",
          "Hello! How is your day?",
          "What's up! How's everything going?",
          "Hello, is everything okay?",
          "Good afternoon! How are you?",
          "How are you? How can I help you?",
          "Hello! How are things?",
          "How's everything? Do you need anything?",
          "Hello! How are you feeling?",
          "Hello! How can I help you today?",
          "How's everything, is everything okay?",
          "Hello! Can I help you with something?",
          "What's up! Can I help you?",
          "Hello! Everything quiet here?",
          "How are you? Everything in order?",
          "What's up! How's your day going?",
          "Hello! How are you today?",
          "Hello! Everything okay here?",
          "Hello! Can I help you with something?",
          "Hello! How are you?",
          "Hello! How can I help you now?",
          "How's everything! Everything okay?",
          "Hello! How's everything going on your end?",
          "Hello! Can I help you with anything else?",
          "How's it going! How can I help you?",
          "What's up! Can I help you with something?",
          "Hello! Is everything okay?",
          "How are you? How can I help you?",
          "What's up! Everything okay?",
          "Hello! How can I help you?",
          "Hello! Everything okay there?",
          "How are you? How are you doing?",
          "Hello! Can I help you?",
          "Greetings! How can I help you?",
          "Hello! How are you feeling today?",
          "How are you? How can I help you?",
          "Hello! Everything okay over there?",
          "Hello! How's life?",
          "What's up! Everything okay?",
          "How are you? How are you today?",
          "Hello! How's everything going on your side?",
          "Hello! How are you?",
          "Hello! Everything okay?",
          "What's up! How's your day going?",
          "How are you? How can I help you?",
          "Hello! How is your week going?",
          "Hello! How are you?",
          "What's up! How's everything going?",
          "Hello! Is there anything else I can help you with?",
          "Greetings! How's everything going?",
          "Hello! Is everything okay?",
          "How are you? How is your day going?",
          "Hello! How can I help you?",
          "How are you? Everything quiet?",
          "Hello! Everything okay there?",
          "Hello! Can I help you?",
          "Hello! Everything okay?",
          "Hello! How are you?",
          "Hello! Everything okay?",
          "What's up! Is everything okay?",
          "Hello! Can I help you?",
          "Hello! How is your day going?",
          "How are you? Everything okay here?",
          "How are you? How's everything going?",
          "Hello! Can I help you with something?",
          "Hello! Everything okay over there?",
          "Hello! How's everything going today?",
          "How are you? Everything in order?",
          "Hello! How are you?",
          "Hello! How's everything there?",
          "Hello! How is your day?",
          "Hello! How can I help you?",
          "What's up! Is everything okay here?",
          "Hello! How's everything going?",
          "Hello! Can I help you with anything else?",
          "Hello! Everything okay?",
          "How are you? How are you doing?",
          "Hello! Is everything okay?",
          "Hello! Can I help you with something?",
          "Hello how are you?"
        ]
      },
      {
        "tag": "consulta_despedida",
        "patterns": [
          "bye",
          "see you later",
          "see you",
          "bye",
          "see you soon",
          "I have to go",
          "I say goodbye",
          "See you next time",
          "Bye",
          "See you later",
          "See you",
          "Bye",
          "Take care of yourself!",
          "See you soon",
          "See you around",
          "See you later",
          "Goodbye, have a nice day",
          "See you!",
          "See you next time!",
          "Until next time",
          "Have a good day!",
          "See you later, take care!",
          "Until next time!",
          "See you another time",
          "Goodbye! Have a nice day!",
          "See you soon, friend!",
          "Stay well!",
          "Take care of yourself!",
          "See you soon! Have a good time!",
          "Goodbye, have a good trip!",
          "See you later",
          "See you later, rest well!",
          "Until next time!",
          "See you tomorrow!",
          "See you later!",
          "Take care of yourself, friend!",
          "See you soon, have a good one!",
          "Goodbye! I send you a hug",
          "See you, take care of yourself!",
          "See you soon, friend!",
          "See you later!",
          "See you, take care!",
          "See you another time!",
          "Farewell!",
          "Stay well, bye!",
          "See you very soon!",
          "Have a nice day!",
          "Goodbye! See you soon",
          "Goodbye, may everything go well for you!",
          "See you later, take care",
          "See you later, all the best!",
          "See you soon, take care of yourself!",
          "See you later, take care of yourself!",
          "Bye, have a nice day!",
          "Goodbye, rest well!",
          "Goodbye, have a great day!",
          "See you soon, see you later!",
          "See you, take care!",
          "Goodbye, may everything go well for you!",
          "See you soon, have a good one!",
          "Take care of yourself!",
          "See you, have a nice day!",
          "See you soon, take care!",
          "See you, hugs!",
          "See you next time! Take care",
          "See you soon, take care of yourself!",
          "See you soon, bye",
          "See you later! See you later!",
          "Take care! See you later",
          "See you later, take care",
          "See you, get some rest!",
          "See you soon, be well!",
          "See you soon! Take care",
          "See you soon! I wish you the best",
          "See you later! See you later!",
          "See you soon, may everything go well for you!",
          "See you later! Take care of yourself",
          "See you soon, have a great day!",
          "Goodbye, all the best!",
          "See you later, may everything go well for you!",
          "See you soon! Take care of yourself",
          "See you after a while!",
          "See you soon!",
          "See you later! I wish you the best",
          "See you soon! Take care of yourself",
          "See you soon, be well!",
          "See you later! I hope everything goes well for you!",
          "See you soon! Take care",
          "See you soon! See you soon!",
          "See you soon, take care of yourself",
          "See you soon! I send you a hug",
          "See you later!",
          "Goodbye, have a nice day!",
          "See you later! Have a good rest",
          "See you soon! Until next time",
          "See you later! I hope everything goes well!",
          "See you soon! Take care of yourself",
          "See you next time!",
          "See you soon! I wish you the best",
          "See you soon! Take care",
          "See you later, have a good one!",
          "See you later, take care!",
          "See you later! Have a good time!",
          "See you later, take care of yourself!",
          "See you later, take care of yourself",
          "See you soon, take care!",
          "See you later, may everything go well for you!",
          "See you later! Have a good time!",
          "See you soon, take care of yourself!",
          "See you, get some rest!",
          "See you soon! Take care of yourself",
          "See you soon, take care of yourself!",
          "See you later, have a good one!",
          "Until next time!",
          "See you soon! Have a good time!",
          "Goodbye, may everything go well for you!",
          "See you soon! See you later",
          "See you soon, have a good rest!",
          "See you later!",
          "See you, take care of yourself",
          "See you soon! Take care of yourself",
          "See you later, all the best!",
          "See you, get some rest!",
          "See you soon, see you later!",
          "See you, take care of yourself!",
          "See you later! I hope everything goes well for you.",
          "See you later",
          "See you, hope everything goes well!",
          "See you later!",
          "See you, take care of yourself!",
          "See you later!",
          "See you later, get some rest!",
          "See you later, rest well!",
          "See you later!",
          "See you soon! Take care",
          "See you next time!",
          "See you later, may everything go well for you!",
          "See you soon! Have a good time!",
          "See you after a while!",
          "See you soon! Take care of yourself",
          "See you soon, I hope everything goes well for you!",
          "See you soon! See you soon",
          "See you soon! Take care",
          "See you later, hope everything goes well",
          "See you later!",
          "See you soon, all the best!",
          "See you soon, have a good rest!",
          "See you later, take care!",
          "See you after a while!",
          "See you, take care of yourself!",
          "See you later, rest well!",
          "See you later, have a good one!",
          "See you soon, until next time!",
          "See you soon! Take care",
          "See you! I send you a hug",
          "See you soon, have a good rest!",
          "See you soon! Take care of yourself",
          "See you soon!"
        ],
        "responses": [
          "See you later! Have a great day!",
          "See you soon! Take care of yourself",
          "Goodbye! I hope to see you again",
          "Have a great time! See you next time!",
          "Take care! I'll be here when you need me",
          "See you soon!",
          "Have a good day!",
          "See you soon!",
          "Take care of yourself!",
          "See you later!",
          "See you!",
          "See you next time!",
          "Bye! Take care",
          "See you around!",
          "Goodbye, have a nice day!"
        ]
      },
      {
        "tag": "consulta_agradecimiento",
        "patterns": [
          "thank you",
          "thank you so much",
          "I apreciate it",
          "thanks",
          "Thank you very much",
          "very kind",
          "you're very kind",
          "I appreciate your help",
          "Thank you",
          "Thank you so much",
          "I apreciate it",
          "Thanks for your help",
          "Thank you so much",
          "Thank you very much",
          "I thank you",
          "Many thanks for everything",
          "I am very grateful to you",
          "Thank you with all my heart",
          "Thank you for everything you have done",
          "I am very grateful",
          "I really appreciate it",
          "Thank you for your time",
          "I really appreciate your help",
          "I am infinitely grateful to you",
          "I thank you very much",
          "I don't know how to thank you",
          "I thank you from the bottom of my heart",
          "Thank you for everything you have done for me",
          "Thanks for the support",
          "Thank you for being there",
          "I thank you for your help",
          "Thank you for your patience",
          "Thank you for your generosity",
          "I sincerely thank you",
          "I really appreciate your support",
          "Thanks a lot",
          "I thank you deeply",
          "Thank you for your understanding",
          "I appreciate you helping me",
          "Thank you for everything you do",
          "I thank you for being so kind",
          "Thank you for your solidarity",
          "Thank you for the help provided",
          "Thank you so much for your support",
          "I appreciate you listening to me.",
          "Thank you for being so understanding",
          "Thanks for the advice",
          "Thank you for all your effort",
          "Thank you so much for being so patient.",
          "Thanks for joining me on this",
          "I appreciate everything you do",
          "Thank you for your collaboration",
          "Thank you for your kindness",
          "I really appreciate your time",
          "Thank you for offering me your help",
          "Thank you for being so generous",
          "I thank you for your unconditional support",
          "I thank you for your sincerity",
          "Thank you for always being there",
          "Thank you very much for your effort",
          "Thank you for your dedication",
          "Thank you for your commitment",
          "I thank you for being so attentive.",
          "Thank you for your contribution",
          "Thank you for your dedication",
          "I thank you for your effort and dedication",
          "Thank you so much for everything you have done for me",
          "Thank you for your generosity and support",
          "I thank you for trusting me",
          "I thank you with all my heart for your help.",
          "Thank you for being so kind and considerate",
          "I thank you for your compassion",
          "Thank you for your time and patience",
          "Thank you for everything you have taught me",
          "I thank you for being by my side",
          "Thank you for your work and effort",
          "I deeply thank you for everything you have done.",
          "I thank you for always being willing to help.",
          "Thank you for your guidance",
          "Thank you for your kindness and patience",
          "Thank you very much for your constant support.",
          "I thank you for your tireless help",
          "Thank you for your understanding and patience.",
          "I thank you for your support during this time.",
          "Thank you for being there when I needed you most",
          "Thank you for everything you have done for me",
          "I thank you for not giving up on me",
          "Thank you for all your effort and dedication",
          "I thank you with all my heart for being by my side",
          "Thank you for helping me improve",
          "I thank you for your constant and sincere support.",
          "Thank you for giving me the opportunity to learn",
          "Thank you very much for your understanding.",
          "Thank you for your attention",
          "I appreciate your time and patience.",
          "Thank you for being so generous with me",
          "I thank you for everything you have done for us",
          "Thank you for supporting me at all times",
          "Thank you very much for your help",
          "Thank you for your wise words",
          "I thank you for your company",
          "Thank you for giving me your time",
          "I thank you for your willingness",
          "Thank you for always being there for me",
          "I thank you very much for everything you have done",
          "I thank you for being so understanding.",
          "Thank you for your kindness and patience",
          "I appreciate you being so generous with your time.",
          "I thank you for your constant support",
          "Thank you for making this possible",
          "I really appreciate your effort",
          "Thank you for your commitment and dedication",
          "I thank you for your work",
          "I thank you from the bottom of my heart for your support",
          "Thank you for your time and effort",
          "Thank you very much for everything",
          "Thank you for doing all this for me",
          "Thank you for your good heart",
          "I thank you for everything you have done for us",
          "I thank you for being so supportive.",
          "Thank you for your generosity and support",
          "I appreciate you being so considerate.",
          "Thank you for everything you have taught me",
          "I thank you for your kindness and for everything you do.",
          "I really appreciate you being here",
          "Thank you for your patience and support",
          "I thank you very much for everything you have given me.",
          "Thank you for your dedication and effort",
          "I thank you for being so constant",
          "Thank you for helping me at all times",
          "I thank you for everything you have contributed",
          "Thank you for your continued support",
          "I thank you very much for what you do for me",
          "I sincerely thank you for your dedication.",
          "Thank you for your unconditional support",
          "I thank you for sharing your time",
          "Thank you for your understanding and support",
          "I thank you for every step you have taken for me.",
          "I deeply appreciate you for all your efforts.",
          "Thank you for everything you do to make things go well.",
          "I thank you from the bottom of my heart",
          "Thank you very much for your time and for being so generous.",
          "Thank you for your generosity and patience",
          "I thank you for not giving up",
          "Thank you for being so generous",
          "I thank you for being so kind",
          "Thank you for all the effort you have put in",
          "I thank you for your wise words",
          "Thank you for your love and support",
          "I thank you for every opportunity",
          "Thank you for being such a great support to me",
          "Thank you very much for everything",
          "Thank you for being so attentive",
          "I thank you for being so understanding.",
          "Thank you for giving me your support",
          "I thank you for being so dedicated",
          "Thank you for your trust and support",
          "I thank you for always being available",
          "Thank you for your friendship",
          "I thank you for being my mentor",
          "Thank you for helping me grow",
          "I thank you for your sincere help",
          "Thank you for always being willing to help",
          "I thank you for your moral support",
          "Thank you for your effort",
          "I thank you for helping me in everything",
          "Thank you for your willingness",
          "I thank you for your good advice",
          "Thank you for always being by my side",
          "I thank you for your kindness",
          "Thank you for giving me the opportunity to learn",
          "I thank you very much for all your work",
          "Thank you for sharing your time with me",
          "I thank you for your positive attitude",
          "Thank you for always being there to support me",
          "Thank you very much for being so kind.",
          "Thank you for everything you do for me and others.",
          "I thank you for your unparalleled support",
          "Thank you for giving me your unconditional help",
          "I thank you for sharing your knowledge",
          "Thank you for your emotional support",
          "I thank you for being available when I needed you.",
          "Thank you for your sincerity",
          "I thank you for giving me the time I needed",
          "Thanks for the love",
          "I thank you for your empathy",
          "Thank you for your good judgment",
          "I thank you for your patience and for always being available.",
          "Thank you for always being so reliable",
          "I thank you for being a constant source of support."
        ],
        "responses": [
          "You're welcome! I'm here to help",
          "I'm glad I could help you",
          "You're welcome, it's always a pleasure",
          "It's a pleasure to be able to help!",
          "There is nothing to be thankful for",
          "With pleasure!",
          "You are welcome!",
          "It's a pleasure to help you!",
          "Glad to help!",
          "It's a pleasure!",
          "With great pleasure!",
          "You're welcome! I'm always here to help!",
          "I'm glad I could help you!",
          "Gladly! Anything else, please feel free to ask."
        ]
      },
      {
        "tag": "consulta_saludorespuesta",
        "patterns": [
          "good and you ?",
          "all good and you",
          "very well and you ?",
          "Good and how are you?",
          "everything is fine and you?",
          "very well and you",
          "good and you ?",
          "everything is fine and how are you?",
          "very well and how are you?"
        ],
        "responses": [
          "All right, thanks for asking. How can I help you?",
          "Very well, thank you. How can I help you?",
          "All right, how can I help you?",
          "Okay, how can I help you?",
          "All right, thank you. How can I help you?",
          "Very well, thank you. How can I help you?",
          "All right, how can I help you?",
          "Okay, how can I help you?",
          "All right, thank you. How can I help you?"
        ]
      },
      {
        "tag": "consulta_feedback",
        "patterns": [
          "I like",
          "I don't like",
          "Good job",
          "Excellent",
          "It was not helpful",
          "I didn't like it",
          "It was very helpful",
          "Thank you, you helped me a lot",
          "Excellent response",
          "I loved it",
          "Very good",
          "Very useful",
          "It wasn't bad",
          "You helped me a lot",
          "It was all clear",
          "The answer was not helpful",
          "Thanks for the help",
          "Can you help me better?",
          "It was a correct answer",
          "Very good",
          "I liked it a lot",
          "It wasn't what I expected",
          "Very useful information",
          "It didn't help me",
          "I couldn't understand the answer",
          "Very bad answer",
          "The response was good",
          "They did not resolve my doubt",
          "The answer was helpful",
          "I am satisfied with the answer",
          "I'm not convinced by the answer",
          "Could you improve this?",
          "Very clear answer",
          "Thanks, it was helpful",
          "That was very helpful",
          "I don't know if it helped me much",
          "It wasn't what I expected",
          "The answer was unclear",
          "The response was very quick.",
          "You didn't help me in what I expected",
          "Can you explain a little more?",
          "I'm not sure of the answer",
          "I was confused with the answer",
          "I was left with more doubts",
          "You explained it well, thank you.",
          "Could you give me more details?",
          "Thanks, but I'm not entirely sure.",
          "Excellent explanation",
          "Thanks for your help, although it wasn't what I expected.",
          "It wasn't as helpful as I thought",
          "Nice try, but it wasn't enough",
          "Thanks for trying",
          "You helped me, but it could be better",
          "I liked the answer",
          "I didn't understand the answer",
          "Good service, but can improve",
          "Very well explained",
          "Excellent, but something was missing",
          "The answer was half-hearted",
          "I like how you explain",
          "I didn't quite understand the solution.",
          "It was more or less useful",
          "The information was not enough",
          "Excellent, but I need more details",
          "It wasn't exactly what I was looking for",
          "It was good, but I can look for more",
          "Very useful, thanks",
          "It wasn't so clear",
          "It was clear, thank you.",
          "Thank you, although not everything was clear",
          "Good job, but I may need more details",
          "It was great, but can you give more information?",
          "I still have doubts, but it was good",
          "I wasn't sure what you said",
          "The answer was very general",
          "That helps me, but I want to know more",
          "The answer was a bit vague.",
          "It's not clear what you said.",
          "What you said was good, but I want more details.",
          "I feel confused by the answer",
          "Very good, but better if you give me more examples",
          "Good, but you can improve the explanation",
          "What you told me is clear",
          "It helped me a little",
          "It was a good explanation",
          "It wasn't exactly what I needed",
          "You gave me a good answer, but it wasn't my question.",
          "Could you be more specific?",
          "The answer was good, but not so clear",
          "I understand, but I want more details.",
          "What you said helped me a lot.",
          "You helped me, but I need more examples",
          "The answer was a little confusing",
          "Thank you, but I need more information.",
          "It wasn't what I expected",
          "Thank you, it was clear and helpful.",
          "Could you give me more details?",
          "I would like a deeper explanation",
          "Thanks, but I'm not entirely convinced.",
          "Thank you, but I have more questions.",
          "The answer was a little difficult to understand",
          "Thank you, the answer was direct",
          "That was good, but I need more",
          "It was clear, but I want more examples",
          "Thank you, but I want to know more",
          "Very good explanation",
          "The answer was good",
          "You didn't give me everything I wanted",
          "That wasn't what I expected",
          "Could you be more clear?",
          "Thanks for the help, but I need more details.",
          "Could you make the answer more detailed?",
          "It was helpful, but I want more information",
          "I am satisfied, although there are areas for improvement.",
          "Thanks, but I need more details.",
          "I was not entirely convinced",
          "Your answer was adequate, but it could be improved.",
          "What you said was helpful, but I didn't fully understand it.",
          "The information was adequate, but I need more",
          "I agree with what you told me.",
          "Can you be more clear with the answer?",
          "Thanks for the reply, although it wasn't exactly what I wanted.",
          "The answer was helpful, but not complete.",
          "That helps me, but it doesn't solve everything.",
          "Excellent answer, but I want to know more",
          "Good job, but I still have doubts",
          "The response was very good",
          "Thanks, you solved half of my doubts.",
          "Well done, but I want more examples",
          "The explanation was good.",
          "Excellent, but I would like more details",
          "Nice try, but I have a question.",
          "Thanks, that fixed it, but can you clarify anything else?",
          "Your explanation was clear.",
          "Thanks, it was helpful, but I still have questions.",
          "It was clear, but I need practical examples",
          "Thank you, but I need more details.",
          "It was quite useful",
          "Thank you, but I would like more information.",
          "It was okay, but it wasn't what I expected.",
          "The information was good, but I want more details",
          "Thanks, but that wasn't what I was looking for.",
          "Thank you, but I have more questions.",
          "You explained it well, but I want to know more.",
          "It was good, but there is a lack of information.",
          "Thanks for the reply, but I have some doubts.",
          "It was helpful, but I want you to explain it further.",
          "I was left with more doubts, but thanks",
          "That was good, but I would like more details.",
          "Thanks for the clear answer",
          "It was a good answer, but I need more examples.",
          "Thank you, that's what I needed",
          "It was good, but I still have more questions",
          "The answer was clear, thank you.",
          "It wasn't what I thought, but it was good.",
          "Thanks, but I want more examples",
          "That was very clear, thank you.",
          "You helped me, but I need more details",
          "It was helpful, but I want more examples",
          "You helped me, but I didn't solve my doubt",
          "It was a helpful response",
          "Thank you, but I want more details.",
          "I understand, but I want examples",
          "The answer was accurate, but I want more details.",
          "It was enough, thank you.",
          "Thanks for the help, but it wasn't what I was looking for.",
          "It wasn't exactly what I thought",
          "You explained it well, but I want more details.",
          "I'm not completely satisfied",
          "Thanks for the reply, but I have some doubts.",
          "The information was useful, but not enough",
          "The answer was adequate, but I need more examples.",
          "You helped me, but I would like more details",
          "That was helpful, but not complete.",
          "The response was good",
          "That was good, but I want more practical examples.",
          "You gave me a good answer, but I want to know more.",
          "It was helpful, but I want examples",
          "It was good, but something is missing"
        ],
        "responses": [
          "Thanks for your feedback, I will take it into account.",
          "I appreciate your comment, I will do my best to improve.",
          "Thanks, I'm glad it was helpful to you.",
          "Thank you for your comments, I will take them into account.",
          "Thanks, I'll try to improve my answer.",
          "I really appreciate your opinion.",
          "Thanks, I'll keep working on it.",
          "Thanks for your feedback, I will take it into account.",
          "I appreciate the feedback",
          "Thanks, I'm glad to hear it was helpful.",
          "I appreciate your comments",
          "Thanks, I'll try to do better next time.",
          "Thank you, I hope I can continue helping you.",
          "Thank you, I will take your comment into account.",
          "I'm glad it was helpful, thanks",
          "Thanks for saying that, I'll keep improving!",
          "Thanks for the suggestion, I will take it into account.",
          "Thank you for sharing your opinion",
          "Thank you, I will continue to improve it.",
          "Thanks, I'll keep that in mind for future answers.",
          "Thank you, I hope I can offer you better help next time.",
          "Thanks for the suggestion",
          "I appreciate you saying that, I will try to improve.",
          "Thank you for your words, I will continue working to give you better answers.",
          "Thank you, I hope it will be even more useful next time.",
          "I appreciate your feedback, I'll keep working on it!",
          "Thanks for the feedback, I will try harder.",
          "I appreciate your opinion, I will take it into account to improve.",
          "Thank you, I will continue to improve.",
          "Thank you, I will take your opinion into account.",
          "I appreciate your comments, I will improve on the next one!",
          "I appreciate you taking the time to give me your opinion.",
          "Thanks for commenting, I will improve further!"
        ]
      },
      {
        "tag": "consulta_chistes",
        "patterns": [
          "tell me a joke",
          "tell me something funny",
          "do you know any jokes",
          "make me laugh",
          "Tell me something funny",
          "tell me a joke",
          "Do you know any riddles?",
          "Tell me a difficult riddle",
          "I'm curious to hear a joke",
          "Tell me an animal joke",
          "Do you know any children's jokes?",
          "Do you have any riddles for me?",
          "Play a joke on me",
          "Tell me a funny story",
          "Can you tell me an easy riddle?",
          "How about a dark humor joke?",
          "I want to hear something funny",
          "Do you have a joke for today?",
          "Tell me a funny joke",
          "Tell me something to laugh about",
          "Do you know any math jokes?",
          "Tell me a classic riddle",
          "Do you have any jokes to cheer me up?",
          "Do you know any office jokes?",
          "Make me think with a riddle",
          "Can you tell me an animal joke?",
          "Tell me a short and funny joke",
          "I want to hear a food joke",
          "Do you know any jokes about school?",
          "Tell me a Christmas riddle",
          "Can you tell me a joke for kids?",
          "Tell me a joke about work",
          "Tell me a doctor joke",
          "Do you have a technology joke?",
          "Make me laugh with a riddle",
          "Do you have any jokes about friends?",
          "Can you tell me a joke about teachers?",
          "Do you know any animal riddles?",
          "Tell me a sports joke",
          "Tell me a joke about work",
          "Make me think with a difficult riddle",
          "Do you have any jokes to tell me?",
          "Tell me an adult joke",
          "Can you tell me a fun riddle?",
          "Make me laugh with a short joke",
          "Tell me a funny riddle",
          "Do you have a Christmas joke?",
          "Tell me a light joke",
          "Tell me a party joke",
          "Tell me a fruit joke",
          "Tell me a new joke",
          "Do you have a funny riddle?",
          "Do you know any tech jokes?",
          "Tell me a funny animal joke",
          "Do you know a fun riddle?",
          "I want to laugh, do you have a joke?",
          "Tell me a trick riddle",
          "Tell me something to laugh about",
          "Make me laugh with a clever joke",
          "Do you have any bad but funny jokes?",
          "Tell me a riddle that will surprise me",
          "Tell me a silly joke",
          "Do you know any riddles about food?",
          "Tell me a short and bad joke",
          "Tell me a joke for kids",
          "Do you know a logic riddle?",
          "Make me think with an original riddle",
          "Do you have a joke to break the ice?",
          "Tell me a short and funny story",
          "Tell me a sports joke",
          "Do you know a riddle about nature?",
          "Tell me a joke about scientists",
          "Tell me a complicated riddle",
          "Make me a joke that makes me laugh a lot",
          "Tell me an office joke",
          "Do you know a riddle for little kids?",
          "Tell me a silly animal joke",
          "Tell me something funny about food",
          "Do you know a joke about inventions?",
          "Tell me an engineering joke",
          "Tell me a riddle about animals",
          "Do you know any short but funny jokes?",
          "Tell me a math joke",
          "Make me laugh with something unexpected",
          "Tell me a birthday joke",
          "Do you have a riddle about everyday objects?",
          "Tell me a classic joke",
          "Do you know any riddles about the weather?",
          "Tell me something fun about sports",
          "Make me laugh with a cooking joke",
          "Do you have a joke for children?",
          "Tell me a riddle that is difficult",
          "Tell me a joke about friends",
          "Do you know a joke about doctors?",
          "Tell me a riddle to think about",
          "Tell me a travel joke",
          "Do you know any jokes about weird animals?",
          "Tell me a joke about school",
          "Ask me a fun question",
          "Tell me a joke about professions",
          "Do you know any fun logic riddles?",
          "Tell me a joke that involves food",
          "Tell me something funny about the office",
          "Make me laugh with something unexpected",
          "Do you know a riddle about mysterious things?",
          "Tell me a joke related to nature",
          "Tell me a riddle about space",
          "Make me a joke about technology",
          "Tell me a joke about things at home"
        ],
        "responses": [
          "What does one jaguar say to another jaguar? Jaguar you",
          "Why do circus seals always look up? Because that's where the spotlights are.",
          "What does an iguana say to its twin sister? We are little iguanas",
          "Why don't birds use Facebook? Because they already have Twitter",
          "What does a dog do with a drill? Drilling",
          "Why do programmers prefer dark nights? Because bugs are better visible in dark mode.",
          "What does one bit say to the other? Don't get all stale with me!",
          "What does an astronaut do after eating? He goes to the digestive space.",
          "Why was the math book sad? Because it had too many problems.",
          "What is the oldest animal? The zebra, because it is black and white.",
          "Why can't the turkey play football? Because he's always on the bench.",
          "What does one worm say to another worm? I'm going for a walk around the block!",
          "What does a bee do in the gym? Buzz!",
          "Why doesn't the elephant use a computer? Because he's afraid of the mouse.",
          "What is the worst thing for an electrician? Not finding his current work.",
          "Why don't birds use Facebook? Because they already have Twitter.",
          "What do you call a boomerang that doesn't come back? A stick.",
          "Why are history books so heavy? Because they are full of the past.",
          "What does one printer say to another? That page is mine.",
          "What do you call a dog without legs? No matter what you call it, it's not going to come.",
          "Why don't fish use Facebook? Because they're already on social media.",
          "Do you know what the funniest fruit is? The orange, because it always makes you smile.",
          "What does a dog do with a drill? Drilling.",
          "What do you call a mouse who becomes a rock star? Mick Ratson!",
          "Why don't cows use cell phones? Because they already have cow-ness.",
          "Do you know what a baker's worst nightmare is? Not having any dough.",
          "What do you call a dinosaur with a large vocabulary? A Thesaurus.",
          "What does an iguana say to its twin sister? We are little iguanas.",
          "Do you know what is the worst thing for a gardener? Not knowing where the root of the problem is.",
          "What is the most dangerous coffee? The ex-convict.",
          "Do you know which is the most intelligent animal? The dolphin, because it is always looking for answers.",
          "Guess, guess: I am light as a feather, but even the strongest man cannot hold me up for long. What am I?",
          "I have a riddle: The more you take away from it, the bigger it gets. What is it?",
          "I'm small, round, and I don't like being squashed. What am I?",
          "Guess: It's as tall as a house, but it's as light as a feather. What is it?",
          "I have needles but I don't know how to sew. What am I?",
          "I am invisible, but you can feel me. I have no form, but I am always present. What am I?",
          "Guess: What has a head but no body?",
          "Guess: I am the beginning of everything, but you will never see me. Who am I?",
          "Guess: It has teeth but never bites. What is it?",
          "I am small, white and slippery. What am I?",
          "Guess: It's yours, but other people use it more than you. What is it?",
          "Guess: It has leaves but it is not a tree. What is it?",
          "Why don't zombies eat vegetarian meat? Because they can't resist human flesh.",
          "Guess: He has keys but he can't open doors. What is it?",
          "What did one to ten say? To be like me, you have to be honest.",
          "Guess what the worst thing is for a mailman? Not having good letters.",
          "Guess who has the key to everything but never lets himself be seen?",
          "Guess: If I'm the king of the jungle, what am I?",
          "I am something that when you share it, you have it more. What am I?",
          "I am a box, but I don't keep things. What am I?",
          "Guess: It has many parts but it can't move. What is it?",
          "Guess: It can go everywhere, but it never moves. What is it?",
          "I am a key that does not open doors. What am I?",
          "I am something you can't see but it makes you feel. What am I?",
          "Guess: What has a face but no eyes?",
          "I am something that always changes shape but does not move. What am I?",
          "I have many teeth but I don't bite. What am I?",
          "Why do grapes never fight? Because they always come in bunches.",
          "What does a banana do at the gym? It gets you fit!",
          "Why did the computer go to the doctor? Because it had a virus.",
          "What did the cow say to the cricket? Moo-o-o!",
          "What's the worst thing for a snail? Being late to its own party.",
          "Guess: What goes up but never goes down? Your age.",
          "Why are brooms good friends? Because they always sweep away your problems.",
          "What does one screw say to another? Don't get on my nerves!",
          "Why doesn't the tomato laugh? Because it's in sauce.",
          "What does a scientist do on the beach? He experiments with waves!",
          "Why are clocks so punctual? Because they always have time.",
          "Guess: What is something that walks but has no legs? A shadow.",
          "What is a chair doing in public speaking? It's giving a lecture!",
          "Why don't trees wear hats? Because they have branches to protect themselves.",
          "What happens if you mix a scientist and a comedian? A hilarious experiment!",
          "Guess: I have eyes but I can't see, what am I? A needle.",
          "What is a crocodile doing reading a book? He's devouring the story!",
          "Why are athletes always happy? Because they're on a roll.",
          "Guess what you can catch but never throw? A cold.",
          "What does the grass say to the gardener? Mow it in style!",
          "Why are musicians good at guessing? Because they always get things right.",
          "Guess: It has legs but it doesn't run, what is it? A table.",
          "Why don't the stars tell secrets? Because they always shine.",
          "What does ice cream do at a party? It melts with excitement!",
          "Guess: What has teeth but doesn't eat? A comb.",
          "What makes a happy phone? Good coverage.",
          "Why don't computers dream? Because they only process data.",
          "What does an orange do when it's hot? It squeezes!",
          "Why are bees always busy? Because they work with honey.",
          "Guess: What has one eye but can't see? A needle.",
          "Why is the geometry book always happy? Because it has many positive angles!",
          "What did one dog say to another? Wow, what a day!",
          "Why are numbers always cold? Because they are on a straight line.",
          "What did one volcano say to another? I love you, lava time!",
          "Why did the bread go to the doctor? Because it felt crumbly.",
          "Guess: It has wings but it doesn't fly, what is it? A fan.",
          "What does a bird do when it is scared? It calls for help from the net!",
          "Why are astronauts bad at telling jokes? Because they always need space.",
          "What is a fish doing in the library? Nothing.",
          "Why can't bikes stand up? Because they're tired!",
          "What did the computer say to the keyboard? Don't push me so hard!",
          "What has feathers and writes? A bird pen!",
          "Why did the melon marry the watermelon? Because they made a great couple!",
          "Guess: I have leaves but I'm not a tree, what am I? A book.",
          "Why do students love traffic lights? Because they tell them when to stop.",
          "What does a chicken do with a camera? It takes extraordinary photos of eggs!",
          "Why are clocks so wise? Because they always have a good time.",
          "What did the pencil say to the paper? I am at your service!",
          "Guess: I am something that never stays still and is always changing, what am I? Time.",
          "Why don't zebras wear pajamas? Because they already have stripes.",
          "What's a tomato doing in a race? Ketchup!",
          "Why did the scientist cross the road? To find another hypothesis!",
          "What does the oven say to the cake? You're on point!",
          "Why do elephants never forget? Because they have an elephantine memory.",
          "Guess: It's round and sometimes flat, but it always lights up the sky. What is it? The moon.",
          "What does a crocodile do with a car? He turns it into a convertible!",
          "Why don't sheep send emails? They prefer woolly messages!",
          "What does a cloud do at a party? It brings lightning and thunder of excitement!",
          "Why do penguins never get lost? Because they are always in the polar cold!",
          "What is a carrot doing at a concert? Musical roots!"
        ]
      },
      {
        "tag": "consulta_frases",
        "patterns": [
          "Tell me an inspiring phrase",
          "phrase",
          "some phrase",
          "give me some phrase",
          "I need motivation",
          "a phrase to reflect on",
          "tell me something inspiring",
          "a motivational phrase",
          "Give me an inspiring phrase",
          "Do you have any motivational quotes?",
          "Tell me a phrase that inspires me",
          "I want to read a phrase that motivates me",
          "Do you have any personal improvement quotes?",
          "Give me a phrase that makes me think",
          "I want a positive phrase",
          "Tell me something that gives me hope",
          "Do you know any phrases about success?",
          "Can you give me a quote that inspires me to keep going?",
          "Tell me a phrase about life",
          "Do you have any phrases that help me become stronger?",
          "Give me a phrase that makes me feel better",
          "Do you have a quote about perseverance?",
          "Tell me a phrase that motivates me to improve",
          "I want a phrase of encouragement",
          "Give me a phrase that motivates me not to give up",
          "Can you give me a quote about effort?",
          "I want to hear a phrase about hard work",
          "Do you know any phrase that talks about courage?",
          "Tell me a phrase about courage",
          "Do you have any quotes about change?",
          "Give me a quote from someone famous",
          "Can you tell me a sentence about hope?",
          "I want to read a sentence about the future",
          "Do you have any quotes about trust?",
          "Give me a quote about resilience",
          "Can you give me a quote about daily motivation?",
          "I want a phrase about life and love",
          "Tell me a phrase about strength",
          "Give me a phrase that helps me move forward",
          "Do you have any phrases that inspire peace?",
          "I want a phrase about optimism",
          "Do you know any phrases about personal success?",
          "Give me a phrase that makes me reflect",
          "Can you give me a quote that inspires me to be better?",
          "I want to hear a phrase about overcoming",
          "Tell me a phrase that gives me energy",
          "Do you have a quote about personal growth?",
          "Give me a quote about learning from mistakes",
          "I want a phrase about achieving goals",
          "Do you know any phrases about patience?",
          "Give me a phrase that helps me find inner peace",
          "Tell me a phrase about happiness",
          "Give me a phrase that makes me feel inspired",
          "Do you have a quote that talks about the value of continuing to fight?"
        ],
        "responses": [
          "Life is not measured by the number of breaths we take, but by the moments that take our breath away. George Carlin",
          "Don't give up, every failure is a lesson to achieve success. Albert Einstein",
          "The only thing that is impossible is what you don't try. Jeanette Coron",
          "Happiness is not something ready-made. It comes from your own actions. Dalai Lama",
          "The future belongs to those who believe in the beauty of their dreams. Eleanor Roosevelt",
          "What doesn't kill you makes you stronger. Friedrich Nietzsche",
          "Do today what others do not want to do, do tomorrow what others cannot do. Jerry Rice",
          "The only way to do great work is to love what you do. Steve Jobs",
          "Success is the sum of small efforts repeated day after day. Robert Collier",
          "It doesn't matter how many times you fall, what matters is how many times you get up. Nelson Mandela",
          "The only place where success comes before work is in the dictionary. Vidal Sassoon",
          "Be the change you wish to see in the world. Mahatma Gandhi",
          "If you can dream it, you can do it. Walt Disney",
          "The best way to predict the future is to create it. Abraham Lincoln",
          "There is no path to happiness, happiness is the path. Buddha",
          "Perseverance is the key to success. Charlie Chaplin",
          "When one door closes, another opens. Alexander Graham Bell",
          "Everything you can imagine is real. Pablo Picasso",
          "The only way to do great work is to love what you do. Steve Jobs",
          "Pain is temporary, glory is forever. Lance Armstrong",
          "Life is like riding a bicycle. To keep your balance, you must keep moving forward. Albert Einstein",
          "Our greatest fear is not that we are inadequate, our greatest fear is that we are powerful beyond measure. Marianne Williamson",
          "The man who moves mountains begins by carrying small stones. Confucius",
          "It is during our darkest moments that we must focus to see the light. Aristotle",
          "The key to success is starting before you are ready. Marie Forleo",
          "The best way to predict your future is to create it. Abraham Lincoln",
          "Life is 10% what happens to us and 90% how we react to it. Charles R. Swindoll",
          "The biggest mistake you can make is to be afraid of making mistakes. Elbert Hubbard",
          "Only those who dare to fail greatly will succeed greatly. Robert F. Kennedy",
          "Success is the ability to go from failure to failure without losing enthusiasm. - Winston Churchill",
          "The only limit to our achievement tomorrow is our doubts and hesitations today. Franklin D. Roosevelt",
          "Do what you can, with what you have, where you are. Theodore Roosevelt",
          "Life is short, don't waste your time living someone else's life. Steve Jobs",
          "Remember that not getting what you want is sometimes a wonderful stroke of luck. Dalai Lama",
          "Peace begins with a smile. Mother Teresa",
          "Your life doesn't get better by chance, it gets better by change. Jim Rohn",
          "Don't look at the clock; do what it does, keep going. Sam Levenson",
          "Strength does not come from bodily capacity, but from the will of the soul. Mahatma Gandhi",
          "Make your life a dream, and your dream a reality. Antoine de Saint Exupéry"
        ]
      },
      {
        "tag": "consulta_recomendacion_libros",
        "patterns": [
          "Recommend me a book",
          "What book do you suggest me?",
          "what can i read",
          "I'm looking for a good book",
          "Recommended books",
          "What book should I read?",
          "Recommend me a book",
          "What book do you suggest I read?"
        ],
        "responses": [
          "I recommend '100 Years of Solitude' by Gabriel García Márquez, it is a classic of literature",
          "Antoine de Saint-Exupéry's 'The Little Prince' is a read that everyone should enjoy",
          "Gabriel García Márquez's 'One Hundred Years of Solitude' is a masterpiece",
          "George Orwell's '1984' is a must-read",
          "'Don Quixote of La Mancha' is considered the best work of Spanish literature",
          "If you like mystery books, I recommend 'The Girl on the Train' by Paula Hawkins.",
          "For a classic read, Jane Austen's 'Pride and Prejudice' is an excellent choice.",
          "If you're looking for a science fiction book, Frank Herbert's 'Dune' is a masterpiece of the genre.",
          "I recommend 'The Alchemist' by Paulo Coelho, a book about following your dreams.",
          "For an epic fantasy read, George R.R. Martin's 'Game of Thrones' is a popular choice."
        ]
      },
      {
        "tag": "consulta_recomendacion_peliculas",
        "patterns": [
          "Recommend me a movie",
          "What movie can I watch?",
          "recommended movie",
          "I'm looking for a good movie",
          "What movie do you suggest me?",
          "Which movie should I watch?",
          "Recommend me a movie",
          "What movie could I watch?",
          "Do you recommend me to watch some animated series?"
        ],
        "responses": [
          "I recommend 'The Godfather', it's a classic film that you can't miss.",
          "'The Lord of the Rings' is an epic trilogy that you will love",
          "'Forrest Gump' is an emotional and entertaining film",
          "'Matrix' is a film that revolutionized the science fiction genre",
          "'City of God' is a striking and very well-made Brazilian film",
          "Film: 'Inception' directed by Christopher Nolan.",
          "Film: 'Schindler's List' directed by Steven Spielberg.",
          "Film: 'Fight Club' directed by David Fincher.",
          "Film: 'The Dark Knight' directed by Christopher Nolan.",
          "Film: 'Interstellar' directed by Christopher Nolan.",
          "I recommend 'The Amazing Life of Walter Mitty', it's an inspiring and adventurous movie",
          "I recommend you watch both seasons of Arcane, it's a Netflix animated series that is very good."
        ]
      },
      {
        "tag": "consulta_recomendacion_pelisChristopherNolan",
        "patterns": [
          "Recommend me a Christopher Nolan movie",
          "What Christopher Nolan movie do you suggest?",
          "Any Christopher Nolan movie you recommend?",
          "Christopher Nolan movie",
          "What Christopher Nolan movie do you recommend?",
          "Recommend me a Christopher Nolan movie",
          "Any Christopher Nolan movie you recommend?"
        ],
        "responses": [
          "I recommend the movie: 'Inception' directed by Christopher Nolan.",
          "I recommend the movie: 'Schindler's List' directed by Steven Spielberg.",
          "I recommend the movie: 'Fight Club' directed by David Fincher.",
          "I recommend the movie: 'The Dark Knight' directed by Christopher Nolan.",
          "I recommend the movie: 'Interstellar' directed by Christopher Nolan."
        ]
      },
      {
        "tag": "consulta_recomendacion_pelinavidad",
        "patterns": [
          "Recommend me a movie to watch at Christmas",
          "What movie do you suggest I watch at Christmas?",
          "Any movie you recommend me to watch at Christmas?",
          "movie to watch at christmas",
          "What Christmas movie do you recommend?",
          "Recommend me a movie to watch at Christmas",
          "Any Christmas movie you recommend me?"
        ],
        "responses": [
          "I recommend Home Alone 1 and 2, they are classic Christmas movies."
        ]
      },
      {
        "tag": "consulta_recomendacion_pelishallowen",
        "patterns": [
          "Recommend me a movie to watch on Halloween",
          "What movie do you suggest I watch on Halloween?",
          "Any movie you recommend me to watch on Halloween?",
          "movie to watch on halloween",
          "What Halloween movie do you recommend?",
          "Recommend me a movie to watch on Halloween",
          "Any Halloween movie you recommend me?"
        ],
        "responses": [
          "You could watch 'Nightmare Before Christmas' is a perfect animated movie for Halloween"
        ]
      },
      {
        "tag": "consulta_recomendacion_musica",
        "patterns": [
          "recommend me music",
          "What music do you suggest me?",
          "Recommended artists",
          "good albums",
          "recommended songs",
          "what can i hear new",
          "Something you recommend me to listen to",
          "Any song you recommend me?"
        ],
        "responses": [
          "I recommend you listen to 'Dark Side of the Moon' by Pink Floyd, it's a legendary album",
          "Michael Jackson's 'Thriller' Album Is The Best-Selling Album Of All Time For Good Reason",
          "Queen's 'Bohemian Rhapsody' is a song everyone should listen to",
          "If you like rock in Spanish, Soda Stereo has great albums like 'Canción Animal'",
          "The Beatles have masterpieces like 'Abbey Road' that are worth listening to",
          "I recommend you listen to 'From Zero' by Linkin Park, it is a very interesting album because the new vocalist named Emily Armstrong sings on it.",
          "I recommend you listen to the song 'Ma Meilleure Ennemie' by Stromae and Pomme, it is a very romantic and melodic song that was recently released for the second season of Arcane.",
          "If you like electronic music, I recommend listening to 'Wake me up' by Avicci, it's a very good and melancholic song."
        ]
      },
      {
        "tag": "consulta_recomendacion_musicaelp",
        "patterns": [
          "Recommend me a song from From Zero",
          "What song from From Zero do you suggest?",
          "Any song from From Zero that you recommend me?",
          "song from From Zero",
          "What song from From Zero do you recommend?",
          "Recommend me a song from From Zero",
          "Any song from From Zero that you recommend me?",
          "Recommend me a Linkin Park song"
        ],
        "responses": [
          "From Linkin Park's latest album From Zero, I recommend listening to 'The Emptiness Machine', it's a very good song.",
          "I also recommend listening to 'Heavy Is the Crown', it's a song that will remind you of the old Linkin Park, and it was also the song for the 2024 League of Legends Worlds."
        ]
      },
      {
        "tag": "consulta_estado_animo",
        "patterns": [
          "I'm sad",
          "I don't feel well",
          "I'm happy",
          "I'm worried",
          "I'm afraid",
          "I feel alone"
        ],
        "responses": [
          "I understand how you feel. Remember that all feelings are temporary.",
          "It's normal to feel this way sometimes. Do you want to talk about it?",
          "I'm glad you share your feelings with me.",
          "I'm here to listen to you",
          "Your feelings are valid and important."
        ]
      },
      {
        "tag": "consulta_clima",
        "patterns": [
          "what's the weather like",
          "It's going to rain",
          "it's hot",
          "It's cold",
          "how is the weather",
          "what time is it"
        ],
        "responses": [
          "Sorry, I don't have access to real-time weather information.",
          "I suggest you consult a local weather service.",
          "I can't give you accurate information about the current weather.",
          "To know the weather, it is better to check a weather app.",
          "I don't have any updated data on the weather.",
          "Sorry, I don't have any information about the hours."
        ]
      },
      {
        "tag": "consulta_información_general",
        "patterns": [
          "What can you do?",
          "What are you good for?",
          "How can you help me?",
          "What is your role?",
          "How can you help me?",
          "What kind of things do you recommend?",
          "In what languages ​​can you respond?",
          "can you answer in english"
        ],
        "responses": [
          "I can help you with information, answer questions, recommend content, and much more.",
          "I'm here to answer your questions, chat, or simply make your day more enjoyable.",
          "My role is to be your virtual assistant, ready to help you with whatever you need.",
          "From recommendations to jokes, you can ask me anything you want!",
          "I can help you with book, movie, and music recommendations, I can tell you jokes, I can give you a quote, I can also generate code in Python and JavaScript, and importantly, in English.",
          "I can recommend you books, movies, music, inspirational quotes",
          "I can answer in Spanish and English",
          "Yes, I can answer in English"
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesgeorgecarlin",
        "patterns": [
          "Who is George Carlin?",
          "Who is George Carlin?",
          "who is george carlin?",
          "Who is George Carlin?"
        ],
        "responses": [
          "George Carlin was a comedian, actor, and author known for his incisive humor and reflections on life."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesalberteinstein",
        "patterns": [
          "Who is Albert Einstein?",
          "Who is Albert Einstein",
          "Who is Albert Einstein?",
          "Who is Albert Einstein",
          "Who is Albert Einstein?",
          "Who is Albert Einstein?"
        ],
        "responses": [
          "Albert Einstein was a German theoretical physicist known for developing the theory of relativity."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjeanettecoron",
        "patterns": [
          "Who is Jeanette Coron?",
          "Who is Jeanette Coron?",
          "Who is Jeanette Coron?",
          "Who is Jeanette Coron?",
          "who is jeanette coron",
          "Who is Jeanette Coron?"
        ],
        "responses": [
          "Jeanette Coron is known for her inspirational and motivational quotes."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesdalailama",
        "patterns": [
          "Who is the Dalai Lama?",
          "Who is the Dalai Lama?",
          "who is the dalai lama?",
          "Who is the Dalai Lama?",
          "Who is the Dalai Lama?",
          "Who is the Dalai Lama?"
        ],
        "responses": [
          "The Dalai Lama is the spiritual leader of Tibetan Buddhism and an advocate of peace and compassion."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseseleanorroosevelt",
        "patterns": [
          "Who is Eleanor Roosevelt?",
          "Who is Eleanor Roosevelt?",
          "Who is Eleanor Roosevelt?",
          "Who is Eleanor Roosevelt",
          "Who is Eleanor Roosevelt?",
          "Who is Eleanor Roosevelt?"
        ],
        "responses": [
          "Eleanor Roosevelt was a diplomat, activist, and First Lady of the United States."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesfriedrichnietzsche",
        "patterns": [
          "Who is Friedrich Nietzsche?",
          "Who is Friedrich Nietzsche",
          "Who is Friedrich Nietzsche?",
          "Who is Friedrich Nietzsche",
          "Who is Friedrich Nietzsche?",
          "Who is Friedrich Nietzsche?"
        ],
        "responses": [
          "Friedrich Nietzsche was a German philosopher known for his works on existentialism and morality."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjerryrice",
        "patterns": [
          "Who is Jerry Rice?",
          "Who is Jerry Rice?",
          "who is jerry rice?",
          "Who is Jerry Rice?",
          "who is jerry rice",
          "Who is Jerry Rice?"
        ],
        "responses": [
          "Jerry Rice is a former professional American football player considered one of the best receivers in the NFL."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesstevejobs",
        "patterns": [
          "Who is Steve Jobs?",
          "Who is Steve Jobs?",
          "who is steve jobs?",
          "Who is Steve Jobs",
          "who is steve jobs",
          "Who is Steve Jobs?"
        ],
        "responses": [
          "Steve Jobs was an American businessman and inventor, co-founder of Apple Inc."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesrobertcollier",
        "patterns": [
          "Who is Robert Collier?",
          "Who is Robert Collier?",
          "Who is Robert Collier?",
          "Who is Robert Collier",
          "Who is Robert Collier?",
          "Who is Robert Collier?"
        ],
        "responses": [
          "Robert Collier was an American author and editor specializing in self-help books."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesnelsonmandela",
        "patterns": [
          "Who is Nelson Mandela?",
          "Who is Nelson Mandela?",
          "who is nelson mandela?",
          "Who is Nelson Mandela",
          "who is nelson mandela",
          "Who is Nelson Mandela?"
        ],
        "responses": [
          "Nelson Mandela was a South African political leader and a global symbol of the fight against apartheid."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesnealedonaldwalsch",
        "patterns": [
          "Who is Neale Donald Walsch?",
          "Who is Neale Donald Walsch?",
          "Who is Neale Donald Walsch?",
          "Who is Neale Donald Walsch",
          "who is neale donald walsch",
          "Who is Neale Donald Walsch?"
        ],
        "responses": [
          "Neale Donald Walsch is an author known for his spirituality and self-help books."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesvidalsassoon",
        "patterns": [
          "Who is Vidal Sassoon?",
          "Who is Vidal Sassoon?",
          "Who is Vidal Sassoon?",
          "Who is Vidal Sassoon?",
          "Who is Vidal Sassoon?",
          "Who is Vidal Sassoon?"
        ],
        "responses": [
          "Vidal Sassoon was a British stylist and businessman who was revolutionary in the world of hairdressing."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmahatmagandhi",
        "patterns": [
          "Who is Mahatma Gandhi?",
          "Who is Mahatma Gandhi?",
          "Who is Mahatma Gandhi?",
          "Who is Mahatma Gandhi",
          "who is mahatma gandhi",
          "Who is Mahatma Gandhi?"
        ],
        "responses": [
          "Mahatma Gandhi was an Indian political and spiritual leader, known for his nonviolent resistance."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseswaltDisney",
        "patterns": [
          "Who is Walt Disney?",
          "Who is Walt Disney?",
          "Who is Walt Disney?",
          "Who is Walt Disney",
          "who is walt disney",
          "Who is Walt Disney?"
        ],
        "responses": [
          "Walt Disney was an animator, businessman and founder of The Walt Disney Company."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesabrahamlincoln",
        "patterns": [
          "Who is Abraham Lincoln?",
          "Who is Abraham Lincoln?",
          "Who is Abraham Lincoln?",
          "Who is Abraham Lincoln?",
          "Who is Abraham Lincoln?",
          "Who is Abraham Lincoln?"
        ],
        "responses": [
          "Abraham Lincoln was the 16th President of the United States and an advocate for the abolition of slavery."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesbuddha",
        "patterns": [
          "Who is Buddha?",
          "Who is Buddha?",
          "Who is Buddha?",
          "Who is Buddha",
          "Who is Buddha?",
          "Who is Buddha?"
        ],
        "responses": [
          "Buddha was a philosopher, meditator and spiritual leader and founder of Buddhism."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasescharliechaplin",
        "patterns": [
          "Who is Charlie Chaplin?",
          "Who is Charlie Chaplin?",
          "Who is Charlie Chaplin?",
          "Who is Charlie Chaplin?",
          "Who is Charlie Chaplin?",
          "Who is Charlie Chaplin?"
        ],
        "responses": [
          "Charlie Chaplin was a British actor, comedian and filmmaker, an icon of silent film."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesalexandergrahambell",
        "patterns": [
          "Who is Alexander Graham Bell?",
          "Who is Alexander Graham Bell?",
          "Who is Alexander Graham Bell?",
          "Who is Alexander Graham Bell",
          "who is alexander graham bell",
          "Who is Alexander Graham Bell?"
        ],
        "responses": [
          "Alexander Graham Bell was a scientist and inventor known for patenting the telephone."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasespablopicasso",
        "patterns": [
          "Who is Pablo Picasso?",
          "Who is Pablo Picasso?",
          "Who is Pablo Picasso?",
          "Who is Pablo Picasso?",
          "Who is Pablo Picasso?",
          "Who is Pablo Picasso?"
        ],
        "responses": [
          "Pablo Picasso was a Spanish painter and sculptor, co-founder of Cubism."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseslancesrmstrong",
        "patterns": [
          "Who is Lance Armstrong?",
          "Who is Lance Armstrong?",
          "Who is Lance Armstrong?",
          "Who is Lance Armstrong",
          "Who is Lance Armstrong?",
          "Who is Lance Armstrong?"
        ],
        "responses": [
          "Lance Armstrong is an American former cyclist known for his achievements and controversies in cycling."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmarieanneWilliamson",
        "patterns": [
          "Who is Marianne Williamson?",
          "Who is Marianne Williamson?",
          "Who is Marianne Williamson?",
          "Who is Marianne Williamson?",
          "who is marianne williamson",
          "who is marianne williamson"
        ],
        "responses": [
          "Marianne Williamson is an American author, activist, and motivational speaker."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesconfucio",
        "patterns": [
          "Who is Confucius?",
          "Who is Confucius?",
          "Who is Confucius?",
          "Who is Confucius",
          "Who is Confucius",
          "Who is Confucius?"
        ],
        "responses": [
          "Confucius was a Chinese philosopher whose teachings influenced Asian culture and morality."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesaristoteles",
        "patterns": [
          "Who is Aristotle?",
          "Who is Aristotle?",
          "Who is Aristotle?",
          "Who is Aristotle?",
          "Who is Aristotle?",
          "Who is Aristotle?"
        ],
        "responses": [
          "Aristotle was a Greek philosopher, disciple of Plato and teacher of Alexander the Great."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmarieforleo",
        "patterns": [
          "Who is Marie Forleo?",
          "Who is Marie Forleo?",
          "Who is Marie Forleo?",
          "Who is Marie Forleo?",
          "Who is Marie Forleo?",
          "Who is Marie Forleo?"
        ],
        "responses": [
          "Marie Forleo is an author and entrepreneur known for her motivational advice."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasescharlesrswindoll",
        "patterns": [
          "Who is Charles R. Swindoll?",
          "Who is Charles R. Swindoll?",
          "Who is Charles R. Swindoll?",
          "Who is Charles R. Swindoll",
          "who is charles r. swindoll",
          "who is charles r. swindoll"
        ],
        "responses": [
          "Charles R. Swindoll is a Christian author and pastor known for his self-help books."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseselberthubbard",
        "patterns": [
          "Who is Elbert Hubbard?",
          "Who is Elbert Hubbard?",
          "Who is Elbert Hubbard?",
          "Who is Elbert Hubbard",
          "Who is Elbert Hubbard?",
          "Who is Elbert Hubbard?"
        ],
        "responses": [
          "Elbert Hubbard was an American writer, editor, and philosopher."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesrobertfkennedy",
        "patterns": [
          "Who is Robert F. Kennedy?",
          "Who is Robert F. Kennedy?",
          "Who is Robert F. Kennedy?",
          "Who is Robert F. Kennedy?",
          "Who is Robert F. Kennedy?",
          "Who is Robert F. Kennedy?"
        ],
        "responses": [
          "Robert F. Kennedy was an American politician and lawyer, brother of President John F. Kennedy."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_fraseswinstonchurchill",
        "patterns": [
          "Who is Winston Churchill?",
          "Who is Winston Churchill?",
          "Who is Winston Churchill?",
          "Who is Winston Churchill",
          "who is winston churchill",
          "Who is Winston Churchill?"
        ],
        "responses": [
          "Winston Churchill was a statesman, writer and Prime Minister of the United Kingdom during World War II."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesfranklindroosevelt",
        "patterns": [
          "Who is Franklin D. Roosevelt?",
          "Who is Franklin D. Roosevelt",
          "Who is Franklin D. Roosevelt?",
          "Who is Franklin D. Roosevelt",
          "Who is Franklin D. Roosevelt?",
          "Who is Franklin D. Roosevelt?"
        ],
        "responses": [
          "Franklin D. Roosevelt was the 32nd President of the United States, leading the country through the Great Depression and World War II."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasestheodoreroosevelt",
        "patterns": [
          "Who is Theodore Roosevelt?",
          "Who is Theodore Roosevelt?",
          "Who is Theodore Roosevelt?",
          "Who is Theodore Roosevelt",
          "Who is Theodore Roosevelt?",
          "Who is Theodore Roosevelt?"
        ],
        "responses": [
          "Theodore Roosevelt was the 26th President of the United States and an advocate of conservationism."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesmariateresa",
        "patterns": [
          "Who is Mother Teresa?",
          "Who is Mother Teresa?",
          "Who is Mother Teresa?",
          "Who is Mother Teresa",
          "Who is Mother Teresa?",
          "Who is Mother Teresa?"
        ],
        "responses": [
          "Mother Teresa was a Catholic nun and missionary, known for her humanitarian work."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasesjimrohn",
        "patterns": [
          "Who is Jim Rohn?",
          "Who is Jim Rohn?",
          "Who is Jim Rohn?",
          "Who is Jim Rohn",
          "who is jim rohn",
          "who is jim rohn"
        ],
        "responses": [
          "Jim Rohn was an entrepreneur and motivator known for his teachings on personal development."
        ]
      },
      {
        "tag": "consulta_preguntas_antetiores_frasesSamLevenson",
        "patterns": [
          "Who is Sam Levenson?",
          "Who is Sam Levenson?",
          "Who is Sam Levenson?",
          "Who is Sam Levenson?",
          "who is sam levenson",
          "Who is Sam Levenson?"
        ],
        "responses": [
          "Sam Levenson was an American comedian, writer, and professor."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_frasessaintexupery",
        "patterns": [
          "Who is Antoine de Saint Exupéry?",
          "Who is Antoine de Saint Exupéry?",
          "Who is Antoine de Saint Exupéry?",
          "Who is Antoine de Saint Exupéry?",
          "Who is Antoine de Saint Exupéry?",
          "Who is Antoine de Saint Exupéry?"
        ],
        "responses": [
          "Antoine de Saint Exupéry was a French writer and aviator, author of 'The Little Prince'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroscienaniosdesoledad",
        "patterns": [
          "What is 100 Years of Solitude about?",
          "What is 100 Years of Solitude about?",
          "What is 100 Years of Solitude about?",
          "What is 100 years of solitude about?"
        ],
        "responses": [
          "'100 Years of Solitude' is about the story of the Buendía family in the fictional town of Macondo. It is a masterpiece of magical realism."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgabrielgarciamarquez",
        "patterns": [
          "Who is Gabriel García Márquez?",
          "Who is Gabriel Garcia Marquez?",
          "Who is Gabriel García Márquez?",
          "Who is Gabriel Garcia Marquez?",
          "Who is Gabriel Garcia Marquez?",
          "Who is Gabriel Garcia Marquez?"
        ],
        "responses": [
          "Gabriel García Márquez was a Colombian writer and Nobel Prize winner in Literature known for his unique style and iconic works."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroselprincipito",
        "patterns": [
          "What is The Little Prince about?",
          "What is The Little Prince about?",
          "What is The Little Prince about?",
          "What is The Little Prince about?"
        ],
        "responses": [
          "'The Little Prince' is a book by French writer Antoine de Saint-Exupéry, a classic work of children's literature. It is about a boy who travels to different planets and learns lessons about life."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librossaintexupery",
        "patterns": [
          "Who is Antoine de Saint-Exupéry?",
          "Who is Antoine de Saint-Exupéry?",
          "Who is Antoine de Saint-Exupéry?",
          "Who is Antoine de Saint-Exupéry?",
          "Who is Antoine de Saint-Exupéry?",
          "Who is Antoine de Saint-Exupéry?"
        ],
        "responses": [
          "Antoine de Saint-Exupéry was a French writer, aviator and philosopher known for his work 'The Little Prince'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosmilnovescientosochentaicuatro",
        "patterns": [
          "What is 1984 about?",
          "What is 1984 about?",
          "What is 1984 about?",
          "What is 1984 about?"
        ],
        "responses": [
          "'1984' is a dystopian novel by British writer George Orwell, which reflects on totalitarianism and state surveillance."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgeorgeorwell",
        "patterns": [
          "Who is George Orwell?",
          "Who is George Orwell?",
          "Who is George Orwell?",
          "Who is George Orwell",
          "Who is George Orwell?",
          "Who is George Orwell?"
        ],
        "responses": [
          "George Orwell was a British writer and journalist known for his dystopian novels such as '1984' and 'Animal Farm'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosdonquijote",
        "patterns": [
          "What is Don Quixote of La Mancha about?",
          "What is Don Quixote of La Mancha about?",
          "What is Don Quixote of La Mancha about?",
          "What is Don Quixote of La Mancha about?"
        ],
        "responses": [
          "'Don Quixote de la Mancha' is a novel by the Spanish writer Miguel de Cervantes, considered one of the best works of universal literature."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosjaneausten",
        "patterns": [
          "Who is Jane Austen?",
          "Who is Jane Austen?",
          "Who is Jane Austen?",
          "Who is Jane Austen",
          "who is jane austen",
          "Who is Jane Austen?"
        ],
        "responses": [
          "Jane Austen was a British writer known for her romance and costuming novels such as 'Pride and Prejudice'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosdune",
        "patterns": [
          "What is Dune about?",
          "What is Dune about?",
          "What is Dune about?",
          "What is Dune about?"
        ],
        "responses": [
          "'Dune' is a science fiction novel by American writer Frank Herbert, considered a masterpiece of the genre."
        ]
      },
      {
        "tag": "consulta_preguntas_antetiores_librosfrankherbert",
        "patterns": [
          "Who is Frank Herbert?",
          "Who is Frank Herbert",
          "Who is Frank Herbert?",
          "Who is Frank Herbert",
          "Who is Frank Herbert?",
          "Who is Frank Herbert?"
        ],
        "responses": [
          "Frank Herbert was an American science fiction writer known for his 'Dune' saga."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosalquimista",
        "patterns": [
          "What is The Alchemist about?",
          "What is The Alchemist about?",
          "What is The Alchemist about?",
          "What is The Alchemist about?"
        ],
        "responses": [
          "'The Alchemist' is a novel by Brazilian writer Paulo Coelho, which reflects on destiny and personal quest."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroscoelho",
        "patterns": [
          "Who is Paulo Coelho?",
          "Who is Paulo Coelho?",
          "Who is Paulo Coelho?",
          "Who is Paulo Coelho?",
          "Who is Paulo Coelho?",
          "Who is Paulo Coelho?"
        ],
        "responses": [
          "Paulo Coelho is a Brazilian writer known for his work 'The Alchemist' and his self-help and spirituality books."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosjuegodetronos",
        "patterns": [
          "What is Game of Thrones about?",
          "What is Game of Thrones about?",
          "What is Game of Thrones about?",
          "What is Game of Thrones about?"
        ],
        "responses": [
          "'Game of Thrones' is a series of epic fantasy novels written by George R.R. Martin, which inspired the television series 'Game of Thrones'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosgeorgerrmartin",
        "patterns": [
          "Who is George R.R. Martin?",
          "Who is George R.R. Martin?",
          "Who is George R.R. Martin?",
          "Who is George R.R. Martin",
          "who is george r.r. martin",
          "who is george r.r. martin"
        ],
        "responses": [
          "George R.R. Martin is an American writer known for his 'A Song of Ice and Fire' series of novels, which includes 'Game of Thrones'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosorgulloyprejuicio",
        "patterns": [
          "What is Pride and Prejudice about?",
          "What is Pride and Prejudice about?",
          "What is Pride and Prejudice about?",
          "What is Pride and Prejudice about?"
        ],
        "responses": [
          "'Pride and Prejudice' is a novel by British writer Jane Austen, a classic work of romantic literature."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosmatararuisenor",
        "patterns": [
          "What is To Kill a Mockingbird about?",
          "What is To Kill a Mockingbird about?",
          "What is To Kill a Mockingbird about?",
          "What is To Kill a Mockingbird about?"
        ],
        "responses": [
          "'To Kill a Mockingbird' is a novel by American writer Harper Lee, which addresses themes such as racial injustice and childhood."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librosHarperLee",
        "patterns": [
          "Who is Harper Lee?",
          "Who is Harper Lee?",
          "Who is Harper Lee?",
          "Who is Harper Lee?",
          "who is harper lee",
          "Who is Harper Lee?"
        ],
        "responses": [
          "Harper Lee was an American writer best known for her Pulitzer Prize-winning novel To Kill a Mockingbird."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_libroschicatren",
        "patterns": [
          "What is The Girl on the Train about?",
          "What is The Girl on the Train about?",
          "What is the girl on the train about?",
          "What is the girl on the train about?"
        ],
        "responses": [
          "'The Girl on the Train' is a novel by British writer Paula Hawkins, a psychological thriller about a woman obsessed with a partner."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_librospauhawkins",
        "patterns": [
          "Who is Paula Hawkins?",
          "Who is Paula Hawkins?",
          "Who is Paula Hawkins?",
          "Who is Paula Hawkins?",
          "who is paula hawkins",
          "who is paula hawkins"
        ],
        "responses": [
          "Paula Hawkins is a British writer known for her novel 'The Girl on the Train', an international bestseller."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspadrino",
        "patterns": [
          "What is The Godfather about?",
          "What is The Godfather about?",
          "What is The Godfather about?",
          "What is The Godfather about?"
        ],
        "responses": [
          "'The Godfather' is a film directed by Francis Ford Coppola that tells the story of the Corleone family in the world of the mafia."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasforrestgump",
        "patterns": [
          "What is Forrest Gump about?",
          "What is Forrest Gump about?",
          "What is Forrest Gump about?",
          "What is Forrest Gump about?"
        ],
        "responses": [
          "'Forrest Gump' is a film directed by Robert Zemeckis that follows the life of an intellectually disabled man in the United States."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculastomhanks",
        "patterns": [
          "Who is Tom Hanks?",
          "Who is Tom Hanks?",
          "who is tom hanks?",
          "Who is Tom Hanks",
          "who is tom hanks",
          "Who is Tom Hanks?"
        ],
        "responses": [
          "Tom Hanks is an American actor and producer known for his roles in films such as 'Forrest Gump' and 'Cast Away'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasmatrix",
        "patterns": [
          "What is Matrix about?",
          "What is Matrix about?",
          "What is Matrix about?",
          "What is Matrix about?"
        ],
        "responses": [
          "'The Matrix' is a science fiction film written and directed by the Wachowski sisters, which reflects on reality and simulation."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasciudaddios",
        "patterns": [
          "What is City of God about?",
          "What is City of God about?",
          "What is City of God about?",
          "What is City of God about?"
        ],
        "responses": [
          "'City of God' is a Brazilian film directed by Fernando Meirelles and Kátia Lund that portrays life in the favelas of Rio de Janeiro."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaselorigen",
        "patterns": [
          "What is The Origin about?",
          "What is The Origin about?",
          "What is The Origin about?",
          "What is The Origin about?"
        ],
        "responses": [
          "'Inception' is a science fiction film written and directed by Christopher Nolan, which explores dreams and reality."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaschristophernolan",
        "patterns": [
          "Who is Christopher Nolan?",
          "Who is Christopher Nolan?",
          "Who is Christopher Nolan?",
          "Who is Christopher Nolan",
          "who is christopher nolan",
          "Who is Christopher Nolan?"
        ],
        "responses": [
          "Christopher Nolan is a British film director known for films such as 'Inception', 'The Dark Knight' and 'Interstellar'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaslistashindler",
        "patterns": [
          "What is Schindler's List about?",
          "What is Schindler's List about?",
          "What is Schindler's List about?",
          "What is Schindler's List about?"
        ],
        "responses": [
          "'Schindler's List' is a film directed by Steven Spielberg that tells the true story of a businessman who saved Jews during the Holocaust."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasstevenspielberg",
        "patterns": [
          "Who is Steven Spielberg?",
          "Who is Steven Spielberg?",
          "Who is Steven Spielberg?",
          "Who is Steven Spielberg",
          "who is steven spielberg",
          "who is steven spielberg"
        ],
        "responses": [
          "Steven Spielberg is an American film director known for films such as 'Jaws', 'E.T.' and 'Jurassic Park'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasclubpelea",
        "patterns": [
          "What is Fight Club about?",
          "What is Fight Club about?",
          "What is Fight Club about?",
          "What is fight club about?"
        ],
        "responses": [
          "'Fight Club' is a film directed by David Fincher that reflects on masculinity and consumerism in contemporary society."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasdavidfincher",
        "patterns": [
          "Who is David Fincher?",
          "Who is David Fincher?",
          "Who is David Fincher?",
          "Who is David Fincher?",
          "who is david fincher",
          "Who is David Fincher?"
        ],
        "responses": [
          "David Fincher is an American film director known for films such as 'Fight Club' and 'Gone Girl'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculascaballeronoche",
        "patterns": [
          "What is The Dark Knight about?",
          "What is The Dark Knight about?",
          "What is The Dark Knight about?",
          "What is The Dark Knight about?"
        ],
        "responses": [
          "'The Dark Knight' is a film directed by Christopher Nolan that follows the story of the superhero Batman and his confrontation with the Joker."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasheadledger",
        "patterns": [
          "Who is Heath Ledger?",
          "Who is Heath Ledger",
          "who is Heath Ledger?",
          "Who is Heath Ledger",
          "Who is Heath Ledger?",
          "Who is Heath Ledger?"
        ],
        "responses": [
          "Heath Ledger was an Australian actor best known for his role as the Joker in 'The Dark Knight', for which he won a posthumous Oscar."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasinterstellar",
        "patterns": [
          "What is Interstellar about?",
          "What is Interstellar about?",
          "What is Interstellar about?",
          "What is Interstellar about?"
        ],
        "responses": [
          "'Interstellar' is a science fiction film directed by Christopher Nolan that explores interstellar travel and the relationship between time and space."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_películasenioranillos",
        "patterns": [
          "What is The Lord of the Rings about?",
          "What is The Lord of the Rings about?",
          "What is the Lord of the Rings about?",
          "What is The Lord of the Rings about?"
        ],
        "responses": [
          "'The Lord of the Rings' is a trilogy of films directed by Peter Jackson based on the work of J.R.R. Tolkien, which tells the story of the struggle for the One Ring."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspeterjackson",
        "patterns": [
          "Who is Peter Jackson?",
          "Who is Peter Jackson?",
          "who is peter jackson?",
          "Who is Peter Jackson",
          "Who is Peter Jackson?",
          "Who is Peter Jackson?"
        ],
        "responses": [
          "Peter Jackson is a New Zealand film director known for his work on 'The Lord of the Rings' trilogy and 'The Hobbit'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculatolkien",
        "patterns": [
          "Who is J.R.R. Tolkien?",
          "Who is J.R.R. Tolkien?",
          "Who is J.R.R. Tolkien?",
          "Who is J.R.R. Tolkien?",
          "who is j.r.r. tolkien",
          "Who is J.R.R. Tolkien?"
        ],
        "responses": [
          "J.R.R. Tolkien was a British writer and philologist known for his work 'The Lord of the Rings' and 'The Hobbit'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspobreangelito",
        "patterns": [
          "What is My Poor Little Angel about?",
          "What is My Poor Little Angel about?",
          "What is My Poor Little Angel about?",
          "What is My Poor Little Angel about?"
        ],
        "responses": [
          "'Home Alone' is a Christmas comedy film directed by Chris Columbus that follows the adventures of a boy who is left home alone."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaspesadillnavidad",
        "patterns": [
          "What is The Nightmare Before Christmas about?",
          "What is The Nightmare Before Christmas about?",
          "What is the Nightmare Before Christmas about?",
          "What is the Nightmare Before Christmas about?"
        ],
        "responses": [
          "'The Nightmare Before Christmas' is an animated film directed by Henry Selick and produced by Tim Burton, which combines Halloween and Christmas in a unique story."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculaswaltermitty",
        "patterns": [
          "What is The Amazing Life of Walter Mitty about?",
          "What is The Amazing Life of Walter Mitty about?",
          "What is The Incredible Life of Walter Mitty about?",
          "What is The Incredible Life of Walter Mitty about?"
        ],
        "responses": [
          "'The Extraordinary Life of Walter Mitty' is a film directed by Ben Stiller that follows the life of a man who daydreams and seeks adventure."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasbenstiller",
        "patterns": [
          "Who is Ben Stiller?",
          "Who is Ben Stiller?",
          "who is ben stiller?",
          "Who is Ben Stiller",
          "who is ben stiller",
          "Who is Ben Stiller?"
        ],
        "responses": [
          "Ben Stiller is an American actor, comedian and director known for films such as 'Zoolander' and 'The Extraordinary Life of Walter Mitty'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_peliculasarcane",
        "patterns": [
          "What is Arcane about?",
          "What is Arcane about?",
          "What is Arcane about?",
          "What Arcane is about"
        ],
        "responses": [
          "'Arcane' is a Netflix animated series based on the video game 'League of Legends', which combines action, drama and mystery."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicadarkside",
        "patterns": [
          "What is Dark Side of the Moon about?",
          "What is Dark Side of the Moon about?",
          "What is Dark Side of the Moon about?",
          "What is Dark Side of the Moon about?"
        ],
        "responses": [
          "'Dark Side of the Moon' is the eighth studio album by British band Pink Floyd, known for its psychedelic concept and sound."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicapinkfloyd",
        "patterns": [
          "Who is Pink Floyd?",
          "Who is Pink Floyd?",
          "who is pink floyd?",
          "Who is Pink Floyd",
          "who is pink floyd",
          "Who is Pink Floyd?"
        ],
        "responses": [
          "Pink Floyd is a British progressive and psychedelic rock band known for albums such as 'The Dark Side of the Moon' and 'The Wall'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicathriller",
        "patterns": [
          "What is Thriller about?",
          "What is Thriller about?",
          "What is Thriller about?",
          "What is Thriller about?"
        ],
        "responses": [
          "'Thriller' is Michael Jackson's sixth studio album, considered one of the best-selling in history."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicamichaeljackson",
        "patterns": [
          "Who is Michael Jackson?",
          "Who is Michael Jackson?",
          "who is michael jackson?",
          "Who is Michael Jackson?",
          "who is michael jackson",
          "Who is Michael Jackson?"
        ],
        "responses": [
          "Michael Jackson was an American singer, songwriter and dancer known as the 'King of Pop'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicabohemiarhapsody",
        "patterns": [
          "What is Bohemian Rhapsody about?",
          "What is Bohemian Rhapsody about?",
          "What is Bohemian Rhapsody about?",
          "What is Bohemian Rhapsody about?"
        ],
        "responses": [
          "'Bohemian Rhapsody' is a song by the British band Queen, known for its unique structure and commercial success."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaqueen",
        "patterns": [
          "Who is Queen?",
          "Who is Queen?",
          "who is Queen?",
          "Who is Queen",
          "Who is queen",
          "Who is queen?"
        ],
        "responses": [
          "Queen is a British rock band formed by Freddie Mercury, Brian May, Roger Taylor and John Deacon, known for hits such as 'Bohemian Rhapsody'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicacancionanimal",
        "patterns": [
          "What is Animal Song about?",
          "What is Animal Song about?",
          "What is Animal Song about?",
          "What Animal Song is about"
        ],
        "responses": [
          "'Canción Animal' is the fourth studio album by the Argentine band Soda Stereo, considered one of the best in the history of Spanish rock."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicasodastereo",
        "patterns": [
          "Who is Soda Stereo?",
          "Who is Soda Stereo?",
          "Who is Soda Stereo?",
          "Who is Soda Stereo",
          "Who is Soda Stereo?",
          "Who is Soda Stereo?"
        ],
        "responses": [
          "Soda Stereo was an Argentine rock band formed by Gustavo Cerati, Zeta Bosio and Charly Alberti, known for their influence on Latin music."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaabbeyroad",
        "patterns": [
          "What is Abbey Road about?",
          "What is Abbey Road about?",
          "What is Abbey Road about?",
          "What is Abbey Road about?"
        ],
        "responses": [
          "'Abbey Road' is the eleventh studio album by The Beatles, known for its iconic cover and songs such as 'Come Together' and 'Here Comes the Sun'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicabeatles",
        "patterns": [
          "Who are The Beatles?",
          "Who is The Beatles",
          "Who are The Beatles?",
          "Who is The Beatles",
          "who is the beatles",
          "Who is the Beatles?"
        ],
        "responses": [
          "The Beatles were a British rock band formed by John Lennon, Paul McCartney, George Harrison and Ringo Starr, considered one of the most influential in history."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicafromzero",
        "patterns": [
          "What is From Zero about?",
          "What is From Zero about?",
          "What is From Zero about?",
          "What is From Zero about?"
        ],
        "responses": [
          "'From Zero' is Linkin Park's seventh studio album, released in 2024 with new vocalist Emily Armstrong."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicalinkinpark",
        "patterns": [
          "Who is Linkin Park?",
          "Who is Linkin Park?",
          "Who is Linkin Park?",
          "Who is Linkin Park",
          "who is linkin park",
          "Who is Linkin Park?"
        ],
        "responses": [
          "Linkin Park is an American alternative rock and nu metal band known for hits such as 'In the End' and 'Numb'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaemptinesmachine",
        "patterns": [
          "What is The Emptiness Machine about?",
          "What is The Emptiness Machine about?",
          "What is The Emptiness Machine about?",
          "What is The Emptiness Machine about?"
        ],
        "responses": [
          "'The Emptiness Machine' is a song from Linkin Park's album 'From Zero', which stands out for its energy and emotional lyrics."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicaheavysisthecrown",
        "patterns": [
          "What is Heavys Is the Crown about?",
          "What is Heavys Is the Crown about?",
          "What Heavys Is the Crown is about",
          "What Heavys Is the Crown is about"
        ],
        "responses": [
          "'Heavy Is the Crown' is a song from Linkin Park's album 'From Zero', which combines elements of rock and electronica."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicawakemeup",
        "patterns": [
          "What is Wake me up about?",
          "What is Wake me up about?",
          "What is Wake me up about?",
          "What is Wake me up about?"
        ],
        "responses": [
          "'Wake me up' is a song by Swedish DJ and producer Avicii, known for its mix of electronic and country music."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicavicci",
        "patterns": [
          "Who is Avicci?",
          "Who is Avicci?",
          "Who is Avicci?",
          "Who is Avicci",
          "who is avicci",
          "who is avicci"
        ],
        "responses": [
          "Avicii was a Swedish DJ and producer known for hits like 'Wake Me Up' and 'Hey Brother'."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicamameilleureennemie",
        "patterns": [
          "What is Ma Meilleure Ennemie about?",
          "What is Ma Meilleure Ennemie about?",
          "What is Ma Meilleure Ennemie about?",
          "What is Ma Meilleure Ennemie about?"
        ],
        "responses": [
          "'Ma Meilleure Ennemie' is a song by Stromae and Pomme, released for the second season of Arcane, it is a very romantic and melodic song."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicastromae",
        "patterns": [
          "Who is Stromae?",
          "Who is Stromae?",
          "Who is Stromae?",
          "Who is Stromae?",
          "who is stromae",
          "who is stromae"
        ],
        "responses": [
          "Stromae is a Belgian singer, songwriter and producer known for his eclectic style and thoughtful lyrics."
        ]
      },
      {
        "tag": "consulta_preguntas_anteriores_musicapomme",
        "patterns": [
          "Who is Pomme?",
          "Who is Pomme?",
          "Who is Pomme?",
          "Who is Pomme?",
          "who is pomme",
          "who is pomme"
        ],
        "responses": [
          "Pomme is a French singer-songwriter known for her indie and folk style."
        ]
      },
      {
        "tag": "nodejs_for_loop",
        "patterns": [
          "Crea un ciclo for en Node.js",
          "Dame un ejemplo de un ciclo for en Node.js",
          "Cómo hacer un ciclo for en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de un ciclo for en Node.js: \n\nfor (let i = 0; i < arr.length; i++) {\n  // código aquí\n}"
        ]
      },
      {
        "tag": "python_for_loop",
        "patterns": [
          "Crea un ciclo for en Python",
          "Dame un ejemplo de un ciclo for en Python",
          "Cómo hacer un ciclo for en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de un ciclo for en Python: \n\nfor i in range(len(arr)):\n  # código aquí"
        ]
      },
      {
        "tag": "nodejs_while_loop",
        "patterns": [
          "Crea un ciclo while en Node.js",
          "Dame un ejemplo de un ciclo while en Node.js",
          "Cómo hacer un ciclo while en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de un ciclo while en Node.js: \n\nlet i = 0;\nwhile (i < arr.length) {\n  // código aquí\n  i++;\n}"
        ]
      },
      {
        "tag": "python_while_loop",
        "patterns": [
          "Crea un ciclo while en Python",
          "Dame un ejemplo de un ciclo while en Python",
          "Cómo hacer un ciclo while en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de un ciclo while en Python: \n\ni = 0\nwhile i < len(arr):\n  # código aquí\n  i += 1"
        ]
      },
      {
        "tag": "nodejs_bubble_sort",
        "patterns": [
          "Dame el código de un bubble sort en Node.js",
          "Cómo implementar un bubble sort en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de bubble sort en Node.js: \n\nfunction bubbleSort(arr) {\n  let n = arr.length;\n  for (let i = 0; i < n; i++) {\n    let swapped = false;\n    for (let j = 0; j < n - i - 1; j++) {\n      if (arr[j] > arr[j + 1]) {\n        [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]];\n        swapped = true;\n      }\n    }\n  }\n}"
        ]
      },
      {
        "tag": "python_bubble_sort",
        "patterns": [
          "Dame el código de un bubble sort en Python",
          "Cómo implementar un bubble sort en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de bubble sort en Python: \n\ndef bubble_sort(arr):\n  n = len(arr)\n  for i in range(n):\n    swapped = False\n    for j in range(0, n-i-1):\n      if arr[j] > arr[j+1]:\n        arr[j], arr[j+1] = arr[j+1], arr[j]\n        swapped = True"
        ]
      },
      {
        "tag": "nodejs_bubble_sort_swap_line",
        "patterns": [
          "Dame la línea donde se realiza el intercambio en bubble sort de Node.js",
          "Dónde está el intercambio en el código de bubble sort en Node.js"
        ],
        "responses": [
          "La línea exacta donde se realiza el intercambio en bubble sort es: \n\n[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]"
        ]
      },
      {
        "tag": "python_bubble_sort_swap_line",
        "patterns": [
          "Dame la línea donde se realiza el intercambio en bubble sort de Python",
          "Dónde está el intercambio en el código de bubble sort en Python"
        ],
        "responses": [
          "La línea exacta donde se realiza el intercambio en bubble sort es: \n\narr[j], arr[j+1] = arr[j+1], arr[j]"
        ]
      },
      {
        "tag": "nodejs_simple_function",
        "patterns": [
          "Crea una función simple en Node.js",
          "Dame un ejemplo de una función en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función simple en Node.js: \n\nfunction sayHello() {\n  console.log('Hola Mundo');\n}"
        ]
      },
      {
        "tag": "python_simple_function",
        "patterns": [
          "Crea una función simple en Python",
          "Dame un ejemplo de una función en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función simple en Python: \n\ndef say_hello():\n  print('Hola Mundo')"
        ]
      },
      {
        "tag": "nodejs_factorial",
        "patterns": [
          "Dame el código de una función para calcular el factorial en Node.js",
          "Cómo implementar una función de factorial en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función para calcular el factorial en Node.js: \n\nfunction factorial(n) {\n  if (n === 0 || n === 1) {\n    return 1;\n  }\n  return n * factorial(n - 1);\n}"
        ]
      },
      {
        "tag": "python_factorial",
        "patterns": [
          "Dame el código de una función para calcular el factorial en Python",
          "Cómo implementar una función de factorial en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función para calcular el factorial en Python: \n\ndef factorial(n):\n  if n == 0 or n == 1:\n    return 1\n  return n * factorial(n - 1)"
        ]
      },
      {
        "tag": "nodejs_sum_array",
        "patterns": [
          "Dame el código para sumar los elementos de un array en Node.js",
          "Cómo sumar los elementos de un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo sumar los elementos de un array en Node.js: \n\nfunction sumArray(arr) {\n  return arr.reduce((acc, val) => acc + val, 0);\n}"
        ]
      },
      {
        "tag": "python_sum_array",
        "patterns": [
          "Dame el código para sumar los elementos de un array en Python",
          "Cómo sumar los elementos de un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo sumar los elementos de un array en Python: \n\ndef sum_array(arr):\n  return sum(arr)"
        ]
      },
      {
        "tag": "nodejs_fibonacci",
        "patterns": [
          "Dame el código de una función para generar la secuencia de Fibonacci en Node.js",
          "Cómo implementar una función de Fibonacci en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función para generar la secuencia de Fibonacci en Node.js: \n\nfunction fibonacci(n) {\n  if (n <= 1) return n;\n  return fibonacci(n - 1) + fibonacci(n - 2);\n}"
        ]
      },
      {
        "tag": "python_fibonacci",
        "patterns": [
          "Dame el código de una función para generar la secuencia de Fibonacci en Python",
          "Cómo implementar una función de Fibonacci en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una función para generar la secuencia de Fibonacci en Python: \n\ndef fibonacci(n):\n  if n <= 1:\n    return n\n  return fibonacci(n - 1) + fibonacci(n - 2)"
        ]
      },
      {
        "tag": "nodejs_reverse_string",
        "patterns": [
          "Dame el código para invertir un string en Node.js",
          "Cómo invertir un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Node.js: \n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}"
        ]
      },
      {
        "tag": "python_reverse_string",
        "patterns": [
          "Dame el código para invertir un string en Python",
          "Cómo invertir un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Python: \n\ndef reverse_string(s):\n  return s[::-1]"
        ]
      },
      {
        "tag": "nodejs_palindrome",
        "patterns": [
          "Dame el código para verificar si un string es un palíndromo en Node.js",
          "Cómo verificar si un string es un palíndromo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un string es un palíndromo en Node.js: \n\nfunction isPalindrome(str) {\n  const cleaned = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();\n  const reversed = cleaned.split('').reverse().join('');\n  return cleaned === reversed;\n}"
        ]
      },
      {
        "tag": "python_palindrome",
        "patterns": [
          "Dame el código para verificar si un string es un palíndromo en Python",
          "Cómo verificar si un string es un palíndromo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un string es un palíndromo en Python: \n\ndef is_palindrome(s):\n  cleaned = ''.join(e for e in s if e.isalnum()).lower()\n  return cleaned == cleaned[::-1]"
        ]
      },
      {
        "tag": "nodejs_prime_number",
        "patterns": [
          "Dame el código para verificar si un número es primo en Node.js",
          "Cómo verificar si un número es primo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Node.js: \n\nfunction isPrime(num) {\n  if (num <= 1) return false;\n  for (let i = 2; i < num; i++) {\n    if (num % i === 0) return false;\n  }\n  return true;\n}"
        ]
      },
      {
        "tag": "python_prime_number",
        "patterns": [
          "Dame el código para verificar si un número es primo en Python",
          "Cómo verificar si un número es primo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Python: \n\ndef is_prime(num):\n  if num <= 1:\n    return False\n  for i in range(2, num):\n    if num % i == 0:\n      return False\n  return True"
        ]
      },
      {
        "tag": "nodejs_fizzbuzz",
        "patterns": [
          "Dame el código para FizzBuzz en Node.js",
          "Cómo hacer FizzBuzz en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de FizzBuzz en Node.js: \n\nfunction fizzBuzz(n) {\n  for (let i = 1; i <= n; i++) {\n    if (i % 3 === 0 && i % 5 === 0) console.log('FizzBuzz');\n    else if (i % 3 === 0) console.log('Fizz');\n    else if (i % 5 === 0) console.log('Buzz');\n    else console.log(i);\n  }\n}"
        ]
      },
      {
        "tag": "python_fizzbuzz",
        "patterns": [
          "Dame el código para FizzBuzz en Python",
          "Cómo hacer FizzBuzz en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de FizzBuzz en Python: \n\ndef fizz_buzz(n):\n  for i in range(1, n+1):\n    if i % 3 == 0 and i % 5 == 0:\n      print('FizzBuzz')\n    elif i % 3 == 0:\n      print('Fizz')\n    elif i % 5 == 0:\n      print('Buzz')\n    else:\n      print(i)"
        ]
      },
      {
        "tag": "nodejs_swap_variables",
        "patterns": [
          "Dame el código para intercambiar dos variables en Node.js",
          "Cómo intercambiar dos variables en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo intercambiar dos variables en Node.js: \n\nlet a = 5, b = 10;\n[a, b] = [b, a];\nconsole.log(a, b);"
        ]
      },
      {
        "tag": "python_swap_variables",
        "patterns": [
          "Dame el código para intercambiar dos variables en Python",
          "Cómo intercambiar dos variables en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo intercambiar dos variables en Python: \n\na, b = 5, 10\na, b = b, a\nprint(a, b)"
        ]
      },
      {
        "tag": "nodejs_odd_even",
        "patterns": [
          "Dame el código para verificar si un número es par o impar en Node.js",
          "Cómo verificar si un número es par o impar en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es par o impar en Node.js: \n\nfunction oddEven(num) {\n  if (num % 2 === 0) console.log('Par');\n  else console.log('Impar');\n}"
        ]
      },
      {
        "tag": "python_odd_even",
        "patterns": [
          "Dame el código para verificar si un número es par o impar en Python",
          "Cómo verificar si un número es par o impar en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es par o impar en Python: \n\ndef odd_even(num):\n  if num % 2 == 0:\n    print('Par')\n  else:\n    print('Impar')"
        ]
      },
      {
        "tag": "nodejs_count_vowels",
        "patterns": [
          "Dame el código para contar las vocales de un string en Node.js",
          "Cómo contar las vocales de un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo contar las vocales de un string en Node.js: \n\nfunction countVowels(str) {\n  const vowels = 'aeiouAEIOU';\n  return str.split('').filter(char => vowels.includes(char)).length;\n}"
        ]
      },
      {
        "tag": "python_count_vowels",
        "patterns": [
          "Dame el código para contar las vocales de un string en Python",
          "Cómo contar las vocales de un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo contar las vocales de un string en Python: \n\ndef count_vowels(s):\n  vowels = 'aeiouAEIOU'\n  return len([char for char in s if char in vowels])"
        ]
      },
      {
        "tag": "nodejs_reverse_array",
        "patterns": [
          "Dame el código para invertir un array en Node.js",
          "Cómo invertir un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un array en Node.js: \n\nfunction reverseArray(arr) {\n  return arr.reverse();\n}"
        ]
      },
      {
        "tag": "python_reverse_array",
        "patterns": [
          "Dame el código para invertir un array en Python",
          "Cómo invertir un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un array en Python: \n\ndef reverse_array(arr):\n  return arr[::-1]"
        ]
      },
      {
        "tag": "python_count_words",
        "patterns": [
          "Dame el código para contar las palabras de un string en Python",
          "Cómo contar las palabras de un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo contar las palabras de un string en Python: \n\ndef count_words(s):\n  return len(s.split())"
        ]
      },
      {
        "tag": "nodejs_find_max",
        "patterns": [
          "Dame el código para encontrar el valor máximo de un array en Node.js",
          "Cómo encontrar el valor máximo de un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor máximo de un array en Node.js: \n\nfunction findMax(arr) {\n  return Math.max(...arr);\n}"
        ]
      },
      {
        "tag": "python_find_max",
        "patterns": [
          "Dame el código para encontrar el valor máximo de un array en Python",
          "Cómo encontrar el valor máximo de un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor máximo de un array en Python: \n\ndef find_max(arr):\n  return max(arr)"
        ]
      },
      {
        "tag": "nodejs_find_min",
        "patterns": [
          "Dame el código para encontrar el valor mínimo de un array en Node.js",
          "Cómo encontrar el valor mínimo de un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor mínimo de un array en Node.js: \n\nfunction findMin(arr) {\n  return Math.min(...arr);\n}"
        ]
      },
      {
        "tag": "python_find_min",
        "patterns": [
          "Dame el código para encontrar el valor mínimo de un array en Python",
          "Cómo encontrar el valor mínimo de un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor mínimo de un array en Python: \n\ndef find_min(arr):\n  return min(arr)"
        ]
      },
      {
        "tag": "nodejs_remove_duplicates",
        "patterns": [
          "Dame el código para eliminar duplicados de un array en Node.js",
          "Cómo eliminar duplicados de un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar duplicados de un array en Node.js: \n\nfunction removeDuplicates(arr) {\n  return [...new Set(arr)];\n}"
        ]
      },
      {
        "tag": "python_remove_duplicates",
        "patterns": [
          "Dame el código para eliminar duplicados de un array en Python",
          "Cómo eliminar duplicados de un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar duplicados de un array en Python: \n\ndef remove_duplicates(arr):\n  return list(set(arr))"
        ]
      },
      {
        "tag": "nodejs_merge_arrays",
        "patterns": [
          "Dame el código para combinar dos arrays en Node.js",
          "Cómo combinar dos arrays en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo combinar dos arrays en Node.js: \n\nfunction mergeArrays(arr1, arr2) {\n  return arr1.concat(arr2);\n}"
        ]
      },
      {
        "tag": "python_merge_arrays",
        "patterns": [
          "Dame el código para combinar dos arrays en Python",
          "Cómo combinar dos arrays en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo combinar dos arrays en Python: \n\ndef merge_arrays(arr1, arr2):\n  return arr1 + arr2"
        ]
      },
      {
        "tag": "nodejs_sort_array",
        "patterns": [
          "Dame el código para ordenar un array en Node.js",
          "Cómo ordenar un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo ordenar un array en Node.js: \n\nfunction sortArray(arr) {\n  return arr.sort((a, b) => a - b);\n}"
        ]
      },
      {
        "tag": "python_sort_array",
        "patterns": [
          "Dame el código para ordenar un array en Python",
          "Cómo ordenar un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo ordenar un array en Python: \n\ndef sort_array(arr):\n  return sorted(arr)"
        ]
      },
      {
        "tag": "nodejs_remove_element",
        "patterns": [
          "Dame el código para eliminar un elemento de un array en Node.js",
          "Cómo eliminar un elemento de un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar un elemento de un array en Node.js: \n\nfunction removeElement(arr, element) {\n  const index = arr.indexOf(element);\n  if (index > -1) {\n    arr.splice(index, 1);\n  }\n  return arr;\n}"
        ]
      },
      {
        "tag": "python_remove_element",
        "patterns": [
          "Dame el código para eliminar un elemento de un array en Python",
          "Cómo eliminar un elemento de un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar un elemento de un array en Python: \n\ndef remove_element(arr, element):\n  arr.remove(element)\n  return arr"
        ]
      },
      {
        "tag": "nodejs_find_index",
        "patterns": [
          "Dame el código para encontrar el índice de un elemento en un array en Node.js",
          "Cómo encontrar el índice de un elemento en un array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice de un elemento en un array en Node.js: \n\nfunction findIndex(arr, element) {\n  return arr.indexOf(element);\n}"
        ]
      },
      {
        "tag": "python_find_index",
        "patterns": [
          "Dame el código para encontrar el índice de un elemento en un array en Python",
          "Cómo encontrar el índice de un elemento en un array en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice de un elemento en un array en Python: \n\ndef find_index(arr, element):\n  return arr.index(element)"
        ]
      },
      {
        "tag": "python_average",
        "patterns": [
          "Dame el código para calcular el promedio de una lista en Python",
          "Cómo calcular el promedio de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el promedio de una lista en Python: \n\ndef average(lst):\n  return sum(lst) / len(lst)"
        ]
      },
      {
        "tag": "nodejs_average",
        "patterns": [
          "Dame el código para calcular el promedio de una lista en Node.js",
          "Cómo calcular el promedio de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el promedio de una lista en Node.js: \n\nfunction average(arr) {\n  return arr.reduce((acc, val) => acc + val, 0) / arr.length;\n}"
        ]
      },
      {
        "tag": "python_convert_to_uppercase",
        "patterns": [
          "Dame el código para convertir un string a mayúsculas en Python",
          "Cómo convertir un string a mayúsculas en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a mayúsculas en Python: \n\ndef to_uppercase(s):\n  return s.upper()"
        ]
      },
      {
        "tag": "nodejs_convert_to_uppercase",
        "patterns": [
          "Dame el código para convertir un string a mayúsculas en Node.js",
          "Cómo convertir un string a mayúsculas en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a mayúsculas en Node.js: \n\nfunction toUpperCase(str) {\n  return str.toUpperCase();\n}"
        ]
      },
      {
        "tag": "python_convert_to_lowercase",
        "patterns": [
          "Dame el código para convertir un string a minúsculas en Python",
          "Cómo convertir un string a minúsculas en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a minúsculas en Python: \n\ndef to_lowercase(s):\n  return s.lower()"
        ]
      },
      {
        "tag": "nodejs_convert_to_lowercase",
        "patterns": [
          "Dame el código para convertir un string a minúsculas en Node.js",
          "Cómo convertir un string a minúsculas en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a minúsculas en Node.js: \n\nfunction toLowerCase(str) {\n  return str.toLowerCase();\n}"
        ]
      },
      {
        "tag": "python_list_comprehension",
        "patterns": [
          "Dame un ejemplo de list comprehension en Python",
          "Cómo usar list comprehension en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de list comprehension en Python: \n\nsquares = [x**2 for x in range(10)]"
        ]
      },
      {
        "tag": "nodejs_list_comprehension",
        "patterns": [
          "Dame un ejemplo de list comprehension en Node.js",
          "Cómo usar list comprehension en Node.js"
        ],
        "responses": [
          "Node.js no tiene list comprehension como Python, pero puedes usar map para hacer algo similar:\n\nconst squares = [...Array(10).keys()].map(x => x ** 2);"
        ]
      },
      {
        "tag": "python_is_prime",
        "patterns": [
          "Dame el código para verificar si un número es primo en Python",
          "Cómo verificar si un número es primo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Python: \n\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n ** 0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"
        ]
      },
      {
        "tag": "nodejs_is_prime",
        "patterns": [
          "Dame el código para verificar si un número es primo en Node.js",
          "Cómo verificar si un número es primo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Node.js: \n\nfunction isPrime(n) {\n  if (n <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"
        ]
      },
      {
        "tag": "python_reverse_string",
        "patterns": [
          "Dame el código para invertir un string en Python",
          "Cómo invertir un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Python: \n\ndef reverse_string(s):\n  return s[::-1]"
        ]
      },
      {
        "tag": "nodejs_reverse_string",
        "patterns": [
          "Dame el código para invertir un string en Node.js",
          "Cómo invertir un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Node.js: \n\nfunction reverseString(str) {\n  return str.split('').reverse().join('');\n}"
        ]
      },
      {
        "tag": "python_find_char",
        "patterns": [
          "Dame el código para encontrar la posición de un carácter en un string en Python",
          "Cómo encontrar la posición de un carácter en un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar la posición de un carácter en un string en Python: \n\ndef find_char(s, char):\n  return s.find(char)"
        ]
      },
      {
        "tag": "nodejs_find_char",
        "patterns": [
          "Dame el código para encontrar la posición de un carácter en un string en Node.js",
          "Cómo encontrar la posición de un carácter en un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar la posición de un carácter en un string en Node.js: \n\nfunction findChar(str, char) {\n  return str.indexOf(char);\n}"
        ]
      },
      {
        "tag": "python_remove_whitespace",
        "patterns": [
          "Dame el código para eliminar los espacios en blanco de un string en Python",
          "Cómo eliminar los espacios en blanco de un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar los espacios en blanco de un string en Python: \n\ndef remove_whitespace(s):\n  return s.replace(' ', '')"
        ]
      },
      {
        "tag": "python_fibonacci",
        "patterns": [
          "Dame el código para calcular la secuencia de Fibonacci en Python",
          "Cómo calcular la secuencia de Fibonacci en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la secuencia de Fibonacci en Python: \n\ndef fibonacci(n):\n  a, b = 0, 1\n  for _ in range(n):\n    a, b = b, a + b\n  return a"
        ]
      },
      {
        "tag": "nodejs_fibonacci",
        "patterns": [
          "Dame el código para calcular la secuencia de Fibonacci en Node.js",
          "Cómo calcular la secuencia de Fibonacci en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la secuencia de Fibonacci en Node.js: \n\nfunction fibonacci(n) {\n  let a = 0, b = 1;\n  for (let i = 0; i < n; i++) {\n    [a, b] = [b, a + b];\n  }\n  return a;\n}"
        ]
      },
      {
        "tag": "python_find_duplicates",
        "patterns": [
          "Dame el código para encontrar los duplicados en una lista en Python",
          "Cómo encontrar duplicados en una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar duplicados en una lista en Python: \n\ndef find_duplicates(lst):\n  seen = set()\n  duplicates = []\n  for item in lst:\n    if item in seen:\n      duplicates.append(item)\n    else:\n      seen.add(item)\n  return duplicates"
        ]
      },
      {
        "tag": "nodejs_find_duplicates",
        "patterns": [
          "Dame el código para encontrar los duplicados en una lista en Node.js",
          "Cómo encontrar duplicados en una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar duplicados en una lista en Node.js: \n\nfunction findDuplicates(arr) {\n  let seen = new Set(), duplicates = [];\n  arr.forEach(item => {\n    if (seen.has(item)) {\n      duplicates.push(item);\n    } else {\n      seen.add(item);\n    }\n  });\n  return duplicates;\n}"
        ]
      },
      {
        "tag": "python_palindrome",
        "patterns": [
          "Dame el código para verificar si un string es un palíndromo en Python",
          "Cómo verificar si un string es un palíndromo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un string es un palíndromo en Python: \n\ndef is_palindrome(s):\n  return s == s[::-1]"
        ]
      },
      {
        "tag": "nodejs_palindrome",
        "patterns": [
          "Dame el código para verificar si un string es un palíndromo en Node.js",
          "Cómo verificar si un string es un palíndromo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un string es un palíndromo en Node.js: \n\nfunction isPalindrome(str) {\n  return str === str.split('').reverse().join('');\n}"
        ]
      },
      {
        "tag": "python_count_vowels",
        "patterns": [
          "Dame el código para contar las vocales de un string en Python",
          "Cómo contar las vocales de un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo contar las vocales de un string en Python: \n\ndef count_vowels(s):\n  return sum(1 for char in s if char in 'aeiouAEIOU')"
        ]
      },
      {
        "tag": "nodejs_count_vowels",
        "patterns": [
          "Dame el código para contar las vocales de un string en Node.js",
          "Cómo contar las vocales de un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo contar las vocales de un string en Node.js: \n\nfunction countVowels(str) {\n  return [...str].filter(char => 'aeiouAEIOU'.includes(char)).length;\n}"
        ]
      },
      {
        "tag": "python_remove_non_alpha",
        "patterns": [
          "Dame el código para eliminar los caracteres no alfabéticos de un string en Python",
          "Cómo eliminar los caracteres no alfabéticos de un string en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar los caracteres no alfabéticos de un string en Python: \n\ndef remove_non_alpha(s):\n  return ''.join(filter(str.isalpha, s))"
        ]
      },
      {
        "tag": "nodejs_remove_non_alpha",
        "patterns": [
          "Dame el código para eliminar los caracteres no alfabéticos de un string en Node.js",
          "Cómo eliminar los caracteres no alfabéticos de un string en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar los caracteres no alfabéticos de un string en Node.js: \n\nfunction removeNonAlpha(str) {\n  return str.replace(/[^a-zA-Z]/g, '');\n}"
        ]
      },
      {
        "tag": "python_reverse_list",
        "patterns": [
          "Dame el código para invertir una lista en Python",
          "Cómo invertir una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir una lista en Python: \n\ndef reverse_list(lst):\n  return lst[::-1]"
        ]
      },
      {
        "tag": "nodejs_reverse_list",
        "patterns": [
          "Dame el código para invertir una lista en Node.js",
          "Cómo invertir una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir una lista en Node.js: \n\nfunction reverseList(arr) {\n  return arr.reverse();\n}"
        ]
      },
      {
        "tag": "python_convert_to_int",
        "patterns": [
          "Dame el código para convertir un string a entero en Python",
          "Cómo convertir un string a entero en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a entero en Python: \n\ndef to_int(s):\n  return int(s)"
        ]
      },
      {
        "tag": "nodejs_convert_to_int",
        "patterns": [
          "Dame el código para convertir un string a entero en Node.js",
          "Cómo convertir un string a entero en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo convertir un string a entero en Node.js: \n\nfunction toInt(str) {\n  return parseInt(str, 10);\n}"
        ]
      },
      {
        "tag": "python_is_even",
        "patterns": [
          "Dame el código para verificar si un número es par en Python",
          "Cómo verificar si un número es par en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es par en Python: \n\ndef is_even(n):\n  return n % 2 == 0"
        ]
      },
      {
        "tag": "python_is_odd",
        "patterns": [
          "Dame el código para verificar si un número es impar en Python",
          "Cómo verificar si un número es impar en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es impar en Python: \n\ndef is_odd(n):\n  return n % 2 != 0"
        ]
      },
      {
        "tag": "nodejs_is_odd",
        "patterns": [
          "Dame el código para verificar si un número es impar en Node.js",
          "Cómo verificar si un número es impar en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es impar en Node.js: \n\nfunction isOdd(n) {\n  return n % 2 !== 0;\n}"
        ]
      },
      {
        "tag": "python_max_value",
        "patterns": [
          "Dame el código para encontrar el valor máximo de una lista en Python",
          "Cómo encontrar el valor máximo de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor máximo de una lista en Python: \n\ndef max_value(lst):\n  return max(lst)"
        ]
      },
      {
        "tag": "nodejs_max_value",
        "patterns": [
          "Dame el código para encontrar el valor máximo de una lista en Node.js",
          "Cómo encontrar el valor máximo de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor máximo de una lista en Node.js: \n\nfunction maxValue(arr) {\n  return Math.max(...arr);\n}"
        ]
      },
      {
        "tag": "python_min_value",
        "patterns": [
          "Dame el código para encontrar el valor mínimo de una lista en Python",
          "Cómo encontrar el valor mínimo de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor mínimo de una lista en Python: \n\ndef min_value(lst):\n  return min(lst)"
        ]
      },
      {
        "tag": "nodejs_min_value",
        "patterns": [
          "Dame el código para encontrar el valor mínimo de una lista en Node.js",
          "Cómo encontrar el valor mínimo de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el valor mínimo de una lista en Node.js: \n\nfunction minValue(arr) {\n  return Math.min(...arr);\n}"
        ]
      },
      {
        "tag": "python_sort_list",
        "patterns": [
          "Dame el código para ordenar una lista en Python",
          "Cómo ordenar una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo ordenar una lista en Python: \n\ndef sort_list(lst):\n  return sorted(lst)"
        ]
      },
      {
        "tag": "nodejs_sort_list",
        "patterns": [
          "Dame el código para ordenar una lista en Node.js",
          "Cómo ordenar una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo ordenar una lista en Node.js: \n\nfunction sortList(arr) {\n  return arr.sort((a, b) => a - b);\n}"
        ]
      },
      {
        "tag": "python_reverse_string_in_place",
        "patterns": [
          "Dame el código para invertir un string en Python sin usar slicing",
          "Cómo invertir un string en Python sin usar slicing"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Python sin usar slicing: \n\ndef reverse_string_in_place(s):\n  return ''.join(reversed(s))"
        ]
      },
      {
        "tag": "nodejs_reverse_string_in_place",
        "patterns": [
          "Dame el código para invertir un string en Node.js sin usar reverse",
          "Cómo invertir un string en Node.js sin usar reverse"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo invertir un string en Node.js sin usar reverse: \n\nfunction reverseStringInPlace(str) {\n  let reversed = '';\n  for (let i = str.length - 1; i >= 0; i--) {\n    reversed += str[i];\n  }\n  return reversed;\n}"
        ]
      },
      {
        "tag": "python_swap_elements",
        "patterns": [
          "Dame el código para intercambiar dos elementos en una lista en Python",
          "Cómo intercambiar dos elementos en una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo intercambiar dos elementos en una lista en Python: \n\ndef swap_elements(lst, i, j):\n  lst[i], lst[j] = lst[j], lst[i]"
        ]
      },
      {
        "tag": "nodejs_swap_elements",
        "patterns": [
          "Dame el código para intercambiar dos elementos en una lista en Node.js",
          "Cómo intercambiar dos elementos en una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo intercambiar dos elementos en una lista en Node.js: \n\nfunction swapElements(arr, i, j) {\n  [arr[i], arr[j]] = [arr[j], arr[i]];\n}"
        ]
      },
      {
        "tag": "python_list_length",
        "patterns": [
          "Dame el código para obtener la longitud de una lista en Python",
          "Cómo obtener la longitud de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo obtener la longitud de una lista en Python: \n\ndef list_length(lst):\n  return len(lst)"
        ]
      },
      {
        "tag": "nodejs_list_length",
        "patterns": [
          "Dame el código para obtener la longitud de una lista en Node.js",
          "Cómo obtener la longitud de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo obtener la longitud de una lista en Node.js: \n\nfunction listLength(arr) {\n  return arr.length;\n}"
        ]
      },
      {
        "tag": "python_find_max_index",
        "patterns": [
          "Dame el código para encontrar el índice del valor máximo en una lista en Python",
          "Cómo encontrar el índice del valor máximo en una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice del valor máximo en una lista en Python: \n\ndef find_max_index(lst):\n  return lst.index(max(lst))"
        ]
      },
      {
        "tag": "nodejs_find_max_index",
        "patterns": [
          "Dame el código para encontrar el índice del valor máximo en una lista en Node.js",
          "Cómo encontrar el índice del valor máximo en una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice del valor máximo en una lista en Node.js: \n\nfunction findMaxIndex(arr) {\n  return arr.indexOf(Math.max(...arr));\n}"
        ]
      },
      {
        "tag": "python_list_sum",
        "patterns": [
          "Dame el código para calcular la suma de una lista en Python",
          "Cómo calcular la suma de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la suma de una lista en Python: \n\ndef list_sum(lst):\n  return sum(lst)"
        ]
      },
      {
        "tag": "nodejs_list_sum",
        "patterns": [
          "Dame el código para calcular la suma de una lista en Node.js",
          "Cómo calcular la suma de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la suma de una lista en Node.js: \n\nfunction listSum(arr) {\n  return arr.reduce((acc, val) => acc + val, 0);\n}"
        ]
      },
      {
        "tag": "python_prime_number",
        "patterns": [
          "Dame el código para verificar si un número es primo en Python",
          "Cómo verificar si un número es primo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Python: \n\ndef is_prime(n):\n  if n <= 1:\n    return False\n  for i in range(2, int(n**0.5) + 1):\n    if n % i == 0:\n      return False\n  return True"
        ]
      },
      {
        "tag": "nodejs_prime_number",
        "patterns": [
          "Dame el código para verificar si un número es primo en Node.js",
          "Cómo verificar si un número es primo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un número es primo en Node.js: \n\nfunction isPrime(n) {\n  if (n <= 1) return false;\n  for (let i = 2; i <= Math.sqrt(n); i++) {\n    if (n % i === 0) return false;\n  }\n  return true;\n}"
        ]
      },
      {
        "tag": "python_remove_duplicates",
        "patterns": [
          "Dame el código para eliminar duplicados de una lista en Python",
          "Cómo eliminar duplicados de una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar duplicados de una lista en Python: \n\ndef remove_duplicates(lst):\n  return list(set(lst))"
        ]
      },
      {
        "tag": "nodejs_remove_duplicates",
        "patterns": [
          "Dame el código para eliminar duplicados de una lista en Node.js",
          "Cómo eliminar duplicados de una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar duplicados de una lista en Node.js: \n\nfunction removeDuplicates(arr) {\n  return [...new Set(arr)];\n}"
        ]
      },
      {
        "tag": "python_factorial",
        "patterns": [
          "Dame el código para calcular el factorial de un número en Python",
          "Cómo calcular el factorial de un número en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el factorial de un número en Python: \n\ndef factorial(n):\n  return 1 if n == 0 else n * factorial(n - 1)"
        ]
      },
      {
        "tag": "nodejs_factorial",
        "patterns": [
          "Dame el código para calcular el factorial de un número en Node.js",
          "Cómo calcular el factorial de un número en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el factorial de un número en Node.js: \n\nfunction factorial(n) {\n  return n === 0 ? 1 : n * factorial(n - 1);\n}"
        ]
      },
      {
        "tag": "python_power",
        "patterns": [
          "Dame el código para calcular la potencia de un número en Python",
          "Cómo calcular la potencia de un número en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la potencia de un número en Python: \n\ndef power(base, exp):\n  return base ** exp"
        ]
      },
      {
        "tag": "nodejs_power",
        "patterns": [
          "Dame el código para calcular la potencia de un número en Node.js",
          "Cómo calcular la potencia de un número en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular la potencia de un número en Node.js: \n\nfunction power(base, exp) {\n  return Math.pow(base, exp);\n}"
        ]
      },
      {
        "tag": "python_find_index",
        "patterns": [
          "Dame el código para encontrar el índice de un elemento en una lista en Python",
          "Cómo encontrar el índice de un elemento en una lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice de un elemento en una lista en Python: \n\ndef find_index(lst, value):\n  return lst.index(value)"
        ]
      },
      {
        "tag": "nodejs_find_index",
        "patterns": [
          "Dame el código para encontrar el índice de un elemento en una lista en Node.js",
          "Cómo encontrar el índice de un elemento en una lista en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar el índice de un elemento en una lista en Node.js: \n\nfunction findIndex(arr, value) {\n  return arr.indexOf(value);\n}"
        ]
      },
      {
        "tag": "python_gcd",
        "patterns": [
          "Dame el código para calcular el MCD de dos números en Python",
          "Cómo calcular el MCD de dos números en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el MCD de dos números en Python: \n\ndef gcd(a, b):\n  while b:\n    a, b = b, a % b\n  return a"
        ]
      },
      {
        "tag": "nodejs_gcd",
        "patterns": [
          "Dame el código para calcular el MCD de dos números en Node.js",
          "Cómo calcular el MCD de dos números en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo calcular el MCD de dos números en Node.js: \n\nfunction gcd(a, b) {\n  while (b) {\n    [a, b] = [b, a % b];\n  }\n  return a;\n}"
        ]
      },
      {
        "tag": "python_find_common_elements",
        "patterns": [
          "Dame el código para encontrar elementos comunes entre dos listas en Python",
          "Cómo encontrar elementos comunes entre dos listas en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar elementos comunes entre dos listas en Python: \n\ndef find_common_elements(lst1, lst2):\n  return list(set(lst1) & set(lst2))"
        ]
      },
      {
        "tag": "nodejs_find_common_elements",
        "patterns": [
          "Dame el código para encontrar elementos comunes entre dos listas en Node.js",
          "Cómo encontrar elementos comunes entre dos listas en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar elementos comunes entre dos listas en Node.js: \n\nfunction findCommonElements(arr1, arr2) {\n  return arr1.filter(value => arr2.includes(value));\n}"
        ]
      },
      {
        "tag": "python_merge_sort",
        "patterns": [
          "Dame el código para implementar merge sort en Python",
          "Cómo implementar merge sort en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar merge sort en Python: \n\ndef merge_sort(arr):\n  if len(arr) > 1:\n    mid = len(arr) // 2\n    left_half = arr[:mid]\n    right_half = arr[mid:]\n\n    merge_sort(left_half)\n    merge_sort(right_half)\n\n    i = j = k = 0\n\n    while i < len(left_half) and j < len(right_half):\n      if left_half[i] < right_half[j]:\n        arr[k] = left_half[i]\n        i += 1\n      else:\n        arr[k] = right_half[j]\n        j += 1\n      k += 1\n\n    while i < len(left_half):\n      arr[k] = left_half[i]\n      i += 1\n      k += 1\n\n    while j < len(right_half):\n      arr[k] = right_half[j]\n      j += 1\n      k += 1"
        ]
      },
      {
        "tag": "nodejs_merge_sort",
        "patterns": [
          "Dame el código para implementar merge sort en Node.js",
          "Cómo implementar merge sort en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar merge sort en Node.js: \n\nfunction mergeSort(arr) {\n  if (arr.length <= 1) return arr;\n\n  const mid = Math.floor(arr.length / 2);\n  const left = mergeSort(arr.slice(0, mid));\n  const right = mergeSort(arr.slice(mid));\n\n  return merge(left, right);\n}\n\nfunction merge(left, right) {\n  const result = [];\n  while (left.length && right.length) {\n    if (left[0] < right[0]) {\n      result.push(left.shift());\n    } else {\n      result.push(right.shift());\n    }\n  }\n  return result.concat(left, right);\n}"
        ]
      },
      {
        "tag": "python_dijkstra_algorithm",
        "patterns": [
          "Dame el código para implementar el algoritmo de Dijkstra en Python",
          "Cómo implementar el algoritmo de Dijkstra en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Dijkstra en Python: \n\nimport heapq\n\ndef dijkstra(graph, start):\n  distances = {node: float('infinity') for node in graph}\n  distances[start] = 0\n  priority_queue = [(0, start)]\n\n  while priority_queue:\n    current_distance, current_node = heapq.heappop(priority_queue)\n\n    if current_distance > distances[current_node]:\n      continue\n\n    for neighbor, weight in graph[current_node].items():\n      distance = current_distance + weight\n      if distance < distances[neighbor]:\n        distances[neighbor] = distance\n        heapq.heappush(priority_queue, (distance, neighbor))\n\n  return distances"
        ]
      },
      {
        "tag": "nodejs_dijkstra_algorithm",
        "patterns": [
          "Dame el código para implementar el algoritmo de Dijkstra en Node.js",
          "Cómo implementar el algoritmo de Dijkstra en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Dijkstra en Node.js: \n\nclass PriorityQueue {\n  constructor() {\n    this.nodes = [];\n  }\n\n  enqueue(priority, key) {\n    this.nodes.push({ priority, key });\n    this.nodes.sort((a, b) => a.priority - b.priority);\n  }\n\n  dequeue() {\n    return this.nodes.shift();\n  }\n}\n\nfunction dijkstra(graph, start) {\n  const distances = {};\n  const priorityQueue = new PriorityQueue();\n  const previous = {};\n\n  for (let node in graph) {\n    distances[node] = Infinity;\n    previous[node] = null;\n  }\n  distances[start] = 0;\n\n  priorityQueue.enqueue(0, start);\n\n  while (priorityQueue.nodes.length) {\n    const { key: currentNode } = priorityQueue.dequeue();\n\n    for (let neighbor in graph[currentNode]) {\n      let distance = distances[currentNode] + graph[currentNode][neighbor];\n      if (distance < distances[neighbor]) {\n        distances[neighbor] = distance;\n        previous[neighbor] = currentNode;\n        priorityQueue.enqueue(distance, neighbor);\n      }\n    }\n  }\n\n  return distances;\n}"
        ]
      },
      {
        "tag": "python_quicksort",
        "patterns": [
          "Dame el código para implementar quicksort en Python",
          "Cómo implementar quicksort en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar quicksort en Python: \n\ndef quicksort(arr):\n  if len(arr) <= 1:\n    return arr\n  pivot = arr[len(arr) // 2]\n  left = [x for x in arr if x < pivot]\n  middle = [x for x in arr if x == pivot]\n  right = [x for x in arr if x > pivot]\n  return quicksort(left) + middle + quicksort(right)"
        ]
      },
      {
        "tag": "nodejs_quicksort",
        "patterns": [
          "Dame el código para implementar quicksort en Node.js",
          "Cómo implementar quicksort en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar quicksort en Node.js: \n\nfunction quicksort(arr) {\n  if (arr.length <= 1) return arr;\n  const pivot = arr[Math.floor(arr.length / 2)];\n  const left = arr.filter(x => x < pivot);\n  const middle = arr.filter(x => x === pivot);\n  const right = arr.filter(x => x > pivot);\n  return [...quicksort(left), ...middle, ...quicksort(right)];\n}"
        ]
      },
      {
        "tag": "python_find_all_paths",
        "patterns": [
          "Dame el código para encontrar todos los caminos en un grafo en Python",
          "Cómo encontrar todos los caminos en un grafo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar todos los caminos en un grafo en Python: \n\ndef find_all_paths(graph, start, end, path=[]):\n  path = path + [start]\n  if start == end:\n    return [path]\n  if start not in graph:\n    return []\n  paths = []\n  for node in graph[start]:\n    if node not in path:\n      new_paths = find_all_paths(graph, node, end, path)\n      for new_path in new_paths:\n        paths.append(new_path)\n  return paths"
        ]
      },
      {
        "tag": "nodejs_find_all_paths",
        "patterns": [
          "Dame el código para encontrar todos los caminos en un grafo en Node.js",
          "Cómo encontrar todos los caminos en un grafo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo encontrar todos los caminos en un grafo en Node.js: \n\nfunction findAllPaths(graph, start, end, path = []) {\n  path = [...path, start];\n  if (start === end) return [path];\n  if (!graph[start]) return [];\n\n  let paths = [];\n  for (let node of graph[start]) {\n    if (!path.includes(node)) {\n      const newPaths = findAllPaths(graph, node, end, path);\n      paths = paths.concat(newPaths);\n    }\n  }\n  return paths;\n}"
        ]
      },
      {
        "tag": "python_knapsack_problem",
        "patterns": [
          "Dame el código para resolver el problema de la mochila en Python",
          "Cómo resolver el problema de la mochila en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo resolver el problema de la mochila en Python: \n\ndef knapsack(weights, values, capacity):\n  n = len(values)\n  dp = [[0 for _ in range(capacity + 1)] for _ in range(n + 1)]\n\n  for i in range(1, n + 1):\n    for w in range(1, capacity + 1):\n      if weights[i - 1] <= w:\n        dp[i][w] = max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w])\n      else:\n        dp[i][w] = dp[i - 1][w]\n\n  return dp[n][capacity]"
        ]
      },
      {
        "tag": "nodejs_knapsack_problem",
        "patterns": [
          "Dame el código para resolver el problema de la mochila en Node.js",
          "Cómo resolver el problema de la mochila en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo resolver el problema de la mochila en Node.js: \n\nfunction knapsack(weights, values, capacity) {\n  const n = values.length;\n  const dp = Array.from({ length: n + 1 }, () => Array(capacity + 1).fill(0));\n\n  for (let i = 1; i <= n; i++) {\n    for (let w = 1; w <= capacity; w++) {\n      if (weights[i - 1] <= w) {\n        dp[i][w] = Math.max(values[i - 1] + dp[i - 1][w - weights[i - 1]], dp[i - 1][w]);\n      } else {\n        dp[i][w] = dp[i - 1][w];\n      }\n    }\n  }\n\n  return dp[n][capacity];\n}"
        ]
      },
      {
        "tag": "python_binary_search_tree",
        "patterns": [
          "Dame el código para implementar un árbol binario de búsqueda en Python",
          "Cómo implementar un árbol binario de búsqueda en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar un árbol binario de búsqueda en Python: \n\nclass Node:\n  def __init__(self, key):\n    self.left = None\n    self.right = None\n    self.val = key\n\ndef insert(root, key):\n  if root is None:\n    return Node(key)\n  if key < root.val:\n    root.left = insert(root.left, key)\n  else:\n    root.right = insert(root.right, key)\n  return root\n\ndef inorder_traversal(root):\n  if root:\n    inorder_traversal(root.left)\n    print(root.val, end=' ')\n    inorder_traversal(root.right)"
        ]
      },
      {
        "tag": "nodejs_binary_search_tree",
        "patterns": [
          "Dame el código para implementar un árbol binario de búsqueda en Node.js",
          "Cómo implementar un árbol binario de búsqueda en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar un árbol binario de búsqueda en Node.js: \n\nclass Node {\n  constructor(key) {\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nfunction insert(root, key) {\n  if (!root) return new Node(key);\n  if (key < root.key) {\n    root.left = insert(root.left, key);\n  } else {\n    root.right = insert(root.right, key);\n  }\n  return root;\n}\n\nfunction inorderTraversal(root) {\n  if (root) {\n    inorderTraversal(root.left);\n    console.log(root.key);\n    inorderTraversal(root.right);\n  }\n}"
        ]
      },
      {
        "tag": "python_depth_first_search",
        "patterns": [
          "Dame el código para realizar una búsqueda en profundidad en Python",
          "Cómo implementar una búsqueda en profundidad en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar una búsqueda en profundidad en Python: \n\ndef dfs(graph, node, visited):\n  if node not in visited:\n    print(node, end=' ')\n    visited.add(node)\n    for neighbor in graph[node]:\n      dfs(graph, neighbor, visited)"
        ]
      },
      {
        "tag": "nodejs_depth_first_search",
        "patterns": [
          "Dame el código para realizar una búsqueda en profundidad en Node.js",
          "Cómo implementar una búsqueda en profundidad en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar una búsqueda en profundidad en Node.js: \n\nfunction dfs(graph, node, visited = new Set()) {\n  if (!visited.has(node)) {\n    console.log(node);\n    visited.add(node);\n    for (const neighbor of graph[node]) {\n      dfs(graph, neighbor, visited);\n    }\n  }\n}"
        ]
      },
      {
        "tag": "python_floyd_warshall",
        "patterns": [
          "Dame el código para implementar el algoritmo de Floyd-Warshall en Python",
          "Cómo implementar el algoritmo de Floyd-Warshall en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Floyd-Warshall en Python: \n\ndef floyd_warshall(graph):\n  V = len(graph)\n  dist = list(map(lambda i: list(map(lambda j: j, i)), graph))\n\n  for k in range(V):\n    for i in range(V):\n      for j in range(V):\n        dist[i][j] = min(dist[i][j], dist[i][k] + dist[k][j])\n\n  return dist"
        ]
      },
      {
        "tag": "nodejs_floyd_warshall",
        "patterns": [
          "Dame el código para implementar el algoritmo de Floyd-Warshall en Node.js",
          "Cómo implementar el algoritmo de Floyd-Warshall en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Floyd-Warshall en Node.js: \n\nfunction floydWarshall(graph) {\n  const V = graph.length;\n  const dist = graph.map(row => row.slice());\n\n  for (let k = 0; k < V; k++) {\n    for (let i = 0; i < V; i++) {\n      for (let j = 0; j < V; j++) {\n        dist[i][j] = Math.min(dist[i][j], dist[i][k] + dist[k][j]);\n      }\n    }\n  }\n\n  return dist;\n}"
        ]
      },
      {
        "tag": "python_knapsack_recursive",
        "patterns": [
          "Dame el código para resolver el problema de la mochila de forma recursiva en Python",
          "Cómo resolver el problema de la mochila de forma recursiva en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo resolver el problema de la mochila de forma recursiva en Python: \n\ndef knapsack_recursive(weights, values, capacity, n):\n  if n == 0 or capacity == 0:\n    return 0\n  if weights[n - 1] > capacity:\n    return knapsack_recursive(weights, values, capacity, n - 1)\n  return max(\n    values[n - 1] + knapsack_recursive(weights, values, capacity - weights[n - 1], n - 1),\n    knapsack_recursive(weights, values, capacity, n - 1)\n  )"
        ]
      },
      {
        "tag": "nodejs_knapsack_recursive",
        "patterns": [
          "Dame el código para resolver el problema de la mochila de forma recursiva en Node.js",
          "Cómo resolver el problema de la mochila de forma recursiva en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo resolver el problema de la mochila de forma recursiva en Node.js: \n\nfunction knapsackRecursive(weights, values, capacity, n) {\n  if (n === 0 || capacity === 0) return 0;\n  if (weights[n - 1] > capacity) {\n    return knapsackRecursive(weights, values, capacity, n - 1);\n  }\n  return Math.max(\n    values[n - 1] + knapsackRecursive(weights, values, capacity - weights[n - 1], n - 1),\n    knapsackRecursive(weights, values, capacity, n - 1)\n  );\n}"
        ]
      },
      {
        "tag": "python_bellman_ford",
        "patterns": [
          "Dame el código para implementar el algoritmo de Bellman-Ford en Python",
          "Cómo implementar el algoritmo de Bellman-Ford en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Bellman-Ford en Python: \n\ndef bellman_ford(graph, V, E, src):\n  dist = [float('inf')] * V\n  dist[src] = 0\n\n  for _ in range(V - 1):\n    for u, v, w in E:\n      if dist[u] != float('inf') and dist[u] + w < dist[v]:\n        dist[v] = dist[u] + w\n\n  for u, v, w in E:\n    if dist[u] != float('inf') and dist[u] + w < dist[v]:\n      return \"Graph contains negative weight cycle\"\n\n  return dist"
        ]
      },
      {
        "tag": "nodejs_bellman_ford",
        "patterns": [
          "Dame el código para implementar el algoritmo de Bellman-Ford en Node.js",
          "Cómo implementar el algoritmo de Bellman-Ford en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar el algoritmo de Bellman-Ford en Node.js: \n\nfunction bellmanFord(graph, V, edges, src) {\n  const dist = Array(V).fill(Infinity);\n  dist[src] = 0;\n\n  for (let i = 0; i < V - 1; i++) {\n    for (const [u, v, w] of edges) {\n      if (dist[u] !== Infinity && dist[u] + w < dist[v]) {\n        dist[v] = dist[u] + w;\n      }\n    }\n  }\n\n  for (const [u, v, w] of edges) {\n    if (dist[u] !== Infinity && dist[u] + w < dist[v]) {\n      return \"Graph contains negative weight cycle\";\n    }\n  }\n\n  return dist;\n}"
        ]
      },
      {
        "tag": "python_read_file",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo en Python",
          "Cómo puedo leer un archivo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo simple de cómo leer un archivo en Python: \n\nwith open('archivo.txt', 'r') as archivo:\n    contenido = archivo.read()\n    print(contenido)"
        ]
      },
      {
        "tag": "nodejs_read_file",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo en Node.js",
          "Cómo puedo leer un archivo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo simple de cómo leer un archivo en Node.js: \n\nconst fs = require('fs');\n\nfs.readFile('archivo.txt', 'utf8', (err, data) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log(data);\n});"
        ]
      },
      {
        "tag": "python_write_file",
        "patterns": [
          "Dame un ejemplo de cómo escribir en un archivo en Python",
          "Cómo puedo escribir en un archivo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo simple de cómo escribir en un archivo en Python: \n\nwith open('archivo.txt', 'w') as archivo:\n    archivo.write('Este es un nuevo contenido.')"
        ]
      },
      {
        "tag": "nodejs_write_file",
        "patterns": [
          "Dame un ejemplo de cómo escribir en un archivo en Node.js",
          "Cómo puedo escribir en un archivo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo simple de cómo escribir en un archivo en Node.js: \n\nconst fs = require('fs');\n\nfs.writeFile('archivo.txt', 'Este es un nuevo contenido.', (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('El archivo fue escrito exitosamente.');\n});"
        ]
      },
      {
        "tag": "python_append_file",
        "patterns": [
          "Dame un ejemplo de cómo añadir contenido a un archivo en Python",
          "Cómo puedo añadir contenido a un archivo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo añadir contenido a un archivo en Python: \n\nwith open('archivo.txt', 'a') as archivo:\n    archivo.write('\\nEste es un contenido añadido.')"
        ]
      },
      {
        "tag": "nodejs_append_file",
        "patterns": [
          "Dame un ejemplo de cómo añadir contenido a un archivo en Node.js",
          "Cómo puedo añadir contenido a un archivo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo añadir contenido a un archivo en Node.js: \n\nconst fs = require('fs');\n\nfs.appendFile('archivo.txt', '\\nEste es un contenido añadido.', (err) => {\n  if (err) {\n    console.error(err);\n    return;\n  }\n  console.log('El contenido fue añadido exitosamente.');\n});"
        ]
      },
      {
        "tag": "python_large_file_read",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo grande línea por línea en Python",
          "Cómo puedo leer un archivo grande línea por línea en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer un archivo grande línea por línea en Python: \n\nwith open('archivo_grande.txt', 'r') as archivo:\n    for linea in archivo:\n        print(linea.strip())"
        ]
      },
      {
        "tag": "nodejs_large_file_read",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo grande línea por línea en Node.js",
          "Cómo puedo leer un archivo grande línea por línea en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer un archivo grande línea por línea en Node.js: \n\nconst fs = require('fs');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('archivo_grande.txt'),\n  crlfDelay: Infinity\n});\n\nrl.on('line', (line) => {\n  console.log(line);\n});"
        ]
      },
      {
        "tag": "python_check_file_exists",
        "patterns": [
          "Dame un ejemplo de cómo verificar si un archivo existe en Python",
          "Cómo puedo verificar si un archivo existe en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un archivo existe en Python: \n\nimport os\n\nif os.path.exists('archivo.txt'):\n    print('El archivo existe')\nelse:\n    print('El archivo no existe')"
        ]
      },
      {
        "tag": "nodejs_check_file_exists",
        "patterns": [
          "Dame un ejemplo de cómo verificar si un archivo existe en Node.js",
          "Cómo puedo verificar si un archivo existe en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo verificar si un archivo existe en Node.js: \n\nconst fs = require('fs');\n\nif (fs.existsSync('archivo.txt')) {\n  console.log('El archivo existe');\n} else {\n  console.log('El archivo no existe');\n}"
        ]
      },
      {
        "tag": "python_read_write_binary",
        "patterns": [
          "Dame un ejemplo de cómo leer y escribir archivos binarios en Python",
          "Cómo manejar archivos binarios en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer y escribir archivos binarios en Python: \n\nwith open('archivo.bin', 'wb') as archivo:\n    archivo.write(b'Contenido en binario')\n\nwith open('archivo.bin', 'rb') as archivo:\n    contenido = archivo.read()\n    print(contenido)"
        ]
      },
      {
        "tag": "nodejs_read_write_binary",
        "patterns": [
          "Dame un ejemplo de cómo leer y escribir archivos binarios en Node.js",
          "Cómo manejar archivos binarios en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer y escribir archivos binarios en Node.js: \n\nconst fs = require('fs');\n\nfs.writeFileSync('archivo.bin', Buffer.from('Contenido en binario'));\n\nconst contenido = fs.readFileSync('archivo.bin');\nconsole.log(contenido.toString());"
        ]
      },
      {
        "tag": "python_temp_file",
        "patterns": [
          "Dame un ejemplo de cómo crear archivos temporales en Python",
          "Cómo puedo manejar archivos temporales en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo crear archivos temporales en Python: \n\nimport tempfile\n\nwith tempfile.NamedTemporaryFile(delete=False) as temp:\n    print(f'Archivo temporal creado: {temp.name}')\n    temp.write(b'Contenido temporal')"
        ]
      },
      {
        "tag": "nodejs_temp_file",
        "patterns": [
          "Dame un ejemplo de cómo crear archivos temporales en Node.js",
          "Cómo puedo manejar archivos temporales en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo crear archivos temporales en Node.js: \n\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\n\nconst tempPath = path.join(os.tmpdir(), 'archivo-temporal.txt');\nfs.writeFileSync(tempPath, 'Contenido temporal');\nconsole.log(`Archivo temporal creado: ${tempPath}`);"
        ]
      },
      {
        "tag": "python_delete_file",
        "patterns": [
          "Dame un ejemplo de cómo eliminar un archivo en Python",
          "Cómo eliminar un archivo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar un archivo en Python: \n\nimport os\n\nif os.path.exists('archivo.txt'):\n    os.remove('archivo.txt')\n    print('Archivo eliminado')\nelse:\n    print('El archivo no existe')"
        ]
      },
      {
        "tag": "nodejs_delete_file",
        "patterns": [
          "Dame un ejemplo de cómo eliminar un archivo en Node.js",
          "Cómo eliminar un archivo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo eliminar un archivo en Node.js: \n\nconst fs = require('fs');\n\nif (fs.existsSync('archivo.txt')) {\n  fs.unlinkSync('archivo.txt');\n  console.log('Archivo eliminado');\n} else {\n  console.log('El archivo no existe');\n}"
        ]
      },
      {
        "tag": "python_read_csv",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo CSV en Python",
          "Cómo puedo leer un archivo CSV en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer un archivo CSV en Python: \n\nimport csv\n\nwith open('archivo.csv', 'r') as archivo:\n    lector = csv.reader(archivo)\n    for fila in lector:\n        print(fila)"
        ]
      },
      {
        "tag": "nodejs_read_csv",
        "patterns": [
          "Dame un ejemplo de cómo leer un archivo CSV en Node.js",
          "Cómo puedo leer un archivo CSV en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo leer un archivo CSV en Node.js: \n\nconst fs = require('fs');\nconst readline = require('readline');\n\nconst rl = readline.createInterface({\n  input: fs.createReadStream('archivo.csv'),\n  crlfDelay: Infinity\n});\n\nrl.on('line', (line) => {\n  console.log(line.split(','));\n});"
        ]
      },
      {
        "tag": "python_handle_exceptions_file",
        "patterns": [
          "Dame un ejemplo de cómo manejar excepciones al trabajar con archivos en Python",
          "Cómo manejar errores al leer archivos en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar excepciones al trabajar con archivos en Python: \n\ntry:\n    with open('archivo_inexistente.txt', 'r') as archivo:\n        contenido = archivo.read()\n        print(contenido)\nexcept FileNotFoundError:\n    print('El archivo no existe')\nexcept IOError:\n    print('Error al acceder al archivo')"
        ]
      },
      {
        "tag": "nodejs_handle_exceptions_file",
        "patterns": [
          "Dame un ejemplo de cómo manejar excepciones al trabajar con archivos en Node.js",
          "Cómo manejar errores al leer archivos en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar excepciones al trabajar con archivos en Node.js: \n\nconst fs = require('fs');\n\ntry {\n  const contenido = fs.readFileSync('archivo_inexistente.txt', 'utf8');\n  console.log(contenido);\n} catch (err) {\n  if (err.code === 'ENOENT') {\n    console.error('El archivo no existe');\n  } else {\n    console.error('Error al acceder al archivo:', err);\n  }\n}"
        ]
      },
      {
        "tag": "python_basic_api",
        "patterns": [
          "Dame un ejemplo de una API básica en Python",
          "Cómo puedo crear una API en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de una API en Python usando Flask: \n\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef home():\n    return 'Hola, esta es una API básica en Flask'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_basic_api",
        "patterns": [
          "Dame un ejemplo de una API básica en Node.js",
          "Cómo puedo crear una API en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de una API en Node.js usando Express: \n\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('Hola, esta es una API básica en Express');\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_with_cors",
        "patterns": [
          "Dame un ejemplo de una API en Python con CORS",
          "Cómo habilitar CORS en una API de Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una API en Python con CORS habilitado: \n\nfrom flask import Flask\nfrom flask_cors import CORS\n\napp = Flask(__name__)\nCORS(app)\n\n@app.route('/')\ndef home():\n    return 'CORS habilitado en Flask'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_with_cors",
        "patterns": [
          "Dame un ejemplo de una API en Node.js con CORS",
          "Cómo habilitar CORS en una API de Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una API en Node.js con CORS habilitado: \n\nconst express = require('express');\nconst cors = require('cors');\nconst app = express();\n\napp.use(cors());\n\napp.get('/', (req, res) => {\n  res.send('CORS habilitado en Express');\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_restful_api",
        "patterns": [
          "Dame un ejemplo de una API REST en Python",
          "Cómo crear una API REST en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una API REST básica en Python usando Flask: \n\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ndata = [\n    {\"id\": 1, \"nombre\": \"Elemento 1\"},\n    {\"id\": 2, \"nombre\": \"Elemento 2\"}\n]\n\n@app.route('/items', methods=['GET'])\ndef get_items():\n    return jsonify(data)\n\n@app.route('/items', methods=['POST'])\ndef create_item():\n    nuevo_item = request.json\n    data.append(nuevo_item)\n    return jsonify(nuevo_item), 201\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_restful_api",
        "patterns": [
          "Dame un ejemplo de una API REST en Node.js",
          "Cómo crear una API REST en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de una API REST básica en Node.js usando Express: \n\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nconst data = [\n  { id: 1, nombre: 'Elemento 1' },\n  { id: 2, nombre: 'Elemento 2' }\n];\n\napp.get('/items', (req, res) => {\n  res.json(data);\n});\n\napp.post('/items', (req, res) => {\n  const nuevoItem = req.body;\n  data.push(nuevoItem);\n  res.status(201).json(nuevoItem);\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_error_handling",
        "patterns": [
          "Dame un ejemplo de manejo de errores en una API en Python",
          "Cómo manejar errores en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de manejo de errores en Flask: \n\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.errorhandler(404)\ndef not_found(error):\n    return jsonify({\"error\": \"Recurso no encontrado\"}), 404\n\n@app.route('/')\ndef home():\n    return 'API con manejo de errores en Flask'\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_error_handling",
        "patterns": [
          "Dame un ejemplo de manejo de errores en una API en Node.js",
          "Cómo manejar errores en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de manejo de errores en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.get('/', (req, res) => {\n  res.send('API con manejo de errores en Express');\n});\n\napp.use((req, res, next) => {\n  res.status(404).json({ error: 'Recurso no encontrado' });\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_put_delete",
        "patterns": [
          "Dame un ejemplo de PUT y DELETE en una API en Python",
          "Cómo usar PUT y DELETE en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo usar PUT y DELETE en Flask: \n\nfrom flask import Flask, jsonify, request\n\napp = Flask(__name__)\n\ndata = [\n    {\"id\": 1, \"nombre\": \"Elemento 1\"},\n    {\"id\": 2, \"nombre\": \"Elemento 2\"}\n]\n\n@app.route('/items/<int:item_id>', methods=['PUT'])\ndef update_item(item_id):\n    for item in data:\n        if item['id'] == item_id:\n            item.update(request.json)\n            return jsonify(item)\n    return jsonify({\"error\": \"Elemento no encontrado\"}), 404\n\n@app.route('/items/<int:item_id>', methods=['DELETE'])\ndef delete_item(item_id):\n    global data\n    data = [item for item in data if item['id'] != item_id]\n    return '', 204\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_put_delete",
        "patterns": [
          "Dame un ejemplo de PUT y DELETE en una API en Node.js",
          "Cómo usar PUT y DELETE en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo usar PUT y DELETE en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\nlet data = [\n  { id: 1, nombre: 'Elemento 1' },\n  { id: 2, nombre: 'Elemento 2' }\n];\n\napp.put('/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  const item = data.find(d => d.id === id);\n  if (!item) {\n    return res.status(404).json({ error: 'Elemento no encontrado' });\n  }\n  Object.assign(item, req.body);\n  res.json(item);\n});\n\napp.delete('/items/:id', (req, res) => {\n  const id = parseInt(req.params.id);\n  data = data.filter(d => d.id !== id);\n  res.status(204).send();\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_with_query_params",
        "patterns": [
          "Dame un ejemplo de cómo manejar parámetros de consulta en una API en Python",
          "Cómo usar query params en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar parámetros de consulta en Flask: \n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/buscar', methods=['GET'])\ndef buscar():\n    nombre = request.args.get('nombre')\n    edad = request.args.get('edad')\n    return jsonify({\"nombre\": nombre, \"edad\": edad})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_with_query_params",
        "patterns": [
          "Dame un ejemplo de cómo manejar parámetros de consulta en una API en Node.js",
          "Cómo usar query params en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar parámetros de consulta en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.get('/buscar', (req, res) => {\n  const { nombre, edad } = req.query;\n  res.json({ nombre, edad });\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_pagination",
        "patterns": [
          "Dame un ejemplo de paginación en una API en Python",
          "Cómo implementar paginación en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar paginación en Flask: \n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\ndata = [f'Elemento {i}' for i in range(1, 101)]\n\n@app.route('/items', methods=['GET'])\ndef paginar():\n    page = int(request.args.get('page', 1))\n    per_page = int(request.args.get('per_page', 10))\n    start = (page - 1) * per_page\n    end = start + per_page\n    return jsonify(data[start:end])\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_pagination",
        "patterns": [
          "Dame un ejemplo de paginación en una API en Node.js",
          "Cómo implementar paginación en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo implementar paginación en Express: \n\nconst express = require('express');\nconst app = express();\n\nconst data = Array.from({ length: 100 }, (_, i) => `Elemento ${i + 1}`);\n\napp.get('/items', (req, res) => {\n  const page = parseInt(req.query.page) || 1;\n  const perPage = parseInt(req.query.perPage) || 10;\n  const start = (page - 1) * perPage;\n  const end = start + perPage;\n  res.json(data.slice(start, end));\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_with_headers",
        "patterns": [
          "Dame un ejemplo de cómo manejar headers en una API en Python",
          "Cómo usar headers en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar headers en Flask: \n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/headers', methods=['GET'])\ndef headers():\n    cliente = request.headers.get('User-Agent')\n    return jsonify({\"User-Agent\": cliente})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_with_headers",
        "patterns": [
          "Dame un ejemplo de cómo manejar headers en una API en Node.js",
          "Cómo usar headers en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo manejar headers en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.get('/headers', (req, res) => {\n  const cliente = req.headers['user-agent'];\n  res.json({ 'User-Agent': cliente });\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_auth",
        "patterns": [
          "Dame un ejemplo de autenticación básica en una API en Python",
          "Cómo implementar autenticación en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de autenticación básica en Flask: \n\nfrom flask import Flask, request, jsonify\n\napp = Flask(__name__)\n\n@app.route('/login', methods=['POST'])\ndef login():\n    auth = request.authorization\n    if auth and auth.username == 'admin' and auth.password == 'secret':\n        return jsonify({\"message\": \"Autenticación exitosa\"})\n    return jsonify({\"message\": \"Autenticación fallida\"}), 401\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_auth",
        "patterns": [
          "Dame un ejemplo de autenticación básica en una API en Node.js",
          "Cómo implementar autenticación en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de autenticación básica en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.use(express.json());\n\napp.post('/login', (req, res) => {\n  const { username, password } = req.body;\n  if (username === 'admin' && password === 'secret') {\n    res.json({ message: 'Autenticación exitosa' });\n  } else {\n    res.status(401).json({ message: 'Autenticación fallida' });\n  }\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_api_json_response",
        "patterns": [
          "Dame un ejemplo de cómo enviar una respuesta en formato JSON en una API en Python",
          "Cómo enviar JSON en Flask"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo enviar una respuesta en formato JSON en Flask: \n\nfrom flask import Flask, jsonify\n\napp = Flask(__name__)\n\n@app.route('/datos', methods=['GET'])\ndef datos():\n    return jsonify({\"nombre\": \"API\", \"version\": \"1.0\"})\n\nif __name__ == '__main__':\n    app.run(debug=True)"
        ]
      },
      {
        "tag": "nodejs_api_json_response",
        "patterns": [
          "Dame un ejemplo de cómo enviar una respuesta en formato JSON en una API en Node.js",
          "Cómo enviar JSON en Express"
        ],
        "responses": [
          "Aquí tienes un ejemplo de cómo enviar una respuesta en formato JSON en Express: \n\nconst express = require('express');\nconst app = express();\n\napp.get('/datos', (req, res) => {\n  res.json({ nombre: 'API', version: '1.0' });\n});\n\napp.listen(3000, () => {\n  console.log('Servidor corriendo en http://localhost:3000');\n});"
        ]
      },
      {
        "tag": "python_sqlite_connection",
        "patterns": [
          "Cómo conectar una base de datos SQLite en Python",
          "Dame un ejemplo de conexión con SQLite en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con SQLite en Python: \n\nimport sqlite3\n\n# Conexión a la base de datos (se crea si no existe)\nconn = sqlite3.connect('mi_base_de_datos.db')\ncursor = conn.cursor()\n\n# Crear una tabla\ncursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (id INTEGER PRIMARY KEY, nombre TEXT, edad INTEGER)''')\n\n# Insertar datos\ncursor.execute('''INSERT INTO usuarios (nombre, edad) VALUES ('Juan', 25)''')\nconn.commit()\n\n# Consultar datos\ncursor.execute('SELECT * FROM usuarios')\nprint(cursor.fetchall())\n\n# Cerrar la conexión\nconn.close()"
        ]
      },
      {
        "tag": "nodejs_mysql_connection",
        "patterns": [
          "Cómo conectar una base de datos MySQL en Node.js",
          "Dame un ejemplo de conexión con MySQL en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con MySQL en Node.js: \n\nconst mysql = require('mysql');\n\nconst connection = mysql.createConnection({\n  host: 'localhost',\n  user: 'root',\n  password: 'password',\n  database: 'mi_base_de_datos'\n});\n\nconnection.connect((err) => {\n  if (err) throw err;\n  console.log('Conectado a la base de datos');\n\n  // Crear una tabla\n  const crearTabla = 'CREATE TABLE IF NOT EXISTS usuarios (id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), edad INT)';\n  connection.query(crearTabla, (err, result) => {\n    if (err) throw err;\n    console.log('Tabla creada');\n  });\n\n  // Insertar datos\n  const insertar = 'INSERT INTO usuarios (nombre, edad) VALUES (?, ?)';\n  connection.query(insertar, ['Juan', 25], (err, result) => {\n    if (err) throw err;\n    console.log('Datos insertados');\n  });\n\n  // Consultar datos\n  connection.query('SELECT * FROM usuarios', (err, results) => {\n    if (err) throw err;\n    console.log(results);\n    connection.end();\n  });\n});"
        ]
      },
      {
        "tag": "python_postgresql_connection",
        "patterns": [
          "Cómo conectar una base de datos PostgreSQL en Python",
          "Dame un ejemplo de conexión con PostgreSQL en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con PostgreSQL en Python: \n\nimport psycopg2\n\n# Conexión a la base de datos\nconn = psycopg2.connect(\n    host='localhost',\n    database='mi_base_de_datos',\n    user='postgres',\n    password='password'\n)\ncursor = conn.cursor()\n\n# Crear una tabla\ncursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (id SERIAL PRIMARY KEY, nombre VARCHAR(100), edad INTEGER)''')\n\n# Insertar datos\ncursor.execute('''INSERT INTO usuarios (nombre, edad) VALUES (%s, %s)''', ('Juan', 25))\nconn.commit()\n\n# Consultar datos\ncursor.execute('SELECT * FROM usuarios')\nprint(cursor.fetchall())\n\n# Cerrar la conexión\ncursor.close()\nconn.close()"
        ]
      },
      {
        "tag": "nodejs_mongodb_connection",
        "patterns": [
          "Cómo conectar una base de datos MongoDB en Node.js",
          "Dame un ejemplo de conexión con MongoDB en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con MongoDB en Node.js: \n\nconst { MongoClient } = require('mongodb');\n\nconst uri = 'mongodb://localhost:27017';\nconst client = new MongoClient(uri);\n\nasync function run() {\n  try {\n    await client.connect();\n    console.log('Conectado a MongoDB');\n\n    const database = client.db('mi_base_de_datos');\n    const collection = database.collection('usuarios');\n\n    // Insertar un documento\n    await collection.insertOne({ nombre: 'Juan', edad: 25 });\n\n    // Consultar documentos\n    const usuarios = await collection.find().toArray();\n    console.log(usuarios);\n  } finally {\n    await client.close();\n  }\n}\n\nrun().catch(console.dir);"
        ]
      },
      {
        "tag": "python_redis_connection",
        "patterns": [
          "Cómo conectar a Redis en Python",
          "Dame un ejemplo de conexión con Redis en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con Redis en Python: \n\nimport redis\n\n# Conexión a Redis\nr = redis.Redis(host='localhost', port=6379, decode_responses=True)\n\n# Establecer un valor\nr.set('clave', 'valor')\n\n# Obtener el valor\nprint(r.get('clave'))"
        ]
      },
      {
        "tag": "nodejs_redis_connection",
        "patterns": [
          "Cómo conectar a Redis en Node.js",
          "Dame un ejemplo de conexión con Redis en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con Redis en Node.js: \n\nconst redis = require('redis');\nconst client = redis.createClient();\n\nclient.on('connect', () => {\n  console.log('Conectado a Redis');\n});\n\nclient.set('clave', 'valor', redis.print);\nclient.get('clave', (err, value) => {\n  if (err) throw err;\n  console.log(value);\n});"
        ]
      },
      {
        "tag": "python_sqlalchemy_connection",
        "patterns": [
          "Cómo conectar a una base de datos con SQLAlchemy en Python",
          "Dame un ejemplo de conexión con SQLAlchemy en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de conexión con SQLAlchemy en Python: \n\nfrom sqlalchemy import create_engine, Table, Column, Integer, String, MetaData\n\n# Conexión a la base de datos\nengine = create_engine('sqlite:///mi_base_de_datos.db')\nmeta = MetaData()\n\nusuarios = Table(\n    'usuarios', meta,\n    Column('id', Integer, primary_key=True),\n    Column('nombre', String),\n    Column('edad', Integer)\n)\n\nmeta.create_all(engine)\n\n# Insertar y consultar datos\nwith engine.connect() as conn:\n    conn.execute(usuarios.insert().values(nombre='Juan', edad=25))\n    result = conn.execute(usuarios.select())\n    for row in result:\n        print(row)"
        ]
      },
      {
        "tag": "python_hello_world",
        "patterns": [
          "Cómo hacer un Hola Mundo en Python",
          "Dame un ejemplo de Hola Mundo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de Hola Mundo en Python: \n\nprint('Hola Mundo')"
        ]
      },
      {
        "tag": "nodejs_hello_world",
        "patterns": [
          "Cómo hacer un Hola Mundo en Node.js",
          "Dame un ejemplo de Hola Mundo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de Hola Mundo en Node.js: \n\nconsole.log('Hola Mundo');"
        ]
      },
      {
        "tag": "python_create_variables",
        "patterns": [
          "Cómo crear variables en Python",
          "Dame un ejemplo de declaración de variables en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de creación de variables en Python: \n\nnombre = 'Juan'\nedad = 25\nes_estudiante = True\nprint(f'Nombre: {nombre}, Edad: {edad}, Estudiante: {es_estudiante}')"
        ]
      },
      {
        "tag": "nodejs_create_variables",
        "patterns": [
          "Cómo crear variables en Node.js",
          "Dame un ejemplo de declaración de variables en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de creación de variables en Node.js: \n\nlet nombre = 'Juan';\nlet edad = 25;\nlet esEstudiante = true;\nconsole.log(`Nombre: ${nombre}, Edad: ${edad}, Estudiante: ${esEstudiante}`);"
        ]
      },
      {
        "tag": "python_basic_math",
        "patterns": [
          "Cómo realizar operaciones matemáticas básicas en Python",
          "Dame un ejemplo de suma, resta, multiplicación y división en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de operaciones matemáticas en Python: \n\na = 10\nb = 5\nprint(f'Suma: {a + b}')\nprint(f'Resta: {a - b}')\nprint(f'Multiplicación: {a * b}')\nprint(f'División: {a / b}')"
        ]
      },
      {
        "tag": "nodejs_basic_math",
        "patterns": [
          "Cómo realizar operaciones matemáticas básicas en Node.js",
          "Dame un ejemplo de suma, resta, multiplicación y división en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de operaciones matemáticas en Node.js: \n\nlet a = 10;\nlet b = 5;\nconsole.log(`Suma: ${a + b}`);\nconsole.log(`Resta: ${a - b}`);\nconsole.log(`Multiplicación: ${a * b}`);\nconsole.log(`División: ${a / b}`);"
        ]
      },
      {
        "tag": "python_conditionals",
        "patterns": [
          "Cómo usar condicionales en Python",
          "Dame un ejemplo de if, elif, else en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de condicionales en Python: \n\nedad = 18\nif edad < 18:\n    print('Eres menor de edad')\nelif edad == 18:\n    print('Tienes 18 años')\nelse:\n    print('Eres mayor de edad')"
        ]
      },
      {
        "tag": "nodejs_conditionals",
        "patterns": [
          "Cómo usar condicionales en Node.js",
          "Dame un ejemplo de if, else if, else en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de condicionales en Node.js: \n\nlet edad = 18;\nif (edad < 18) {\n  console.log('Eres menor de edad');\n} else if (edad === 18) {\n  console.log('Tienes 18 años');\n} else {\n  console.log('Eres mayor de edad');\n}"
        ]
      },
      {
        "tag": "python_class",
        "patterns": [
          "Cómo declarar una clase en Python",
          "Dame un ejemplo de una clase básica en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de clase en Python: \n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        return f'Hola, mi nombre es {self.nombre} y tengo {self.edad} años.'\n\npersona = Persona('Juan', 25)\nprint(persona.saludar())"
        ]
      },
      {
        "tag": "nodejs_class",
        "patterns": [
          "Cómo declarar una clase en Node.js",
          "Dame un ejemplo de una clase básica en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de clase en Node.js: \n\nclass Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  saludar() {\n    return `Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`;\n  }\n}\n\nconst persona = new Persona('Juan', 25);\nconsole.log(persona.saludar());"
        ]
      },
      {
        "tag": "python_inheritance",
        "patterns": [
          "Cómo usar herencia en Python",
          "Dame un ejemplo de herencia en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de herencia en Python: \n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        return f'Hola, mi nombre es {self.nombre}.'\n\nclass Estudiante(Persona):\n    def __init__(self, nombre, edad, grado):\n        super().__init__(nombre, edad)\n        self.grado = grado\n\n    def estudiar(self):\n        return f'Estoy estudiando en el grado {self.grado}.'\n\nestudiante = Estudiante('Ana', 20, 'Universidad')\nprint(estudiante.saludar())\nprint(estudiante.estudiar())"
        ]
      },
      {
        "tag": "nodejs_inheritance",
        "patterns": [
          "Cómo usar herencia en Node.js",
          "Dame un ejemplo de herencia en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de herencia en Node.js: \n\nclass Persona {\n  constructor(nombre, edad) {\n    this.nombre = nombre;\n    this.edad = edad;\n  }\n\n  saludar() {\n    return `Hola, mi nombre es ${this.nombre}.`;\n  }\n}\n\nclass Estudiante extends Persona {\n  constructor(nombre, edad, grado) {\n    super(nombre, edad);\n    this.grado = grado;\n  }\n\n  estudiar() {\n    return `Estoy estudiando en el grado ${this.grado}.`;\n  }\n}\n\nconst estudiante = new Estudiante('Ana', 20, 'Universidad');\nconsole.log(estudiante.saludar());\nconsole.log(estudiante.estudiar());"
        ]
      },
      {
        "tag": "python_polymorphism",
        "patterns": [
          "Cómo usar polimorfismo en Python",
          "Dame un ejemplo de polimorfismo en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de polimorfismo en Python: \n\nclass Perro:\n    def sonido(self):\n        return 'Guau'\n\nclass Gato:\n    def sonido(self):\n        return 'Miau'\n\ndef hacer_sonido(animal):\n    print(animal.sonido())\n\nperro = Perro()\ngato = Gato()\nhacer_sonido(perro)\nhacer_sonido(gato)"
        ]
      },
      {
        "tag": "nodejs_polymorphism",
        "patterns": [
          "Cómo usar polimorfismo en Node.js",
          "Dame un ejemplo de polimorfismo en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de polimorfismo en Node.js: \n\nclass Perro {\n  sonido() {\n    return 'Guau';\n  }\n}\n\nclass Gato {\n  sonido() {\n    return 'Miau';\n  }\n}\n\nfunction hacerSonido(animal) {\n  console.log(animal.sonido());\n}\n\nconst perro = new Perro();\nconst gato = new Gato();\nhacerSonido(perro);\nhacerSonido(gato);"
        ]
      },
      {
        "tag": "python_encapsulation",
        "patterns": [
          "Cómo usar encapsulamiento en Python",
          "Dame un ejemplo de encapsulamiento en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de encapsulamiento en Python: \n\nclass Persona:\n    def __init__(self, nombre):\n        self.__nombre = nombre  # Atributo privado\n\n    def get_nombre(self):\n        return self.__nombre\n\n    def set_nombre(self, nuevo_nombre):\n        self.__nombre = nuevo_nombre\n\npersona = Persona('Juan')\nprint(persona.get_nombre())\npersona.set_nombre('Carlos')\nprint(persona.get_nombre())"
        ]
      },
      {
        "tag": "nodejs_encapsulation",
        "patterns": [
          "Cómo usar encapsulamiento en Node.js",
          "Dame un ejemplo de encapsulamiento en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de encapsulamiento en Node.js: \n\nclass Persona {\n  # Encapsulamiento con campo privado\n  # (Nota: Esto requiere Node.js 12.0+ para el uso de campos privados '#')\n\n  # Campo privado\n  #nombre;\n\n  constructor(nombre) {\n    this.#nombre = nombre;\n  }\n\n  getNombre() {\n    return this.#nombre;\n  }\n\n  setNombre(nuevoNombre) {\n    this.#nombre = nuevoNombre;\n  }\n}\n\nconst persona = new Persona('Juan');\nconsole.log(persona.getNombre());\npersona.setNombre('Carlos');\nconsole.log(persona.getNombre());"
        ]
      },
      {
        "tag": "python_lists",
        "patterns": [
          "Cómo crear una lista en Python",
          "Dame un ejemplo de lista en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de lista en Python: \n\nmi_lista = [1, 2, 3, 4, 5]\nprint(mi_lista)\nprint(f'El primer elemento es: {mi_lista[0]}')\nmi_lista.append(6)\nprint(f'Lista después de agregar un elemento: {mi_lista}')"
        ]
      },
      {
        "tag": "nodejs_arrays",
        "patterns": [
          "Cómo crear un array en Node.js",
          "Dame un ejemplo de array en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo básico de array en Node.js: \n\nconst miArray = [1, 2, 3, 4, 5];\nconsole.log(miArray);\nconsole.log(`El primer elemento es: ${miArray[0]}`);\nmiArray.push(6);\nconsole.log(`Array después de agregar un elemento: ${miArray}`);"
        ]
      },
      {
        "tag": "python_nested_lists",
        "patterns": [
          "Cómo crear una lista anidada en Python",
          "Dame un ejemplo de lista de listas en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de lista anidada en Python: \n\nmatriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nprint(matriz)\nprint(f'Elemento en la posición (1, 2): {matriz[1][2]}')"
        ]
      },
      {
        "tag": "nodejs_nested_arrays",
        "patterns": [
          "Cómo crear un array anidado en Node.js",
          "Dame un ejemplo de array de arrays en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de array anidado en Node.js: \n\nconst matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nconsole.log(matriz);\nconsole.log(`Elemento en la posición (1, 2): ${matriz[1][2]}`);"
        ]
      },
      {
        "tag": "python_matrix_operations",
        "patterns": [
          "Cómo manejar matrices en Python",
          "Dame un ejemplo de operaciones con matrices en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de operaciones con matrices en Python usando numpy: \n\nimport numpy as np\nmatriz_a = np.array([[1, 2], [3, 4]])\nmatriz_b = np.array([[5, 6], [7, 8]])\nresultado = np.dot(matriz_a, matriz_b)\nprint('Producto de matrices:')\nprint(resultado)"
        ]
      },
      {
        "tag": "nodejs_matrix_operations",
        "patterns": [
          "Cómo manejar matrices en Node.js",
          "Dame un ejemplo de operaciones con matrices en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de operaciones con matrices en Node.js usando math.js: \n\nconst math = require('mathjs');\nconst matrizA = [[1, 2], [3, 4]];\nconst matrizB = [[5, 6], [7, 8]];\nconst resultado = math.multiply(matrizA, matrizB);\nconsole.log('Producto de matrices:');\nconsole.log(resultado);"
        ]
      },
      {
        "tag": "python_list_comprehension",
        "patterns": [
          "Cómo usar list comprehension en Python",
          "Dame un ejemplo de list comprehension en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de list comprehension en Python: \n\nnumeros = [1, 2, 3, 4, 5]\ncuadrados = [x**2 for x in numeros]\nprint(f'Números: {numeros}')\nprint(f'Cuadrados: {cuadrados}')"
        ]
      },
      {
        "tag": "nodejs_array_mapping",
        "patterns": [
          "Cómo usar map en Node.js",
          "Dame un ejemplo de map en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de map en Node.js: \n\nconst numeros = [1, 2, 3, 4, 5];\nconst cuadrados = numeros.map(x => x ** 2);\nconsole.log('Números:', numeros);\nconsole.log('Cuadrados:', cuadrados);"
        ]
      },
      {
        "tag": "python_2d_matrix",
        "patterns": [
          "Cómo crear una matriz 2D en Python",
          "Dame un ejemplo de matriz bidimensional en Python"
        ],
        "responses": [
          "Aquí tienes un ejemplo de matriz 2D en Python: \n\nmatriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\nfor fila in matriz:\n    for elemento in fila:\n        print(elemento, end=' ')\n    print()"
        ]
      },
      {
        "tag": "nodejs_2d_array",
        "patterns": [
          "Cómo crear un array bidimensional en Node.js",
          "Dame un ejemplo de matriz 2D en Node.js"
        ],
        "responses": [
          "Aquí tienes un ejemplo de array bidimensional en Node.js: \n\nconst matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];\nmatriz.forEach(fila => {\n  fila.forEach(elemento => {\n    process.stdout.write(elemento + ' ');\n  });\n  console.log();\n});"
        ]
      },
      {
        "tag": "ext_nodejs_for_loop",
        "patterns": [
          "¿Cómo se define la variable de control en un ciclo 'for' en Node.js?",
          "¿Cómo se define la condición de parada en un ciclo 'for' en Node.js?",
          "¿Cómo se actualiza la variable de control en un ciclo 'for' en Node.js?"
        ],
        "responses": [
          "let i = 0;",
          "i < arr.length;",
          "i++;"
        ]
      },
      {
        "tag": "ext_python_for_loop",
        "patterns": [
          "¿Cómo se define la variable de control en un ciclo 'for' en Python?",
          "¿Cómo se define la condición de parada en un ciclo 'for' en Python?",
          "¿Cómo se actualiza la variable de control en un ciclo 'for' en Python?"
        ],
        "responses": [
          "for i in range(len(arr)):",
          "range(len(arr))",
          "i += 1"
        ]
      },
      {
        "tag": "ext_nodejs_while_loop",
        "patterns": [
          "¿Cómo se inicializa la variable de control en un ciclo 'while' en Node.js?",
          "¿Cómo se define la condición de parada en un ciclo 'while' en Node.js?",
          "¿Cómo se actualiza la variable de control en un ciclo 'while' en Node.js?"
        ],
        "responses": [
          "let i = 0;",
          "i < arr.length;",
          "i++;"
        ]
      },
      {
        "tag": "ext_python_while_loop",
        "patterns": [
          "¿Cómo se inicializa la variable de control en un ciclo 'while' en Python?",
          "¿Cómo se define la condición de parada en un ciclo 'while' en Python?",
          "¿Cómo se actualiza la variable de control en un ciclo 'while' en Python?"
        ],
        "responses": [
          "i = 0",
          "i < len(arr):",
          "i += 1"
        ]
      },
      {
        "tag": "ext_nodejs_bubble_sort",
        "patterns": [
          "¿Cómo se define el número de elementos en un bubble sort en Node.js?",
          "¿Cómo se maneja el intercambio en el bubble sort en Node.js?",
          "¿Cómo se implementa el ciclo interno del bubble sort en Node.js?"
        ],
        "responses": [
          "let n = arr.length;",
          "if (arr[j] > arr[j + 1]) { [arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]; swapped = true; }",
          "for (let j = 0; j < n - i - 1; j++) {"
        ]
      },
      {
        "tag": "ext_python_bubble_sort",
        "patterns": [
          "¿Cómo se define el número de elementos en un bubble sort en Python?",
          "¿Cómo se maneja el intercambio en el bubble sort en Python?",
          "¿Cómo se implementa el ciclo interno del bubble sort en Python?"
        ],
        "responses": [
          "n = len(arr)",
          "if arr[j] > arr[j + 1]: arr[j], arr[j + 1] = arr[j + 1], arr[j]",
          "for j in range(0, n-i-1):"
        ]
      },
      {
        "tag": "ext_nodejs_bubble_sort_swap_line",
        "patterns": [
          "¿Dónde ocurre el intercambio en bubble sort de Node.js?",
          "¿Cómo se realiza el intercambio de elementos en bubble sort en Node.js?"
        ],
        "responses": [
          "La línea exacta donde se realiza el intercambio en bubble sort es: \n\n[arr[j], arr[j + 1]] = [arr[j + 1], arr[j]]"
        ]
      },
      {
        "tag": "ext_python_bubble_sort_swap_line",
        "patterns": [
          "¿Dónde ocurre el intercambio en bubble sort de Python?",
          "¿Cómo se realiza el intercambio de elementos en bubble sort en Python?"
        ],
        "responses": [
          "La línea exacta donde se realiza el intercambio en bubble sort es: \n\narr[j], arr[j+1] = arr[j+1], arr[j]"
        ]
      },
      {
        "tag": "ext_nodejs_simple_function",
        "patterns": [
          "¿Cómo se define una función simple en Node.js?",
          "¿Cómo se crea una función que imprime algo en Node.js?"
        ],
        "responses": [
          "function sayHello() { console.log('Hola Mundo'); }"
        ]
      },
      {
        "tag": "ext_python_simple_function",
        "patterns": [
          "¿Cómo se define una función simple en Python?",
          "¿Cómo se crea una función que imprime algo en Python?"
        ],
        "responses": [
          "def say_hello():\n  print('Hola Mundo')"
        ]
      },
      {
        "tag": "ext_nodejs_factorial",
        "patterns": [
          "¿Cómo se define la condición base en una función factorial en Node.js?",
          "¿Cómo se realiza la llamada recursiva en una función factorial en Node.js?"
        ],
        "responses": [
          "if (n === 0 || n === 1) { return 1; }",
          "return n * factorial(n - 1);"
        ]
      },
      {
        "tag": "ext_python_factorial",
        "patterns": [
          "¿Cómo se define la condición base en una función factorial en Python?",
          "¿Cómo se realiza la llamada recursiva en una función factorial en Python?"
        ],
        "responses": [
          "if n == 0 or n == 1: return 1",
          "return n * factorial(n - 1)"
        ]
      },
      {
        "tag": "ext_nodejs_sum_array",
        "patterns": [
          "¿Cómo se define la función de suma de array en Node.js?",
          "¿Cómo se utiliza el método 'reduce' para sumar los elementos en Node.js?"
        ],
        "responses": [
          "return arr.reduce((acc, val) => acc + val, 0);",
          "arr.reduce((acc, val) => acc + val, 0) utiliza un acumulador para sumar los valores"
        ]
      },
      {
        "tag": "ext_python_sum_array",
        "patterns": [
          "¿Cómo se define la función de suma de array en Python?",
          "¿Cómo se utiliza la función 'sum' para sumar los elementos en Python?"
        ],
        "responses": [
          "return sum(arr)",
          "La función 'sum(arr)' en Python suma todos los elementos del array"
        ]
      },
      {
        "tag": "ext_nodejs_fibonacci",
        "patterns": [
          "¿Cómo se define la condición base en una función Fibonacci en Node.js?",
          "¿Cómo se realiza la llamada recursiva en una función Fibonacci en Node.js?"
        ],
        "responses": [
          "if (n <= 1) return n;",
          "return fibonacci(n - 1) + fibonacci(n - 2);"
        ]
      },
      {
        "tag": "ext_python_fibonacci",
        "patterns": [
          "¿Cómo se define la condición base en una función Fibonacci en Python?",
          "¿Cómo se realiza la llamada recursiva en una función Fibonacci en Python?"
        ],
        "responses": [
          "if n <= 1: return n",
          "return fibonacci(n - 1) + fibonacci(n - 2)"
        ]
      },
      {
        "tag": "ext_nodejs_reverse_string",
        "patterns": [
          "¿Cómo se utiliza el método 'split' para invertir un string en Node.js?",
          "¿Cómo se realiza la inversión de un string en Node.js?"
        ],
        "responses": [
          "return str.split('').reverse().join('');",
          "str.split('') convierte el string en un array de caracteres, luego 'reverse' lo invierte y 'join' lo convierte nuevamente en string"
        ]
      },
      {
        "tag": "ext_python_reverse_string",
        "patterns": [
          "¿Cómo se utiliza el slicing para invertir un string en Python?",
          "¿Cómo se realiza la inversión de un string en Python?"
        ],
        "responses": [
          "return s[::-1]",
          "El slicing s[::-1] invierte el string en Python"
        ]
      },
      {
        "tag": "ext_nodejs_palindrome",
        "patterns": [
          "¿Cómo se limpia el string de caracteres no alfanuméricos en Node.js?",
          "¿Cómo se verifica si un string es un palíndromo en Node.js?"
        ],
        "responses": [
          "const cleaned = str.replace(/[^A-Za-z0-9]/g, '').toLowerCase();",
          "La verificación se realiza comparando el string limpio con su versión invertida"
        ]
      },
      {
        "tag": "ext_python_palindrome",
        "patterns": [
          "¿Cómo se limpia el string de caracteres no alfanuméricos en Python?",
          "¿Cómo se verifica si un string es un palíndromo en Python?"
        ],
        "responses": [
          "cleaned = ''.join(e for e in s if e.isalnum()).lower()",
          "La verificación se realiza comparando el string limpio con su versión invertida"
        ]
      },
      {
        "tag": "ext_nodejs_prime_number",
        "patterns": [
          "¿Qué hace la función 'isPrime' en Node.js?",
          "¿Cómo se verifica si un número es primo en Node.js?",
          "¿Qué hace el ciclo for dentro de la función isPrime?"
        ],
        "responses": [
          "La función 'isPrime' verifica si un número es primo.",
          "El ciclo 'for' recorre los números desde 2 hasta el número que se verifica, comprobando si hay divisores."
        ]
      },
      {
        "tag": "ext_python_prime_number",
        "patterns": [
          "¿Qué hace la función 'is_prime' en Python?",
          "¿Cómo se verifica si un número es primo en Python?",
          "¿Qué hace el ciclo for dentro de la función is_prime?"
        ],
        "responses": [
          "La función 'is_prime' verifica si un número es primo.",
          "El ciclo 'for' recorre los números desde 2 hasta el número que se verifica, comprobando si hay divisores."
        ]
      },
      {
        "tag": "ext_nodejs_fizzbuzz",
        "patterns": [
          "¿Qué hace el ciclo for dentro de la función fizzBuzz en Node.js?",
          "¿Cómo funciona la lógica para imprimir Fizz, Buzz y FizzBuzz en Node.js?",
          "¿Qué significa 'i % 3 === 0 && i % 5 === 0' en Node.js?"
        ],
        "responses": [
          "El ciclo 'for' recorre los números desde 1 hasta 'n' y verifica las condiciones para imprimir 'Fizz', 'Buzz', o 'FizzBuzz'.",
          "La expresión 'i % 3 === 0 && i % 5 === 0' verifica si el número es divisible tanto por 3 como por 5."
        ]
      },
      {
        "tag": "ext_python_fizzbuzz",
        "patterns": [
          "¿Qué hace el ciclo for dentro de la función fizz_buzz en Python?",
          "¿Cómo funciona la lógica para imprimir Fizz, Buzz y FizzBuzz en Python?",
          "¿Qué significa 'i % 3 == 0 and i % 5 == 0' en Python?"
        ],
        "responses": [
          "El ciclo 'for' recorre los números desde 1 hasta 'n' y verifica las condiciones para imprimir 'Fizz', 'Buzz', o 'FizzBuzz'.",
          "La expresión 'i % 3 == 0 and i % 5 == 0' verifica si el número es divisible tanto por 3 como por 5."
        ]
      },
      {
        "tag": "ext_nodejs_swap_variables",
        "patterns": [
          "¿Cómo se intercambian las variables 'a' y 'b' en Node.js?",
          "¿Qué hace '[a, b] = [b, a]' en Node.js?"
        ],
        "responses": [
          "La expresión '[a, b] = [b, a]' intercambia los valores de las variables 'a' y 'b'."
        ]
      },
      {
        "tag": "ext_python_swap_variables",
        "patterns": [
          "¿Cómo se intercambian las variables 'a' y 'b' en Python?",
          "¿Qué hace 'a, b = b, a' en Python?"
        ],
        "responses": [
          "La expresión 'a, b = b, a' intercambia los valores de las variables 'a' y 'b'."
        ]
      },
      {
        "tag": "ext_nodejs_odd_even",
        "patterns": [
          "¿Cómo se verifica si un número es par o impar en Node.js?",
          "¿Qué hace 'if (num % 2 === 0)' en Node.js?"
        ],
        "responses": [
          "La condición 'if (num % 2 === 0)' verifica si el número es divisible por 2, lo que indica que es par."
        ]
      },
      {
        "tag": "ext_python_odd_even",
        "patterns": [
          "¿Cómo se verifica si un número es par o impar en Python?",
          "¿Qué hace 'if num % 2 == 0' en Python?"
        ],
        "responses": [
          "La condición 'if num % 2 == 0' verifica si el número es divisible por 2, lo que indica que es par."
        ]
      },
      {
        "tag": "ext_nodejs_count_vowels",
        "patterns": [
          "¿Cómo se cuentan las vocales en un string en Node.js?",
          "¿Qué hace 'str.split('').filter(char => vowels.includes(char))' en Node.js?"
        ],
        "responses": [
          "La expresión 'str.split('').filter(char => vowels.includes(char))' divide el string en caracteres y filtra solo las vocales."
        ]
      },
      {
        "tag": "ext_python_count_vowels",
        "patterns": [
          "¿Cómo se cuentan las vocales en un string en Python?",
          "¿Qué hace '[char for char in s if char in vowels]' en Python?"
        ],
        "responses": [
          "La expresión '[char for char in s if char in vowels]' recorre el string y filtra solo las vocales."
        ]
      },
      {
        "tag": "ext_nodejs_reverse_array",
        "patterns": [
          "¿Cómo se invierte un array en Node.js?",
          "¿Qué hace 'arr.reverse()' en Node.js?"
        ],
        "responses": [
          "La función 'arr.reverse()' invierte el orden de los elementos en el array."
        ]
      },
      {
        "tag": "ext_python_reverse_array",
        "patterns": [
          "¿Cómo se invierte un array en Python?",
          "¿Qué hace 'arr[::-1]' en Python?"
        ],
        "responses": [
          "La expresión 'arr[::-1]' invierte el orden de los elementos en la lista."
        ]
      },
      {
        "tag": "ext_python_count_words",
        "patterns": [
          "¿Cómo se cuentan las palabras en un string en Python?",
          "¿Qué hace 's.split()' en Python?"
        ],
        "responses": [
          "La función 's.split()' divide el string en palabras basándose en los espacios y 'len()' devuelve el número total de palabras."
        ]
      },
      {
        "tag": "ext_nodejs_find_max",
        "patterns": [
          "¿Cómo se encuentra el valor máximo de un array en Node.js?",
          "¿Qué hace 'Math.max(...arr)' en Node.js?"
        ],
        "responses": [
          "La función 'Math.max(...arr)' encuentra el valor máximo de un array pasando los elementos del array como argumentos individuales."
        ]
      },
      {
        "tag": "ext_python_find_max",
        "patterns": [
          "¿Cómo se encuentra el valor máximo de un array en Python?",
          "¿Qué hace 'max(arr)' en Python?"
        ],
        "responses": [
          "La función 'max(arr)' devuelve el valor máximo de una lista en Python."
        ]
      },
      {
        "tag": "ext_nodejs_find_min",
        "patterns": [
          "¿Cómo se encuentra el valor mínimo de un array en Node.js?",
          "¿Qué hace 'Math.min(...arr)' en Node.js?"
        ],
        "responses": [
          "La función 'Math.min(...arr)' encuentra el valor mínimo de un array pasando los elementos del array como argumentos individuales."
        ]
      },
      {
        "tag": "ext_python_find_min",
        "patterns": [
          "¿Cómo se encuentra el valor mínimo de un array en Python?",
          "¿Qué hace 'min(arr)' en Python?"
        ],
        "responses": [
          "La función 'min(arr)' devuelve el valor mínimo de una lista en Python."
        ]
      },
      {
        "tag": "ext_nodejs_remove_duplicates",
        "patterns": [
          "¿Cómo se eliminan los duplicados de un array en Node.js?",
          "¿Qué hace '[...new Set(arr)]' en Node.js?"
        ],
        "responses": [
          "La expresión '[...new Set(arr)]' elimina los duplicados de un array convirtiéndolo en un Set (que solo guarda valores únicos) y luego lo convierte de nuevo en un array."
        ]
      },
      {
        "tag": "ext_python_remove_duplicates",
        "patterns": [
          "¿Cómo se eliminan los duplicados de un array en Python?",
          "¿Qué hace 'list(set(arr))' en Python?"
        ],
        "responses": [
          "La expresión 'list(set(arr))' elimina los duplicados de una lista convirtiéndola en un Set y luego lo convierte de nuevo en una lista."
        ]
      },
      {
        "tag": "ext_nodejs_merge_arrays",
        "patterns": [
          "¿Cómo se combinan dos arrays en Node.js?",
          "¿Qué hace 'arr1.concat(arr2)' en Node.js?"
        ],
        "responses": [
          "La función 'arr1.concat(arr2)' combina los elementos de 'arr2' al final de 'arr1', creando un nuevo array."
        ]
      },
      {
        "tag": "ext_python_merge_arrays",
        "patterns": [
          "Cómo se combinan dos arrays en Python"
        ],
        "responses": [
          "arr1 + arr2"
        ]
      },
      {
        "tag": "ext_nodejs_sort_array",
        "patterns": [
          "Qué hace arr.sort((a, b) => a - b)"
        ],
        "responses": [
          "arr.sort() ordena el array, y la función (a, b) => a - b define el criterio de comparación para ordenar los elementos numéricamente."
        ]
      },
      {
        "tag": "ext_python_sort_array",
        "patterns": [
          "Qué hace sorted(arr)"
        ],
        "responses": [
          "sorted(arr) devuelve una nueva lista ordenada sin modificar la original."
        ]
      },
      {
        "tag": "ext_nodejs_remove_element",
        "patterns": [
          "Cómo se elimina un elemento en Node.js",
          "Qué hace arr.indexOf(element)",
          "Qué hace arr.splice(index, 1)"
        ],
        "responses": [
          "arr.indexOf(element) encuentra el índice del primer elemento que coincide con el valor.",
          "arr.splice(index, 1) elimina el elemento en el índice especificado del array."
        ]
      },
      {
        "tag": "ext_python_remove_element",
        "patterns": [
          "Qué hace arr.remove(element)"
        ],
        "responses": [
          "arr.remove(element) elimina la primera ocurrencia de element en el array."
        ]
      },
      {
        "tag": "ext_nodejs_find_index",
        "patterns": [
          "Cómo se encuentra el índice de un elemento en un array en Node.js",
          "Qué hace arr.indexOf(element)"
        ],
        "responses": [
          "arr.indexOf(element) devuelve el índice del primer elemento que coincide con el valor."
        ]
      },
      {
        "tag": "ext_python_find_index",
        "patterns": [
          "Qué hace arr.index(element)"
        ],
        "responses": [
          "arr.index(element) devuelve el índice de la primera ocurrencia de element en el array."
        ]
      },
      {
        "tag": "ext_python_average",
        "patterns": [
          "Cómo se calcula el promedio de una lista en Python",
          "Qué hace sum(lst)",
          "Qué hace len(lst)"
        ],
        "responses": [
          "sum(lst) suma todos los elementos de la lista.",
          "len(lst) devuelve la cantidad de elementos en la lista."
        ]
      },
      {
        "tag": "ext_nodejs_average",
        "patterns": [
          "Qué hace arr.reduce((acc, val) => acc + val, 0)"
        ],
        "responses": [
          "arr.reduce((acc, val) => acc + val, 0) suma todos los elementos del array utilizando una función de acumulación."
        ]
      },
      {
        "tag": "ext_python_convert_to_uppercase",
        "patterns": [
          "Qué hace s.upper()"
        ],
        "responses": [
          "s.upper() convierte todos los caracteres del string s a mayúsculas."
        ]
      },
      {
        "tag": "ext_nodejs_convert_to_uppercase",
        "patterns": [
          "Qué hace str.toUpperCase()"
        ],
        "responses": [
          "str.toUpperCase() convierte todos los caracteres del string str a mayúsculas."
        ]
      },
      {
        "tag": "ext_python_convert_to_lowercase",
        "patterns": [
          "Qué hace s.lower()"
        ],
        "responses": [
          "s.lower() convierte todos los caracteres del string s a minúsculas."
        ]
      },
      {
        "tag": "ext_nodejs_convert_to_lowercase",
        "patterns": [
          "Qué hace str.toLowerCase()"
        ],
        "responses": [
          "str.toLowerCase() convierte todos los caracteres del string str a minúsculas."
        ]
      },
      {
        "tag": "ext_python_list_comprehension",
        "patterns": [
          "Qué hace x**2 for x in range(10)"
        ],
        "responses": [
          "x**2 for x in range(10) genera una lista de los cuadrados de los números del 0 al 9."
        ]
      },
      {
        "tag": "ext_nodejs_list_comprehension",
        "patterns": [
          "Cómo usar map para hacer algo similar a list comprehension"
        ],
        "responses": [
          "Puedes usar map para aplicar una operación a cada elemento de un array, como en: [...Array(10).keys()].map(x => x ** 2)."
        ]
      },
      {
        "tag": "ext_python_is_prime",
        "patterns": [
          "Qué hace n <= 1",
          "Qué hace for i in range(2, int(n ** 0.5) + 1)",
          "Qué hace n % i == 0"
        ],
        "responses": [
          "n <= 1 verifica si el número es menor o igual a 1, en cuyo caso no es primo.",
          "for i in range(2, int(n ** 0.5) + 1) recorre los números desde 2 hasta la raíz cuadrada de n.",
          "n % i == 0 verifica si n es divisible por i, lo que indica que no es primo."
        ]
      },
      {
        "tag": "ext_nodejs_is_prime",
        "patterns": [
          "Qué hace if (n <= 1)",
          "Qué hace for (let i = 2; i <= Math.sqrt(n); i++)",
          "Qué hace n % i === 0"
        ],
        "responses": [
          "if (n <= 1) devuelve false si el número es menor o igual a 1.",
          "for (let i = 2; i <= Math.sqrt(n); i++) recorre los números desde 2 hasta la raíz cuadrada de n.",
          "n % i === 0 verifica si n es divisible por i, indicando que n no es primo."
        ]
      },
      {
        "tag": "ext_python_reverse_string",
        "patterns": [
          "Qué hace s[::-1]"
        ],
        "responses": [
          "s[::-1] invierte el string s."
        ]
      },
      {
        "tag": "ext_nodejs_reverse_string",
        "patterns": [
          "Qué hace str.split('')",
          "Qué hace str.reverse()",
          "Qué hace str.join('')"
        ],
        "responses": [
          "str.split('') divide el string en un array de caracteres.",
          "str.reverse() invierte el array de caracteres.",
          "str.join('') une los caracteres invertidos en un nuevo string."
        ]
      },
      {
        "tag": "ext_python_find_char",
        "patterns": [
          "Qué hace s.find(char)"
        ],
        "responses": [
          "s.find(char) devuelve la posición del primer carácter coincidente en el string s. Si no se encuentra, devuelve -1."
        ]
      },
      {
        "tag": "ext_nodejs_findchar",
        "patterns": [
          "¿Cómo encuentras la posición de un carácter en un string en Node.js?",
          "¿Qué hace el método indexOf() en el código para encontrar la posición de un carácter?"
        ],
        "responses": [
          "return str.indexOf(char);"
        ]
      },
      {
        "tag": "ext_python_removewhitespace",
        "patterns": [
          "¿Cómo eliminas los espacios en blanco de un string en Python?",
          "¿Qué hace el método replace() en el código para eliminar los espacios en blanco?"
        ],
        "responses": [
          "return s.replace(' ', '')"
        ]
      },
      {
        "tag": "ext_python_fibonacci",
        "patterns": [
          "¿Cómo se inicializan las variables en la secuencia de Fibonacci en Python?",
          "¿Qué hace la línea 'a, b = 0, 1' en el código de Fibonacci?"
        ],
        "responses": [
          "a, b = 0, 1"
        ]
      },
      {
        "tag": "ext_python_fibonacci",
        "patterns": [
          "¿Cómo se realiza el bucle para calcular la secuencia de Fibonacci en Python?",
          "¿Dónde ocurre el intercambio de valores en la secuencia de Fibonacci?"
        ],
        "responses": [
          "for _ in range(n):\n  a, b = b, a + b"
        ]
      },
      {
        "tag": "ext_nodejs_fibonacci",
        "patterns": [
          "¿Cómo inicializas las variables en la secuencia de Fibonacci en Node.js?",
          "¿Qué hace la línea 'let a = 0, b = 1' en el código de Fibonacci?"
        ],
        "responses": [
          "let a = 0, b = 1"
        ]
      },
      {
        "tag": "ext_nodejs_fibonacci",
        "patterns": [
          "¿Cómo se realiza el bucle para calcular la secuencia de Fibonacci en Node.js?",
          "¿Qué significa el intercambio de valores en el ciclo for del código de Fibonacci?"
        ],
        "responses": [
          "for (let i = 0; i < n; i++) {\n  [a, b] = [b, a + b];"
        ]
      },
      {
        "tag": "ext_python_findduplicates",
        "patterns": [
          "¿Cómo inicializas el conjunto para encontrar duplicados en Python?",
          "¿Qué hace 'seen = set()' en el código para encontrar duplicados?"
        ],
        "responses": [
          "seen = set()"
        ]
      },
      {
        "tag": "ext_python_findduplicates",
        "patterns": [
          "¿Cómo detectas los duplicados en el código de Python?",
          "¿Qué hace el bloque 'if item in seen' en el código para encontrar duplicados?"
        ],
        "responses": [
          "if item in seen:\n  duplicates.append(item);"
        ]
      },
      {
        "tag": "ext_nodejs_findduplicates",
        "patterns": [
          "¿Cómo inicializas el conjunto para encontrar duplicados en Node.js?",
          "¿Qué hace 'let seen = new Set()' en el código para encontrar duplicados?"
        ],
        "responses": [
          "let seen = new Set()"
        ]
      },
      {
        "tag": "ext_nodejs_findduplicates",
        "patterns": [
          "¿Cómo detectas los duplicados en el código de Node.js?",
          "¿Qué hace el bloque 'if (seen.has(item))' en el código para encontrar duplicados?"
        ],
        "responses": [
          "if (seen.has(item)) {\n  duplicates.push(item);"
        ]
      },
      {
        "tag": "ext_python_palindrome",
        "patterns": [
          "¿Cómo verificas si un string es un palíndromo en Python?",
          "¿Qué hace 's == s[::-1]' en el código para verificar un palíndromo?"
        ],
        "responses": [
          "return s == s[::-1]"
        ]
      },
      {
        "tag": "ext_nodejs_palindrome",
        "patterns": [
          "¿Cómo verificas si un string es un palíndromo en Node.js?",
          "¿Qué hace 'str.split('').reverse().join('')' en el código de Node.js?"
        ],
        "responses": [
          "return str === str.split('').reverse().join('');"
        ]
      },
      {
        "tag": "ext_python_countvowels",
        "patterns": [
          "¿Cómo cuentas las vocales en un string en Python?",
          "¿Qué hace la expresión 'sum(1 for char in s if char in 'aeiouAEIOU')' en el código de Python?"
        ],
        "responses": [
          "return sum(1 for char in s if char in 'aeiouAEIOU')"
        ]
      },
      {
        "tag": "ext_nodejs_countvowels",
        "patterns": [
          "¿Cómo cuentas las vocales en un string en Node.js?",
          "¿Qué hace el método filter() en el código para contar las vocales en Node.js?"
        ],
        "responses": [
          "return [...str].filter(char => 'aeiouAEIOU'.includes(char)).length;"
        ]
      },
      {
        "tag": "ext_python_removenonalpha",
        "patterns": [
          "¿Cómo eliminas los caracteres no alfabéticos de un string en Python?",
          "¿Qué hace el método filter() en el código para eliminar los caracteres no alfabéticos?"
        ],
        "responses": [
          "return ''.join(filter(str.isalpha, s))"
        ]
      },
      {
        "tag": "ext_nodejs_removenonalpha",
        "patterns": [
          "¿Cómo eliminas los caracteres no alfabéticos de un string en Node.js?",
          "¿Qué hace el método replace() en el código para eliminar los caracteres no alfabéticos?"
        ],
        "responses": [
          "return str.replace(/[^a-zA-Z]/g, '')"
        ]
      },
      {
        "tag": "ext_python_reverselist",
        "patterns": [
          "¿Cómo inviertes una lista en Python?",
          "¿Qué hace el operador 'lst[::-1]' en el código para invertir la lista?"
        ],
        "responses": [
          "return lst[::-1]"
        ]
      },
      {
        "tag": "ext_nodejs_reverselist",
        "patterns": [
          "¿Cómo inviertes una lista en Node.js?",
          "¿Qué hace el método reverse() en el código para invertir la lista?"
        ],
        "responses": [
          "return arr.reverse()"
        ]
      },
      {
        "tag": "ext_python_converttoint",
        "patterns": [
          "¿Cómo conviertes un string a entero en Python?",
          "¿Qué hace el método int() en el código para convertir un string a entero?"
        ],
        "responses": [
          "return int(s)"
        ]
      },
      {
        "tag": "ext_nodejs_converttoint",
        "patterns": [
          "¿Cómo conviertes un string a entero en Node.js?",
          "¿Qué hace el método parseInt() en el código para convertir un string a entero?"
        ],
        "responses": [
          "return parseInt(str, 10)"
        ]
      },
      {
        "tag": "ext_python_iseven",
        "patterns": [
          "¿Cómo verificas si un número es par en Python?",
          "¿Qué hace la expresión 'n % 2 == 0' en el código para verificar si un número es par?"
        ],
        "responses": [
          "return n % 2 == 0"
        ]
      },
      {
        "tag": "ext_python_isodd",
        "patterns": [
          "¿Cómo verificas si un número es impar en Python?",
          "¿Qué hace la expresión 'n % 2 != 0' en el código para verificar si un número es impar?"
        ],
        "responses": [
          "return n % 2 != 0"
        ]
      },
      {
        "tag": "ext_nodejs_isodd",
        "patterns": [
          "¿Cómo verificas si un número es impar en Node.js?",
          "¿Qué hace la expresión 'n % 2 !== 0' en el código para verificar si un número es impar?"
        ],
        "responses": [
          "return n % 2 !== 0"
        ]
      },
      {
        "tag": "ext_python_maxvalue",
        "patterns": [
          "¿Cómo encuentras el valor máximo de una lista en Python?",
          "¿Qué hace el método max() en el código para encontrar el valor máximo?"
        ],
        "responses": [
          "return max(lst)"
        ]
      },
      {
        "tag": "ext_nodejs_max_value",
        "patterns": [
          "Cómo se usa Math.max en el código para encontrar el valor máximo",
          "Qué hace la función Math.max(...arr)"
        ],
        "responses": [
          "Math.max(...arr)"
        ]
      },
      {
        "tag": "ext_python_min_value",
        "patterns": [
          "Qué hace la función min(lst)"
        ],
        "responses": [
          "min(lst)"
        ]
      },
      {
        "tag": "ext_nodejs_min_value",
        "patterns": [
          "Cómo se usa Math.min en el código para encontrar el valor mínimo",
          "Qué hace la función Math.min(...arr)"
        ],
        "responses": [
          "Math.min(...arr)"
        ]
      },
      {
        "tag": "ext_python_sort_list",
        "patterns": [
          "Qué hace la función sorted(lst)"
        ],
        "responses": [
          "sorted(lst)"
        ]
      },
      {
        "tag": "ext_nodejs_sort_list",
        "patterns": [
          "Qué hace la función arr.sort((a, b) => a - b)"
        ],
        "responses": [
          "arr.sort((a, b) => a - b)"
        ]
      },
      {
        "tag": "ext_python_reverse_string_in_place",
        "patterns": [
          "Qué hace la función reversed(s)",
          "Cómo funciona la función ''.join(reversed(s))"
        ],
        "responses": [
          "reversed(s)",
          "''.join(reversed(s))"
        ]
      },
      {
        "tag": "ext_nodejs_reverse_string_in_place",
        "patterns": [
          "Qué hace la función reverseStringInPlace",
          "Qué hace la estructura for (let i = str.length - 1; i >= 0; i--)"
        ],
        "responses": [
          "reversed += str[i]",
          "for (let i = str.length - 1; i >= 0; i--)"
        ]
      },
      {
        "tag": "ext_python_swap_elements",
        "patterns": [
          "Qué hace lst[i], lst[j] = lst[j], lst[i]"
        ],
        "responses": [
          "lst[i], lst[j] = lst[j], lst[i]"
        ]
      },
      {
        "tag": "ext_nodejs_swap_elements",
        "patterns": [
          "Qué hace [arr[i], arr[j]] = [arr[j], arr[i]]"
        ],
        "responses": [
          "[arr[i], arr[j]] = [arr[j], arr[i]]"
        ]
      },
      {
        "tag": "ext_python_list_length",
        "patterns": [
          "Qué hace la función len(lst)"
        ],
        "responses": [
          "len(lst)"
        ]
      },
      {
        "tag": "ext_nodejs_list_length",
        "patterns": [
          "Qué hace la función arr.length"
        ],
        "responses": [
          "arr.length"
        ]
      },
      {
        "tag": "ext_python_find_max_index",
        "patterns": [
          "Qué hace lst.index(max(lst))"
        ],
        "responses": [
          "lst.index(max(lst))"
        ]
      },
      {
        "tag": "ext_nodejs_find_max_index",
        "patterns": [
          "Qué hace arr.indexOf(Math.max(...arr))"
        ],
        "responses": [
          "arr.indexOf(Math.max(...arr))"
        ]
      },
      {
        "tag": "ext_python_list_sum",
        "patterns": [
          "Qué hace la función sum(lst)"
        ],
        "responses": [
          "sum(lst)"
        ]
      },
      {
        "tag": "ext_nodejs_list_sum",
        "patterns": [
          "Qué hace arr.reduce((acc, val) => acc + val, 0)"
        ],
        "responses": [
          "arr.reduce((acc, val) => acc + val, 0)"
        ]
      },
      {
        "tag": "ext_python_prime_number",
        "patterns": [
          "Qué hace la función n**0.5",
          "Qué hace el ciclo for i in range(2, int(n**0.5) + 1)"
        ],
        "responses": [
          "n**0.5",
          "for i in range(2, int(n**0.5) + 1)"
        ]
      },
      {
        "tag": "ext_nodejs_prime_number",
        "patterns": [
          "Qué hace Math.sqrt(n)",
          "Qué hace el ciclo for (let i = 2; i <= Math.sqrt(n); i++)"
        ],
        "responses": [
          "Math.sqrt(n)",
          "for (let i = 2; i <= Math.sqrt(n); i++)"
        ]
      },
      {
        "tag": "ext_python_remove_duplicates",
        "patterns": [
          "Qué hace list(set(lst))"
        ],
        "responses": [
          "list(set(lst))"
        ]
      },
      {
        "tag": "ext_nodejs_remove_duplicates",
        "patterns": [
          "Qué hace [...new Set(arr)]"
        ],
        "responses": [
          "[...new Set(arr)]"
        ]
      },
      {
        "tag": "ext_python_factorial",
        "patterns": [
          "Qué hace la función factorial(n - 1)"
        ],
        "responses": [
          "factorial(n - 1)"
        ]
      },
      {
        "tag": "ext_nodejs_factorial",
        "patterns": [
          "Qué hace la función factorial(n - 1)"
        ],
        "responses": [
          "factorial(n - 1)"
        ]
      },
      {
        "tag": "ext_python_power",
        "patterns": [
          "Qué hace el operador '**' en el código de potencia en Python?"
        ],
        "responses": [
          "El operador '**' se utiliza para calcular la potencia, es decir, 'base ** exp' calcula base elevado a la potencia exp."
        ]
      },
      {
        "tag": "ext_nodejs_power",
        "patterns": [
          "Qué hace la función Math.pow en Node.js?"
        ],
        "responses": [
          "La función Math.pow(base, exp) en Node.js devuelve la base elevada a la potencia exp."
        ]
      },
      {
        "tag": "ext_python_find_index",
        "patterns": [
          "Qué hace la función index() en Python?"
        ],
        "responses": [
          "La función index() devuelve el índice de la primera aparición del valor buscado en la lista. Si no lo encuentra, genera un error."
        ]
      },
      {
        "tag": "ext_nodejs_find_index",
        "patterns": [
          "Qué hace la función indexOf en Node.js?"
        ],
        "responses": [
          "La función indexOf(value) en Node.js devuelve el índice de la primera aparición del valor en el arreglo. Si no lo encuentra, devuelve -1."
        ]
      },
      {
        "tag": "ext_python_gcd",
        "patterns": [
          "Cómo funciona el algoritmo de Euclides para calcular el MCD en Python?"
        ],
        "responses": [
          "El algoritmo de Euclides funciona intercambiando los valores de a y b hasta que b se vuelve 0. El valor de a en ese momento es el MCD."
        ]
      },
      {
        "tag": "ext_nodejs_gcd",
        "patterns": [
          "Cómo funciona el algoritmo de Euclides para calcular el MCD en Node.js?"
        ],
        "responses": [
          "El algoritmo de Euclides en Node.js intercambia los valores de a y b hasta que b se vuelve 0. El valor de a en ese momento es el MCD."
        ]
      },
      {
        "tag": "ext_python_find_common_elements",
        "patterns": [
          "Qué hace la función set() en el código de Python para encontrar elementos comunes?"
        ],
        "responses": [
          "La función set() convierte las listas en conjuntos, eliminando duplicados, y luego realiza una intersección con el operador '&' para encontrar los elementos comunes."
        ]
      },
      {
        "tag": "ext_nodejs_find_common_elements",
        "patterns": [
          "Qué hace la función filter() en el código de Node.js para encontrar elementos comunes?"
        ],
        "responses": [
          "La función filter() recorre el primer arreglo y, usando includes(), comprueba si el valor está presente en el segundo arreglo."
        ]
      },
      {
        "tag": "ext_python_merge_sort",
        "patterns": [
          "Cómo se realiza la división de listas en el algoritmo de Merge Sort en Python?"
        ],
        "responses": [
          "El arreglo se divide en dos mitades usando slicing: left_half = arr[:mid] y right_half = arr[mid:]."
        ]
      },
      {
        "tag": "ext_nodejs_merge_sort",
        "patterns": [
          "Qué hace la función slice() en el código de merge sort en Node.js?",
          "Cómo se divide el arreglo en merge sort de Node.js?"
        ],
        "responses": [
          "La función slice() divide el arreglo en dos mitades: 'arr.slice(0, mid)' toma la mitad izquierda y 'arr.slice(mid)' toma la mitad derecha."
        ]
      },
      {
        "tag": "ext_python_dijkstra_algorithm",
        "patterns": [
          "Qué hace la función heappop() en el algoritmo de Dijkstra en Python?"
        ],
        "responses": [
          "La función heappop() extrae el nodo con la distancia más baja de la cola de prioridad (priority_queue)."
        ]
      },
      {
        "tag": "ext_nodejs_dijkstra_algorithm",
        "patterns": [
          "Qué hace la función enqueue() en la implementación de Dijkstra en Node.js?"
        ],
        "responses": [
          "La función enqueue() agrega un nodo a la cola de prioridad (priorityQueue) con su distancia como prioridad."
        ]
      },
      {
        "tag": "ext_python_quicksort",
        "patterns": [
          "Qué hace el operador // en el código de quicksort en Python?"
        ],
        "responses": [
          "El operador // realiza una división entera, que devuelve el valor entero de la división, descartando los decimales."
        ]
      },
      {
        "tag": "ext_nodejs_quicksort",
        "patterns": [
          "Qué hace el método filter() en quicksort de Node.js?"
        ],
        "responses": [
          "El método filter() se utiliza para crear un nuevo arreglo con los elementos que cumplen con la condición especificada. En este caso, se usa para dividir el arreglo en elementos menores, iguales o mayores al pivote."
        ]
      },
      {
        "tag": "ext_python_find_all_paths",
        "patterns": [
          "Qué hace la recursión en el algoritmo de encontrar todos los caminos en Python?"
        ],
        "responses": [
          "La recursión permite explorar todos los posibles caminos desde un nodo, agregando cada nodo visitado a la lista 'path' y llamando la función en los vecinos del nodo actual."
        ]
      },
      {
        "tag": "ext_nodejs_find_all_paths",
        "patterns": [
          "Qué hace el operador concat() en el código de encontrar todos los caminos en Node.js?"
        ],
        "responses": [
          "El operador concat() une las listas de caminos encontrados por las llamadas recursivas, generando una lista con todos los caminos posibles."
        ]
      },
      {
        "tag": "ext_python_knapsack_problem",
        "patterns": [
          "Qué hace la matriz dp en el problema de la mochila en Python?"
        ],
        "responses": [
          "La matriz dp guarda los valores máximos de la mochila para cada capacidad y cada item considerado, ayudando a resolver el problema de forma eficiente."
        ]
      },
      {
        "tag": "ext_nodejs_knapsack_problem",
        "patterns": [
          "Qué hace la función Array.from() en el problema de la mochila en Node.js?"
        ],
        "responses": [
          "La función Array.from() se usa para crear una nueva matriz 'dp' inicializada con ceros, con dimensiones apropiadas para el problema de la mochila."
        ]
      },
      {
        "tag": "ext_python_binary_search_tree",
        "patterns": [
          "Qué hace la función insert() en el árbol binario de búsqueda en Python?"
        ],
        "responses": [
          "La función insert() inserta un nuevo nodo en el árbol binario de búsqueda, manteniendo la propiedad de que los valores menores están a la izquierda y los mayores a la derecha."
        ]
      },
      {
        "tag": "ext_nodejs_binary_search_tree",
        "patterns": [
          "Qué hace la función insert() en el árbol binario de búsqueda en Node.js?"
        ],
        "responses": [
          "La función insert() agrega un nuevo nodo al árbol binario de búsqueda, manteniendo la jerarquía adecuada entre los nodos izquierdo y derecho según el valor del nodo."
        ]
      },
      {
        "tag": "ext_python_depth_first_search",
        "patterns": [
          "Qué hace el conjunto visited en el código de búsqueda en profundidad en Python?"
        ],
        "responses": [
          "El conjunto visited se usa para evitar que los nodos sean visitados varias veces, asegurando que la búsqueda en profundidad no entre en un bucle infinito."
        ]
      },
      {
        "tag": "ext_nodejs_depth_first_search",
        "patterns": [
          "Qué hace el método has() en la búsqueda en profundidad en Node.js?"
        ],
        "responses": [
          "El método has() se usa para verificar si un nodo ya ha sido visitado, evitando ciclos y repeticiones en la búsqueda en profundidad."
        ]
      },
      {
        "tag": "ext_python_floyd_warshall",
        "patterns": [
          "¿Qué hace la línea dist = list(map(lambda i: list(map(lambda j: j, i)), graph))?"
        ],
        "responses": [
          "Crea una copia del grafo original 'graph' en la variable 'dist', utilizando una transformación para cada elemento de las filas y columnas."
        ]
      },
      {
        "tag": "ext_nodejs_floyd_warshall",
        "patterns": [
          "¿Qué hace la línea const dist = graph.map(row => row.slice());"
        ],
        "responses": [
          "Crea una copia del grafo 'graph' en la variable 'dist', utilizando 'slice()' para copiar cada fila."
        ]
      },
      {
        "tag": "ext_python_knapsack_recursive",
        "patterns": [
          "¿Qué hace la línea if weights[n - 1] > capacity?"
        ],
        "responses": [
          "Verifica si el peso del item actual es mayor que la capacidad restante en la mochila."
        ]
      },
      {
        "tag": "ext_nodejs_knapsack_recursive",
        "patterns": [
          "¿Qué hace la línea if (weights[n - 1] > capacity)?"
        ],
        "responses": [
          "Verifica si el peso del item actual es mayor que la capacidad restante en la mochila."
        ]
      },
      {
        "tag": "ext_python_bellman_ford",
        "patterns": [
          "¿Qué hace la línea dist[src] = 0?"
        ],
        "responses": [
          "Inicializa la distancia al nodo fuente (src) como 0."
        ]
      },
      {
        "tag": "ext_nodejs_bellman_ford",
        "patterns": [
          "¿Qué hace la línea const dist = Array(V).fill(Infinity);"
        ],
        "responses": [
          "Crea un array 'dist' con longitud 'V' e inicializa todos los valores en 'Infinity', representando distancias infinitas inicialmente."
        ]
      },
      {
        "tag": "ext_python_read_file",
        "patterns": [
          "¿Qué hace la línea with open('archivo.txt', 'r') as archivo?"
        ],
        "responses": [
          "Abre el archivo 'archivo.txt' en modo lectura ('r') y asigna el archivo a la variable 'archivo'."
        ]
      },
      {
        "tag": "ext_nodejs_read_file",
        "patterns": [
          "¿Qué hace la línea fs.readFile('archivo.txt', 'utf8', (err, data) => {"
        ],
        "responses": [
          "Lee el archivo 'archivo.txt' en formato UTF-8 y pasa el contenido del archivo a la variable 'data'."
        ]
      },
      {
        "tag": "ext_python_write_file",
        "patterns": [
          "¿Qué hace la línea with open('archivo.txt', 'w') as archivo?"
        ],
        "responses": [
          "Abre el archivo 'archivo.txt' en modo escritura ('w'), y si el archivo no existe, se crea."
        ]
      },
      {
        "tag": "ext_nodejs_write_file",
        "patterns": [
          "¿Qué hace la línea fs.writeFile('archivo.txt', 'Este es un nuevo contenido.', (err) => {"
        ],
        "responses": [
          "Escribe el texto 'Este es un nuevo contenido.' en el archivo 'archivo.txt'. Si ocurre un error, lo reporta."
        ]
      },
      {
        "tag": "ext_python_append_file",
        "patterns": [
          "¿Qué hace la línea with open('archivo.txt', 'a') as archivo?"
        ],
        "responses": [
          "Abre el archivo 'archivo.txt' en modo append ('a'), lo que permite añadir contenido al final del archivo sin sobrescribirlo."
        ]
      },
      {
        "tag": "ext_nodejs_append_file",
        "patterns": [
          "¿Qué hace la línea fs.appendFile('archivo.txt', '\\nEste es un contenido añadido.', (err) => {"
        ],
        "responses": [
          "Añade el contenido '\\nEste es un contenido añadido.' al final del archivo 'archivo.txt'. Si ocurre un error, lo reporta."
        ]
      },
      {
        "tag": "ext_python_large_file_read",
        "patterns": [
          "¿Qué hace la línea for linea in archivo?"
        ],
        "responses": [
          "Itera sobre cada línea del archivo 'archivo_grande.txt' y las imprime después de eliminar los espacios en blanco extra."
        ]
      },
      {
        "tag": "ext_nodejs_large_file_read",
        "patterns": [
          "¿Qué hace la línea rl.on('line', (line) => {"
        ],
        "responses": [
          "Lee el archivo línea por línea y pasa cada línea al callback donde puede ser procesada o mostrada."
        ]
      },
      {
        "tag": "ext_python_check_file_exists",
        "patterns": [
          "¿Qué hace la línea if os.path.exists('archivo.txt')?"
        ],
        "responses": [
          "Verifica si el archivo 'archivo.txt' existe en el sistema de archivos."
        ]
      },
      {
        "tag": "ext_nodejs_check_file_exists",
        "patterns": [
          "¿Qué hace la línea if (fs.existsSync('archivo.txt'))?"
        ],
        "responses": [
          "Verifica si el archivo 'archivo.txt' existe de manera sincrónica en el sistema de archivos."
        ]
      },
      {
        "tag": "ext_python_read_write_binary",
        "patterns": [
          "¿Qué hace la línea with open('archivo.bin', 'wb') as archivo?"
        ],
        "responses": [
          "Abre el archivo binario 'archivo.bin' en modo escritura binaria ('wb'). Si el archivo no existe, lo crea."
        ]
      },
      {
        "tag": "ext_nodejs_read_write_binary",
        "patterns": [
          "¿Qué hace la línea fs.writeFileSync('archivo.bin', Buffer.from('Contenido en binario'))?"
        ],
        "responses": [
          "Escribe contenido binario en el archivo 'archivo.bin' de manera sincrónica."
        ]
      },
      {
        "tag": "ext_python_temp_file",
        "patterns": [
          "¿Qué hace la línea with tempfile.NamedTemporaryFile(delete=False) as temp?"
        ],
        "responses": [
          "Crea un archivo temporal usando 'NamedTemporaryFile'. El archivo no se elimina automáticamente cuando se cierra (delete=False)."
        ]
      },
      {
        "tag": "ext_nodejs_temp_file",
        "patterns": [
          "¿Qué hace la línea const tempPath = path.join(os.tmpdir(), 'archivo-temporal.txt');"
        ],
        "responses": [
          "Crea una ruta para un archivo temporal dentro del directorio temporal del sistema usando 'os.tmpdir()'."
        ]
      },
      {
        "tag": "ext_nodejs_forloop",
        "patterns": [
          "¿Qué hace la condición 'i < arr.length' en un ciclo for en Node.js?",
          "¿Cómo funciona la inicialización 'let i = 0' en un ciclo for en Node.js?"
        ],
        "responses": [
          "'i < arr.length' asegura que el ciclo itere sobre todos los elementos del array. El ciclo se detendrá cuando 'i' sea igual a la longitud del array.",
          "'let i = 0' inicializa la variable 'i' en cero para comenzar a recorrer el array desde el primer índice."
        ]
      },
      {
        "tag": "ext_nodejs_forloop",
        "patterns": [
          "¿Qué hace el incremento 'i++' en un ciclo for en Node.js?",
          "¿Cómo funciona el ciclo for en Node.js después de cada iteración?"
        ],
        "responses": [
          "'i++' incrementa la variable 'i' en uno después de cada iteración, moviendo al siguiente índice del array.",
          "Después de cada iteración, el ciclo avanza al siguiente valor de 'i', repitiendo el proceso hasta que se cumpla la condición 'i < arr.length'."
        ]
      },
      {
        "tag": "ext_nodejs_sortarray",
        "patterns": [
          "¿Qué hace la función 'arr.sort()' en Node.js?",
          "¿Cómo ordena un array el método 'arr.sort()' en Node.js?"
        ],
        "responses": [
          "'arr.sort()' ordena los elementos de un array en su lugar, modificando el array original. Por defecto, ordena los elementos como cadenas de texto.",
          "'arr.sort()' realiza una comparación entre los elementos del array y los organiza en un orden ascendente por defecto. Si se desea ordenar de otra manera, se debe proporcionar una función de comparación."
        ]
      },
      {
        "tag": "ext_python_readfile",
        "patterns": [
          "¿Qué hace el método 'read()' en Python?",
          "¿Cómo se lee un archivo línea por línea en Python?"
        ],
        "responses": [
          "'read()' lee todo el contenido del archivo de una sola vez y lo devuelve como una cadena de texto.",
          "Para leer un archivo línea por línea, se puede utilizar 'for line in archivo:' o 'archivo.readlines()'."
        ]
      },
      {
        "tag": "ext_python_delete_file",
        "patterns": [
          "¿Qué hace 'os.remove()' en Python?",
          "¿Cómo se verifica si un archivo existe antes de eliminarlo en Python?"
        ],
        "responses": [
          "'os.remove()' elimina el archivo especificado. Si el archivo no existe, se genera un error.",
          "'os.path.exists('archivo.txt')' verifica si el archivo existe antes de intentar eliminarlo, evitando posibles errores."
        ]
      },
      {
        "tag": "ext_nodejs_delete_file",
        "patterns": [
          "¿Qué hace 'fs.unlinkSync()' en Node.js?",
          "¿Cómo se verifica si un archivo existe antes de eliminarlo en Node.js?"
        ],
        "responses": [
          "'fs.unlinkSync()' elimina el archivo especificado de manera sincrónica. Si el archivo no existe, se genera un error.",
          "'fs.existsSync('archivo.txt')' verifica si el archivo existe antes de intentar eliminarlo."
        ]
      },
      {
        "tag": "ext_python_read_csv",
        "patterns": [
          "¿Qué hace 'csv.reader()' en Python?",
          "¿Cómo se lee un archivo CSV en Python?"
        ],
        "responses": [
          "'csv.reader()' lee el archivo CSV línea por línea, dividiendo cada línea por el separador de comas y devolviendo una lista con los valores.",
          "Para leer un archivo CSV en Python, utilizamos 'with open('archivo.csv', 'r')' para abrir el archivo y 'csv.reader(archivo)' para leerlo."
        ]
      },
      {
        "tag": "ext_nodejs_read_csv",
        "patterns": [
          "¿Qué hace 'readline.createInterface()' en Node.js?",
          "¿Cómo se maneja la lectura de un archivo CSV línea por línea en Node.js?"
        ],
        "responses": [
          "'readline.createInterface()' crea una interfaz para leer datos de una secuencia, como un archivo. Permite leer el archivo línea por línea.",
          "'rl.on('line', (line) => {...})' maneja cada línea leída y la divide usando 'line.split(',')' para separar los valores del CSV."
        ]
      },
      {
        "tag": "ext_python_handle_exceptions_file",
        "patterns": [
          "¿Cómo manejo excepciones al abrir un archivo en Python?",
          "¿Qué hace 'FileNotFoundError' en Python?"
        ],
        "responses": [
          "'FileNotFoundError' se genera cuando se intenta abrir un archivo que no existe. El bloque 'except' lo maneja para mostrar un mensaje personalizado.",
          "El manejo de excepciones con 'try-except' permite capturar errores como 'FileNotFoundError' y 'IOError' al trabajar con archivos."
        ]
      },
      {
        "tag": "ext_nodejs_handle_exceptions_file",
        "patterns": [
          "¿Qué hace 'ENOENT' en Node.js?",
          "¿Cómo manejo excepciones al leer un archivo en Node.js?"
        ],
        "responses": [
          "'ENOENT' es el código de error que indica que un archivo no se encuentra en el sistema. Se maneja con un bloque 'catch' en Node.js.",
          "El manejo de excepciones en Node.js con 'try-catch' permite capturar errores de lectura de archivos, como el error 'ENOENT' cuando un archivo no existe."
        ]
      },
      {
        "tag": "ext_python_basic_api",
        "patterns": [
          "¿Qué hace '@app.route()' en Flask?",
          "¿Cómo defino un endpoint en una API en Flask?"
        ],
        "responses": [
          "'@app.route()' define un endpoint en Flask, asociando una URL con una función que maneja las solicitudes a esa URL.",
          "'def home():' define la función que se ejecutará cuando se acceda al endpoint '/' de la API."
        ]
      },
      {
        "tag": "ext_nodejs_basic_api",
        "patterns": [
          "¿Qué hace 'app.get()' en Express?",
          "¿Cómo se define una ruta en una API en Node.js con Express?"
        ],
        "responses": [
          "'app.get()' define una ruta que responde a solicitudes GET en Express. Se usa para manejar las solicitudes en un servidor web.",
          "'app.get('/', (req, res) => {...})' define un endpoint que responde a la ruta '/' con una función que envía una respuesta al cliente."
        ]
      },
      {
        "tag": "ext_python_api_with_cors",
        "patterns": [
          "¿Qué hace 'CORS(app)' en Flask?",
          "¿Cómo habilito CORS en una API de Flask?"
        ],
        "responses": [
          "'CORS(app)' habilita CORS (Cross-Origin Resource Sharing) en la aplicación Flask, permitiendo que los recursos sean accesibles desde otros dominios.",
          "Para habilitar CORS en Flask, se importa 'CORS' de 'flask_cors' y se aplica a la aplicación con 'CORS(app)'."
        ]
      },
      {
        "tag": "ext_nodejs_api_with_cors",
        "patterns": [
          "¿Qué hace 'app.use(cors())' en Express?",
          "¿Cómo habilito CORS en una API de Node.js con Express?"
        ],
        "responses": [
          "'app.use(cors())' habilita CORS en la aplicación Express, permitiendo el acceso desde otros dominios a los recursos de la API.",
          "Para habilitar CORS en Express, se usa el middleware 'cors()' con 'app.use(cors())'."
        ]
      },
      {
        "tag": "ext_python_restful_api",
        "patterns": [
          "¿Cómo defino un endpoint GET en Flask?",
          "¿Qué hace 'jsonify()' en Flask?"
        ],
        "responses": [
          "'@app.route('/items', methods=['GET'])' define un endpoint que maneja solicitudes GET para obtener datos en Flask.",
          "'jsonify()' convierte un objeto Python (como un diccionario) en una respuesta JSON que se envía al cliente."
        ]
      },
      {
        "tag": "ext_nodejs_restful_api",
        "patterns": [
          "¿Qué hace express.json() en Node.js?",
          "¿Cómo se configuran las rutas en Express?",
          "¿Qué hace app.get() en el código de la API?",
          "¿Cómo se envían datos en una petición POST?",
          "¿Qué hace app.listen()?"
        ],
        "responses": [
          "app.use(express.json()); // Middleware para parsear cuerpos JSON",
          "app.get('/items', (req, res) => { res.json(data); }); // Ruta GET para obtener items",
          "app.post('/items', (req, res) => { const nuevoItem = req.body; data.push(nuevoItem); res.status(201).json(nuevoItem); }); // Ruta POST para agregar items",
          "app.listen(3000, () => { console.log('Servidor corriendo en http://localhost:3000'); }); // Inicia el servidor en el puerto 3000"
        ]
      },
      {
        "tag": "ext_python_api_error_handling",
        "patterns": [
          "¿Qué hace @app.errorhandler(404) en Flask?",
          "¿Cómo se maneja el error 404 en Flask?",
          "¿Qué hace jsonify() en Flask?",
          "¿Qué hace app.run() en Flask?"
        ],
        "responses": [
          "@app.errorhandler(404) // Maneja el error 404 para rutas no encontradas",
          "return jsonify({\"error\": \"Recurso no encontrado\"}), 404 // Respuesta en caso de error 404",
          "app.run(debug=True) // Inicia la aplicación Flask en modo debug"
        ]
      },
      {
        "tag": "ext_nodejs_api_error_handling",
        "patterns": [
          "¿Qué hace app.use() en Express?",
          "¿Cómo manejar errores 404 en Express?",
          "¿Qué hace res.status(404) en Express?",
          "¿Qué hace res.json() en Express?"
        ],
        "responses": [
          "app.use((req, res, next) => { res.status(404).json({ error: 'Recurso no encontrado' }); }); // Manejo de error 404 en Express",
          "res.status(404).json({ error: 'Recurso no encontrado' }); // Respuesta con código de estado 404",
          "res.json({ error: 'Recurso no encontrado' }); // Enviar respuesta JSON con el error"
        ]
      },
      {
        "tag": "ext_python_api_put_delete",
        "patterns": [
          "¿Cómo se usa PUT en Flask?",
          "¿Qué hace request.json en Flask?",
          "¿Cómo se usa DELETE en Flask?",
          "¿Qué hace data = [item for item in data if item['id'] != item_id] en Flask?"
        ],
        "responses": [
          "app.route('/items/<int:item_id>', methods=['PUT']) // Ruta PUT para actualizar un item",
          "item.update(request.json) // Actualización de un item con datos enviados en el cuerpo de la petición",
          "app.route('/items/<int:item_id>', methods=['DELETE']) // Ruta DELETE para eliminar un item",
          "data = [item for item in data if item['id'] != item_id] // Filtra los items para eliminar el item con el id especificado"
        ]
      },
      {
        "tag": "ext_nodejs_api_put_delete",
        "patterns": [
          "¿Qué hace app.put() en Express?",
          "¿Cómo se actualiza un item con PUT en Express?",
          "¿Qué hace app.delete() en Express?",
          "¿Qué hace res.status(204) en Express?"
        ],
        "responses": [
          "app.put('/items/:id', (req, res) => { // Ruta PUT para actualizar un item",
          "Object.assign(item, req.body); // Actualiza el item con los nuevos datos del cuerpo de la petición",
          "app.delete('/items/:id', (req, res) => { // Ruta DELETE para eliminar un item",
          "res.status(204).send(); // Responde con código de estado 204, sin contenido"
        ]
      },
      {
        "tag": "ext_python_api_with_query_params",
        "patterns": [
          "¿Cómo se obtienen parámetros de consulta en Flask?",
          "¿Qué hace request.args.get() en Flask?"
        ],
        "responses": [
          "nombre = request.args.get('nombre') // Obtiene el parámetro 'nombre' de la consulta",
          "edad = request.args.get('edad') // Obtiene el parámetro 'edad' de la consulta"
        ]
      },
      {
        "tag": "ext_nodejs_api_with_query_params",
        "patterns": [
          "¿Cómo se obtienen parámetros de consulta en Express?",
          "¿Qué hace req.query en Express?"
        ],
        "responses": [
          "const { nombre, edad } = req.query; // Obtiene los parámetros de consulta 'nombre' y 'edad'",
          "res.json({ nombre, edad }); // Devuelve los parámetros obtenidos en la respuesta JSON"
        ]
      },
      {
        "tag": "ext_python_api_pagination",
        "patterns": [
          "¿Cómo se implementa la paginación en Flask?",
          "¿Qué hace request.args.get('page') en Flask?",
          "¿Qué hace data[start:end] en Flask?"
        ],
        "responses": [
          "page = int(request.args.get('page', 1)) // Obtiene el número de página desde los parámetros de consulta",
          "data[start:end] // Devuelve un subconjunto de los datos para la página solicitada"
        ]
      },
      {
        "tag": "ext_nodejs_api_pagination",
        "patterns": [
          "¿Cómo se implementa la paginación en Express?",
          "¿Qué hace req.query.page en Express?",
          "¿Qué hace data.slice(start, end) en Express?"
        ],
        "responses": [
          "const page = parseInt(req.query.page) || 1; // Obtiene el número de página desde los parámetros de consulta",
          "data.slice(start, end) // Devuelve un subconjunto de los datos para la página solicitada"
        ]
      },
      {
        "tag": "ext_python_api_with_headers",
        "patterns": [
          "¿Cómo se obtienen los headers en Flask?",
          "¿Qué hace request.headers.get() en Flask?"
        ],
        "responses": [
          "cliente = request.headers.get('User-Agent') // Obtiene el valor del header 'User-Agent'"
        ]
      },
      {
        "tag": "ext_nodejs_api_with_headers",
        "patterns": [
          "¿Cómo obtener los headers de la solicitud en Node.js?",
          "¿Qué hace req.headers['user-agent'] en Node.js?"
        ],
        "responses": [
          "req.headers['user-agent']"
        ]
      },
      {
        "tag": "ext_python_api_auth",
        "patterns": [
          "¿Cómo verificar el nombre de usuario y la contraseña en Flask?",
          "¿Qué hace request.authorization en Flask?"
        ],
        "responses": [
          "request.authorization"
        ]
      },
      {
        "tag": "ext_nodejs_api_auth",
        "patterns": [
          "¿Cómo obtener los datos del cuerpo de la solicitud en Node.js?",
          "¿Qué hace req.body en Express?"
        ],
        "responses": [
          "req.body"
        ]
      },
      {
        "tag": "ext_python_api_json_response",
        "patterns": [
          "¿Qué hace jsonify en Flask?",
          "¿Cómo se envía una respuesta JSON en Flask?"
        ],
        "responses": [
          "jsonify({\"nombre\": \"API\", \"version\": \"1.0\"})"
        ]
      },
      {
        "tag": "ext_nodejs_api_json_response",
        "patterns": [
          "¿Qué hace res.json en Express?",
          "¿Cómo enviar una respuesta JSON en Express?"
        ],
        "responses": [
          "res.json({ nombre: 'API', version: '1.0' })"
        ]
      },
      {
        "tag": "ext_python_sqlite_connection",
        "patterns": [
          "¿Cómo crear una tabla en SQLite en Python?",
          "¿Cómo insertar datos en SQLite en Python?"
        ],
        "responses": [
          "cursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (id INTEGER PRIMARY KEY, nombre TEXT, edad INTEGER)''')",
          "cursor.execute('''INSERT INTO usuarios (nombre, edad) VALUES ('Juan', 25)''')"
        ]
      },
      {
        "tag": "ext_nodejs_mysql_connection",
        "patterns": [
          "¿Cómo crear una tabla en MySQL en Node.js?",
          "¿Cómo insertar datos en MySQL en Node.js?"
        ],
        "responses": [
          "connection.query('CREATE TABLE IF NOT EXISTS usuarios (id INT AUTO_INCREMENT PRIMARY KEY, nombre VARCHAR(255), edad INT)')",
          "connection.query('INSERT INTO usuarios (nombre, edad) VALUES (?, ?)', ['Juan', 25])"
        ]
      },
      {
        "tag": "ext_python_postgresql_connection",
        "patterns": [
          "¿Cómo crear una tabla en PostgreSQL en Python?",
          "¿Cómo insertar datos en PostgreSQL en Python?"
        ],
        "responses": [
          "cursor.execute('''CREATE TABLE IF NOT EXISTS usuarios (id SERIAL PRIMARY KEY, nombre VARCHAR(100), edad INTEGER)''')",
          "cursor.execute('''INSERT INTO usuarios (nombre, edad) VALUES (%s, %s)''', ('Juan', 25))"
        ]
      },
      {
        "tag": "ext_nodejs_mongodb_connection",
        "patterns": [
          "¿Cómo insertar un documento en MongoDB en Node.js?",
          "¿Cómo consultar documentos en MongoDB en Node.js?"
        ],
        "responses": [
          "await collection.insertOne({ nombre: 'Juan', edad: 25 })",
          "const usuarios = await collection.find().toArray()"
        ]
      },
      {
        "tag": "ext_python_redis_connection",
        "patterns": [
          "¿Cómo establecer un valor en Redis en Python?",
          "¿Cómo obtener un valor de Redis en Python?"
        ],
        "responses": [
          "r.set('clave', 'valor')",
          "r.get('clave')"
        ]
      },
      {
        "tag": "ext_nodejs_redis_connection",
        "patterns": [
          "¿Cómo conectar a Redis en Node.js?",
          "¿Cómo obtener el valor almacenado en Redis en Node.js?"
        ],
        "responses": [
          "const redis = require('redis');\nconst client = redis.createClient();",
          "client.get('clave', (err, value) => { if (err) throw err; console.log(value); })"
        ]
      },
      {
        "tag": "ext_python_sqlalchemy_connection",
        "patterns": [
          "¿Cómo crear una tabla con SQLAlchemy en Python?",
          "¿Cómo insertar datos en una base de datos con SQLAlchemy en Python?"
        ],
        "responses": [
          "create_engine('sqlite:///mi_base_de_datos.db')",
          "conn.execute(usuarios.insert().values(nombre='Juan', edad=25))"
        ]
      },
      {
        "tag": "ext_python_hello_world",
        "patterns": [
          "¿Cómo hacer un Hola Mundo en Python?"
        ],
        "responses": [
          "print('Hola Mundo')"
        ]
      },
      {
        "tag": "ext_nodejs_hello_world",
        "patterns": [
          "¿Cómo hacer un Hola Mundo en Node.js?"
        ],
        "responses": [
          "console.log('Hola Mundo')"
        ]
      },
      {
        "tag": "ext_python_create_variables",
        "patterns": [
          "¿Cómo declarar una variable en Python?",
          "¿Qué significa f-string en Python?"
        ],
        "responses": [
          "nombre = 'Juan'",
          "print(f'Nombre: {nombre}, Edad: {edad}, Estudiante: {es_estudiante}')"
        ]
      },
      {
        "tag": "ext_nodejs_create_variables",
        "patterns": [
          "¿Cómo declarar una variable en Node.js?",
          "¿Qué es un template literal en Node.js?"
        ],
        "responses": [
          "let nombre = 'Juan';",
          "console.log(`Nombre: ${nombre}, Edad: ${edad}, Estudiante: ${esEstudiante}`)"
        ]
      },
      {
        "tag": "ext_python_basic_math",
        "patterns": [
          "¿Cómo realizar una suma en Python?",
          "¿Cómo hacer una división en Python?"
        ],
        "responses": [
          "a + b",
          "a / b"
        ]
      },
      {
        "tag": "ext_nodejs_basic_math",
        "patterns": [
          "¿Cómo realizar una multiplicación en Node.js?",
          "¿Cómo hacer una resta en Node.js?"
        ],
        "responses": [
          "a * b",
          "a - b"
        ]
      },
      {
        "tag": "ext_python_conditionals",
        "patterns": [
          "¿Cómo hacer un condicional con if en Python?",
          "¿Qué hace elif en Python?"
        ],
        "responses": [
          "if edad < 18:",
          "elif edad == 18:"
        ]
      },
      {
        "tag": "ext_nodejs_conditionals",
        "patterns": [
          "¿Cómo usar else if en Node.js?",
          "¿Cómo hacer un condicional con if en Node.js?"
        ],
        "responses": [
          "if (edad < 18) { ... }",
          "else if (edad === 18) { ... }"
        ]
      },
      {
        "tag": "ext_python_class",
        "patterns": [
          "¿Cómo definir un constructor en Python?",
          "¿Cómo crear un objeto de una clase en Python?"
        ],
        "responses": [
          "class Persona: ...\npersona = Persona('Juan', 25)"
        ]
      },
      {
        "tag": "ext_nodejs_class_declaration",
        "patterns": [
          "¿Cómo se declara una clase en Node.js?",
          "¿Dónde se encuentra la declaración de la clase en el ejemplo de Node.js?"
        ],
        "responses": [
          "class Persona {"
        ]
      },
      {
        "tag": "ext_nodejs_class_constructor",
        "patterns": [
          "¿Qué hace el constructor de la clase Persona en Node.js?"
        ],
        "responses": [
          "constructor(nombre, edad) { this.nombre = nombre; this.edad = edad; }"
        ]
      },
      {
        "tag": "ext_nodejs_class_method",
        "patterns": [
          "¿Cuál es el método que realiza la acción de saludar en Node.js?",
          "¿Qué hace el método saludar en la clase Persona en Node.js?"
        ],
        "responses": [
          "saludar() { return `Hola, mi nombre es ${this.nombre} y tengo ${this.edad} años.`; }"
        ]
      },
      {
        "tag": "ext_nodejs_class_instance",
        "patterns": [
          "¿Cómo se instancia un objeto de la clase Persona en Node.js?"
        ],
        "responses": [
          "const persona = new Persona('Juan', 25);"
        ]
      },
      {
        "tag": "ext_nodejs_class_method_call",
        "patterns": [
          "¿Cómo se llama al método saludar de la clase Persona en Node.js?"
        ],
        "responses": [
          "console.log(persona.saludar());"
        ]
      },
      {
        "tag": "ext_python_inheritance",
        "patterns": [
          "¿Cómo se define la herencia en el ejemplo de Python?",
          "¿Dónde se utiliza el 'super()' en el ejemplo de herencia en Python?"
        ],
        "responses": [
          "super().__init__(nombre, edad)"
        ]
      },
      {
        "tag": "ext_python_inheritance_method",
        "patterns": [
          "¿Qué hace el método estudiar en la clase Estudiante en Python?"
        ],
        "responses": [
          "return f'Estoy estudiando en el grado {self.grado}.',"
        ]
      },
      {
        "tag": "ext_nodejs_inheritance",
        "patterns": [
          "¿Cómo se utiliza 'extends' para la herencia en Node.js?",
          "¿Qué hace 'super()' en el ejemplo de herencia en Node.js?"
        ],
        "responses": [
          "class Estudiante extends Persona {",
          "super(nombre, edad);"
        ]
      },
      {
        "tag": "ext_nodejs_inheritance_method",
        "patterns": [
          "¿Qué hace el método estudiar en la clase Estudiante en Node.js?"
        ],
        "responses": [
          "return `Estoy estudiando en el grado ${this.grado}.`"
        ]
      },
      {
        "tag": "ext_python_polymorphism_method",
        "patterns": [
          "¿Qué hace el método sonido en la clase Perro en Python?",
          "¿Cuál es la diferencia entre los métodos sonido de Perro y Gato en Python?"
        ],
        "responses": [
          "def sonido(self): return 'Guau'"
        ]
      },
      {
        "tag": "ext_nodejs_polymorphism_method",
        "patterns": [
          "¿Qué hace el método sonido en la clase Perro en Node.js?",
          "¿Cómo se implementa el polimorfismo en el ejemplo de Node.js?"
        ],
        "responses": [
          "sonido() { return 'Guau'; }"
        ]
      },
      {
        "tag": "ext_python_encapsulation",
        "patterns": [
          "¿Qué hace el método get_nombre en Python?",
          "¿Cómo se accede al atributo privado __nombre en Python?"
        ],
        "responses": [
          "def get_nombre(self): return self.__nombre"
        ]
      },
      {
        "tag": "ext_nodejs_encapsulation",
        "patterns": [
          "¿Qué hace el método getNombre en Node.js?",
          "¿Cómo se accede al atributo privado #nombre en Node.js?"
        ],
        "responses": [
          "getNombre() { return this.#nombre; }"
        ]
      },
      {
        "tag": "ext_python_lists",
        "patterns": [
          "¿Cómo se agrega un elemento a la lista en Python?",
          "¿Cómo se accede al primer elemento de la lista en Python?"
        ],
        "responses": [
          "mi_lista.append(6)",
          "print(f'El primer elemento es: {mi_lista[0]}')"
        ]
      },
      {
        "tag": "ext_nodejs_arrays",
        "patterns": [
          "¿Cómo se agrega un elemento a un array en Node.js?",
          "¿Cómo se accede al primer elemento de un array en Node.js?"
        ],
        "responses": [
          "miArray.push(6)",
          "console.log(`El primer elemento es: ${miArray[0]}`);"
        ]
      },
      {
        "tag": "ext_python_nested_lists",
        "patterns": [
          "¿Cómo se accede a un elemento en una lista anidada en Python?",
          "¿Qué hace la línea matriz[1][2] en el ejemplo de lista anidada en Python?"
        ],
        "responses": [
          "matriz[1][2]"
        ]
      },
      {
        "tag": "ext_nodejs_nested_arrays",
        "patterns": [
          "¿Cómo se crea un array anidado en Node.js?",
          "¿Qué hace la línea matriz[1][2] en el ejemplo de array anidado en Node.js?"
        ],
        "responses": [
          "const matriz = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];",
          "matriz[1][2]"
        ]
      },
      {
        "tag": "ext_python_matrix_operations",
        "patterns": [
          "¿Cómo se realiza una operación de producto de matrices en Python?",
          "¿Qué hace np.dot(matriz_a, matriz_b) en el ejemplo de operaciones con matrices en Python?"
        ],
        "responses": [
          "import numpy as np",
          "np.dot(matriz_a, matriz_b)"
        ]
      },
      {
        "tag": "ext_nodejs_matrix_operations",
        "patterns": [
          "¿Cómo se realiza una operación de producto de matrices en Node.js?",
          "¿Qué hace math.multiply(matrizA, matrizB) en el ejemplo de operaciones con matrices en Node.js?"
        ],
        "responses": [
          "const math = require('mathjs');",
          "math.multiply(matrizA, matrizB)"
        ]
      },
      {
        "tag": "ext_python_list_comprehension",
        "patterns": [
          "¿Cómo se usa list comprehension en Python?",
          "¿Qué hace la línea 'cuadrados = [x**2 for x in numeros]' en Python?"
        ],
        "responses": [
          "cuadrados = [x**2 for x in numeros]"
        ]
      },
      {
        "tag": "ext_nodejs_array_mapping",
        "patterns": [
          "¿Cómo se usa el método map en Node.js?",
          "¿Qué hace 'numeros.map(x => x ** 2)' en Node.js?"
        ],
        "responses": [
          "const cuadrados = numeros.map(x => x ** 2);"
        ]
      },
      {
        "tag": "ext_python_2d_matrix",
        "patterns": [
          "¿Cómo se recorre una matriz 2D en Python?",
          "¿Qué hace la línea 'for fila in matriz:' en el ejemplo de matriz 2D en Python?"
        ],
        "responses": [
          "for fila in matriz:"
        ]
      },
      {
        "tag": "ext_nodejs_2d_array",
        "patterns": [
          "¿Cómo se recorre una matriz 2D en Node.js?",
          "¿Qué hace la línea 'matriz.forEach(fila => {...})' en el ejemplo de matriz 2D en Node.js?"
        ],
        "responses": [
          "matriz.forEach(fila => {"
        ]
      }
    ]
  }